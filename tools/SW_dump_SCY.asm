sub_45FC40      proc near               ; CODE XREF: sub_45E870+1F↑p

var_F4          = dword ptr -0F4h
var_F0          = dword ptr -0F0h
var_C4          = dword ptr -0C4h
var_BD          = byte ptr -0BDh
var_BC          = byte ptr -0BCh
var_B8          = byte ptr -0B8h
var_B7          = byte ptr -0B7h
var_B5          = byte ptr -0B5h
var_B4          = byte ptr -0B4h
var_B2          = byte ptr -0B2h
var_96          = byte ptr -96h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_73          = byte ptr -73h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72C80 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_45FC40
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E8h
                mov     [ebp+var_F0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_C4], eax
                mov     ecx, [ebp+var_F0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_45FC95
                mov     [ebp+var_F4], offset byte_110A50C
                jmp     short loc_45FCA3
; ---------------------------------------------------------------------------

loc_45FC95:                             ; CODE XREF: sub_45FC40+47↑j
                mov     edx, [ebp+var_F0]
                mov     eax, [edx]
                mov     [ebp+var_F4], eax

loc_45FCA3:                             ; CODE XREF: sub_45FC40+53↑j
                push    0
                mov     ecx, [ebp+var_C4]
                push    ecx
                push    offset aTbAchievement ; "tb_Achievement"
                mov     edx, [ebp+var_F4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_45FCD8
; ---------------------------------------------------------------------------

loc_45FCCF:                             ; CODE XREF: sub_45FC40+20A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_45FCD8:                             ; CODE XREF: sub_45FC40+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_45FE4F
                lea     ecx, [ebp+var_B2]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_B7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_B5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_B4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_B2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_96]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_69]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_BC]
                push    ecx
                mov     ecx, [ebp+var_F0]
                add     ecx, 10h
                call    sub_48C6C0
                mov     ecx, eax
                call    sub_460010
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_B2]
                call    sub_93E020
                jmp     loc_45FCCF
; ---------------------------------------------------------------------------

loc_45FE4F:                             ; CODE XREF: sub_45FC40+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_F0]
                call    read_and_verify_checksum
                mov     [ebp+var_BD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_BD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_45FC40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public read_uint8
read_uint8      proc near               ; CODE XREF: sub_45FC40+CC↑p
                                        ; sub_45FC40+EA↑p ...

var_8           = dword ptr -8
var_1           = byte ptr -1
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_8], ecx
                mov     eax, [ebp+var_8]
                cmp     dword ptr [eax], 0
                jz      short loc_45FEBA
                push    1
                lea     ecx, [ebp+var_1]
                push    ecx
                mov     edx, [ebp+var_8]
                mov     eax, [edx]
                mov     ecx, [ebp+var_8]
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+8]
                call    eax
                jmp     short loc_45FEE1
; ---------------------------------------------------------------------------

loc_45FEBA:                             ; CODE XREF: read_uint8+F↑j
                mov     ecx, [ebp+var_8]
                cmp     dword ptr [ecx+4], 0
                jz      short loc_45FEDD
                mov     edx, [ebp+var_8]
                mov     eax, [edx+4]
                push    eax
                push    1
                push    1
                lea     ecx, [ebp+var_1]
                push    ecx
                nop
                call    sub_17E0AF6
                add     esp, 10h
                jmp     short loc_45FEE1
; ---------------------------------------------------------------------------

loc_45FEDD:                             ; CODE XREF: read_uint8+31↑j
                mov     [ebp+var_1], 0

loc_45FEE1:                             ; CODE XREF: read_uint8+28↑j
                                        ; read_uint8+4B↑j
                mov     edx, [ebp+arg_0]
                mov     al, [ebp+var_1]
                mov     [edx], al
                movzx   eax, [ebp+var_1]
                cdq
                mov     ecx, [ebp+var_8]
                add     eax, [ecx+8]
                adc     edx, [ecx+0Ch]
                mov     ecx, [ebp+var_8]
                mov     [ecx+8], eax
                mov     [ecx+0Ch], edx
                mov     al, [ebp+var_1]
                mov     esp, ebp
                pop     ebp
                retn    4
read_uint8      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public read_uint16
read_uint16     proc near               ; CODE XREF: sub_45FC40+DB↑p
                                        ; sub_45FC40+F9↑p ...

var_8           = dword ptr -8
var_4           = word ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_8], ecx
                mov     eax, [ebp+var_8]
                cmp     dword ptr [eax], 0
                jz      short loc_45FF3A
                push    2
                lea     ecx, [ebp+var_4]
                push    ecx
                mov     edx, [ebp+var_8]
                mov     eax, [edx]
                mov     ecx, [ebp+var_8]
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+8]
                call    eax
                jmp     short loc_45FF63
; ---------------------------------------------------------------------------

loc_45FF3A:                             ; CODE XREF: read_uint16+F↑j
                mov     ecx, [ebp+var_8]
                cmp     dword ptr [ecx+4], 0
                jz      short loc_45FF5D
                mov     edx, [ebp+var_8]
                mov     eax, [edx+4]
                push    eax
                push    1
                push    2
                lea     ecx, [ebp+var_4]
                push    ecx
                nop
                call    sub_17E0AF6
                add     esp, 10h
                jmp     short loc_45FF63
; ---------------------------------------------------------------------------

loc_45FF5D:                             ; CODE XREF: read_uint16+31↑j
                xor     edx, edx
                mov     [ebp+var_4], dx

loc_45FF63:                             ; CODE XREF: read_uint16+28↑j
                                        ; read_uint16+4B↑j
                mov     eax, [ebp+arg_0]
                mov     cx, [ebp+var_4]
                mov     [eax], cx
                movzx   eax, [ebp+var_4]
                cdq
                mov     ecx, [ebp+var_8]
                add     eax, [ecx+8]
                adc     edx, [ecx+0Ch]
                mov     ecx, [ebp+var_8]
                mov     [ecx+8], eax
                mov     [ecx+0Ch], edx
                mov     ax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
read_uint16     endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public read_uint32
read_uint32     proc near               ; CODE XREF: sub_45FC40+BD↑p
                                        ; sub_45FC40+12B↑p ...

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_8], ecx
                mov     eax, [ebp+var_8]
                cmp     dword ptr [eax], 0
                jz      short loc_45FFBA
                push    4
                lea     ecx, [ebp+var_4]
                push    ecx
                mov     edx, [ebp+var_8]
                mov     eax, [edx]
                mov     ecx, [ebp+var_8]
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+8]
                call    eax
                jmp     short loc_45FFE4
; ---------------------------------------------------------------------------

loc_45FFBA:                             ; CODE XREF: read_uint32+F↑j
                mov     ecx, [ebp+var_8]
                cmp     dword ptr [ecx+4], 0
                jz      short loc_45FFDD
                mov     edx, [ebp+var_8]
                mov     eax, [edx+4]
                push    eax
                push    1
                push    4
                lea     ecx, [ebp+var_4]
                push    ecx
                nop
                call    sub_17E0AF6
                add     esp, 10h
                jmp     short loc_45FFE4
; ---------------------------------------------------------------------------

loc_45FFDD:                             ; CODE XREF: read_uint32+31↑j
                mov     [ebp+var_4], 0

loc_45FFE4:                             ; CODE XREF: read_uint32+28↑j
                                        ; read_uint32+4B↑j
                mov     edx, [ebp+arg_0]
                mov     eax, [ebp+var_4]
                mov     [edx], eax
                mov     ecx, [ebp+var_4]
                xor     edx, edx
                mov     eax, [ebp+var_8]
                add     ecx, [eax+8]
                adc     edx, [eax+0Ch]
                mov     eax, [ebp+var_8]
                mov     [eax+8], ecx

loc_460000:                             ; DATA XREF: pvdluegq:017D963A↓o
                                        ; pvdluegq:017D9686↓o
                mov     [eax+0Ch], edx
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
read_uint32     endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460010      proc near               ; CODE XREF: sub_45FC40+1F6↑p

var_48          = dword ptr -48h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 48h
                push    esi
                mov     [ebp+var_48], ecx
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+arg_0]

loc_460020:                             ; DATA XREF: ___:0104E32C↓o
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]

loc_46002D:                             ; DATA XREF: ___:0106D4B0↓o
                                        ; ___:0106D4F8↓o ...
                mov     [eax+4], dl
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5]
                mov     [eax+5], dx
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+arg_0]

loc_460044:                             ; DATA XREF: ___:01043310↓o
                                        ; ___:01043378↓o ...
                mov     dl, [ecx+7]
                mov     [eax+7], dl
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+8]
                mov     [eax+8], dx
                mov     eax, dword_102FCC8
                push    eax

loc_46005E:                             ; DATA XREF: ___:01043974↓o
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0Ah

loc_460066:                             ; DATA XREF: ___:0108F264↓o
                push    ecx

loc_460067:                             ; DATA XREF: pvdluegq:017D95A6↓o
                mov     ecx, [ebp+var_48]

loc_46006A:                             ; DATA XREF: pvdluegq:017D974E↓o
                add     ecx, 0Ah
                call    sub_4A0090
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+26h]
                mov     [edx+26h], cx
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+28h]
                mov     [edx+28h], ecx
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2Ch]
                mov     [edx+2Ch], ecx
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+30h]
                mov     [edx+30h], ecx
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+34h]
                mov     [edx+34h], ecx
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+38h]
                mov     [edx+38h], ecx
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+3Ch]
                mov     [edx+3Ch], ecx
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+40h]
                mov     [edx+40h], ecx
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+44h]
                mov     [edx+44h], ecx
                mov     [ebp+var_4], 0
                jmp     short loc_4600F2
; ---------------------------------------------------------------------------

loc_4600E9:                             ; CODE XREF: sub_460010+FC↓j
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_4600F2:                             ; CODE XREF: sub_460010+D7↑j
                cmp     [ebp+var_4], 2
                jnb     short loc_46010E
                mov     eax, [ebp+var_4]
                mov     ecx, [ebp+var_48]
                mov     edx, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+40h]
                mov     [ecx+eax*4+40h], edx
                jmp     short loc_4600E9
; ---------------------------------------------------------------------------

loc_46010E:                             ; CODE XREF: sub_460010+E6↑j
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+48h]
                mov     [eax+48h], dl
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+49h]
                mov     [eax+49h], dl
                mov     [ebp+var_8], 0
                jmp     short loc_460138
; ---------------------------------------------------------------------------

loc_46012F:                             ; CODE XREF: sub_460010+140↓j
                mov     eax, [ebp+var_8]
                add     eax, 1
                mov     [ebp+var_8], eax

loc_460138:                             ; CODE XREF: sub_460010+11D↑j
                cmp     [ebp+var_8], 2
                jnb     short loc_460152
                mov     ecx, [ebp+var_48]
                add     ecx, [ebp+var_8]
                mov     edx, [ebp+arg_0]
                add     edx, [ebp+var_8]
                mov     al, [edx+48h]
                mov     [ecx+48h], al
                jmp     short loc_46012F
; ---------------------------------------------------------------------------

loc_460152:                             ; CODE XREF: sub_460010+12C↑j
                mov     ecx, [ebp+var_48]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Ah]
                mov     [ecx+4Ah], eax
                mov     ecx, [ebp+var_48]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Eh]
                mov     [ecx+4Eh], eax
                mov     [ebp+var_C], 0
                jmp     short loc_46017C
; ---------------------------------------------------------------------------

loc_460173:                             ; CODE XREF: sub_460010+186↓j
                mov     ecx, [ebp+var_C]
                add     ecx, 1
                mov     [ebp+var_C], ecx

loc_46017C:                             ; CODE XREF: sub_460010+161↑j
                cmp     [ebp+var_C], 2
                jnb     short loc_460198
                mov     edx, [ebp+var_C]
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+var_C]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+4Ah]
                mov     [eax+edx*4+4Ah], ecx
                jmp     short loc_460173
; ---------------------------------------------------------------------------

loc_460198:                             ; CODE XREF: sub_460010+170↑j
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+52h]
                mov     [edx+52h], cl
                mov     edx, [ebp+var_48]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+53h]
                mov     [edx+53h], cl
                mov     [ebp+var_10], 0
                jmp     short loc_4601C2
; ---------------------------------------------------------------------------

loc_4601B9:                             ; CODE XREF: sub_460010+1CA↓j
                mov     edx, [ebp+var_10]
                add     edx, 1
                mov     [ebp+var_10], edx

loc_4601C2:                             ; CODE XREF: sub_460010+1A7↑j
                cmp     [ebp+var_10], 2
                jnb     short loc_4601DC
                mov     eax, [ebp+var_48]
                add     eax, [ebp+var_10]
                mov     ecx, [ebp+arg_0]
                add     ecx, [ebp+var_10]
                mov     dl, [ecx+52h]
                mov     [eax+52h], dl
                jmp     short loc_4601B9
; ---------------------------------------------------------------------------

loc_4601DC:                             ; CODE XREF: sub_460010+1B6↑j
                mov     eax, [ebp+var_48]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_460010      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4601F0      proc near               ; CODE XREF: sub_45E870+35↑p

var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75E60 SIZE 00000008 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A8h
                mov     [ebp+var_B0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_B0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_460242
                mov     [ebp+var_B4], offset byte_110A50C
                jmp     short loc_460250
; ---------------------------------------------------------------------------

loc_460242:                             ; CODE XREF: sub_4601F0+44↑j
                mov     edx, [ebp+var_B0]
                mov     eax, [edx]
                mov     [ebp+var_B4], eax

loc_460250:                             ; CODE XREF: sub_4601F0+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbAchievementB ; "tb_Achievement_begin"
                mov     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_460282
; ---------------------------------------------------------------------------

loc_460279:                             ; CODE XREF: sub_4601F0+E3↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_460282:                             ; CODE XREF: sub_4601F0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_4602D5
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_62]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68]
                push    eax
                mov     ecx, [ebp+var_B0]
                add     ecx, 20h
                call    sub_49BA40
                mov     ecx, [ebp+var_68]
                mov     [eax], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+4], dx
                mov     cl, [ebp+var_62]
                mov     [eax+6], cl
                jmp     short loc_460279
; ---------------------------------------------------------------------------

loc_4602D5:                             ; CODE XREF: sub_4601F0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_B0]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4601F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460310      proc near               ; CODE XREF: sub_45E870+4B↑p

var_280         = dword ptr -280h
var_27C         = dword ptr -27Ch
var_10C         = dword ptr -10Ch
var_105         = byte ptr -105h
var_104         = byte ptr -104h
var_102         = byte ptr -102h
var_101         = byte ptr -101h
var_FF          = byte ptr -0FFh
var_FD          = byte ptr -0FDh
var_FB          = byte ptr -0FBh
var_F9          = byte ptr -0F9h
var_F7          = byte ptr -0F7h
var_DB          = byte ptr -0DBh
var_BF          = byte ptr -0BFh
var_A3          = byte ptr -0A3h
var_87          = byte ptr -87h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72CA0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_460310
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 274h
                mov     [ebp+var_27C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_10C], eax
                mov     ecx, [ebp+var_27C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_460365
                mov     [ebp+var_280], offset byte_110A50C
                jmp     short loc_460373
; ---------------------------------------------------------------------------

loc_460365:                             ; CODE XREF: sub_460310+47↑j
                mov     edx, [ebp+var_27C]
                mov     eax, [edx]
                mov     [ebp+var_280], eax

loc_460373:                             ; CODE XREF: sub_460310+53↑j
                push    0
                mov     ecx, [ebp+var_10C]
                push    ecx
                push    offset aTbAchievementE ; "tb_Achievement_Emblem"
                mov     edx, [ebp+var_280]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4603A8
; ---------------------------------------------------------------------------

loc_46039F:                             ; CODE XREF: sub_460310+1CB↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4603A8:                             ; CODE XREF: sub_460310+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4604E0
                push    offset sub_93E020
                push    offset sub_48C660
                push    5
                push    1Ch
                lea     eax, [ebp+var_F7]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_104]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_102]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_101]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_FF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_FD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_FB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_F9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_F7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_DB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_BF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_A3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_104]
                push    ecx
                lea     edx, [ebp+var_104]
                push    edx
                mov     ecx, [ebp+var_27C]
                add     ecx, 30h
                call    sub_48C930
                mov     ecx, eax
                call    sub_460540
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    5
                push    1Ch
                lea     eax, [ebp+var_F7]
                push    eax
                call    sub_ED9E2A
                jmp     loc_46039F
; ---------------------------------------------------------------------------

loc_4604E0:                             ; CODE XREF: sub_460310+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_27C]
                call    read_and_verify_checksum
                mov     [ebp+var_105], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_105]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_460310      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460520      proc near               ; CODE XREF: sub_460310+B1299E↓j
                                        ; sub_48C930+AE9756↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    5
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 0Dh
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_460520      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460540      proc near               ; CODE XREF: sub_460310+1AD↑p

var_40          = dword ptr -40h
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 40h
                push    esi
                mov     [ebp+var_40], ecx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2]
                mov     [eax+2], dl
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+3]
                mov     [eax+3], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5]
                mov     [eax+5], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+7]
                mov     [eax+7], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+9]
                mov     [eax+9], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Bh]
                mov     [eax+0Bh], dx
                mov     [ebp+var_4], 0
                jmp     short loc_4605BA
; ---------------------------------------------------------------------------

loc_4605B1:                             ; CODE XREF: sub_460540+96↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_4605BA:                             ; CODE XREF: sub_460540+6F↑j
                cmp     [ebp+var_4], 5
                jnb     short loc_4605D8
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+3]
                mov     [edx+ecx*2+3], ax
                jmp     short loc_4605B1
; ---------------------------------------------------------------------------

loc_4605D8:                             ; CODE XREF: sub_460540+7E↑j
                mov     [ebp+var_8], 0
                jmp     short loc_4605EA
; ---------------------------------------------------------------------------

loc_4605E1:                             ; CODE XREF: sub_460540+D9↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_4605EA:                             ; CODE XREF: sub_460540+9F↑j
                cmp     [ebp+var_8], 5
                jnb     short loc_46061B
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+var_8]
                imul    eax, 1Ch
                mov     ecx, [ebp+arg_0]
                lea     edx, [ecx+eax+0Dh]
                push    edx
                mov     eax, [ebp+var_8]
                imul    eax, 1Ch
                mov     ecx, [ebp+var_40]
                lea     ecx, [ecx+eax+0Dh]
                call    sub_4A0090
                jmp     short loc_4605E1
; ---------------------------------------------------------------------------

loc_46061B:                             ; CODE XREF: sub_460540+AE↑j
                mov     eax, [ebp+var_40]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_460540      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460630      proc near               ; CODE XREF: sub_45E870+61↑p

var_1BC         = dword ptr -1BCh
var_1B8         = dword ptr -1B8h
var_A4          = dword ptr -0A4h
var_9D          = byte ptr -9Dh
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F753C0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48A0D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1B0h
                mov     [ebp+var_1B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A4], eax
                mov     ecx, [ebp+var_1B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_460685
                mov     [ebp+var_1BC], offset byte_110A50C
                jmp     short loc_460693
; ---------------------------------------------------------------------------

loc_460685:                             ; CODE XREF: sub_460630+47↑j
                mov     edx, [ebp+var_1B8]
                mov     eax, [edx]
                mov     [ebp+var_1BC], eax

loc_460693:                             ; CODE XREF: sub_460630+53↑j
                push    0
                mov     ecx, [ebp+var_A4]
                push    ecx
                push    offset aTbAchievementS ; "tb_Achievement_Script"
                mov     edx, [ebp+var_1BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4606C8
; ---------------------------------------------------------------------------

loc_4606BF:                             ; CODE XREF: sub_460630+115↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4606C8:                             ; CODE XREF: sub_460630+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_46074A
                lea     ecx, [ebp+var_9C]
                call    sub_460790
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_9C]
                push    ecx
                mov     ecx, [ebp+var_1B8]
                add     ecx, 40h
                call    sub_4978B0
                mov     ecx, eax
                call    sub_48A230
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_9C]
                call    sub_A56C70
                jmp     loc_4606BF
; ---------------------------------------------------------------------------

loc_46074A:                             ; CODE XREF: sub_460630+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_1B8]
                call    read_and_verify_checksum
                mov     [ebp+var_9D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_9D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_460630      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460790      proc near               ; CODE XREF: sub_460630+A6↑p
                                        ; sub_47B2C0+A6↓p ...

var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_31          = byte ptr -31h
var_30          = dword ptr -30h
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72CC0 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_460790
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 44h
                mov     [ebp+var_48], ecx
                mov     eax, [ebp+var_48]
                add     eax, 4
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_4C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_48]
                add     eax, 20h
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_31]
                mov     [ebp+var_30], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_50], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_460790      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460820      proc near               ; CODE XREF: sub_45E870+77↑p

var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_67          = byte ptr -67h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B0h
                mov     [ebp+var_B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_460872
                mov     [ebp+var_BC], offset byte_110A50C
                jmp     short loc_460880
; ---------------------------------------------------------------------------

loc_460872:                             ; CODE XREF: sub_460820+44↑j
                mov     edx, [ebp+var_B8]
                mov     eax, [edx]
                mov     [ebp+var_BC], eax

loc_460880:                             ; CODE XREF: sub_460820+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbAkashicCombi ; "tb_Akashic_Combination"
                mov     edx, [ebp+var_BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4608B2
; ---------------------------------------------------------------------------

loc_4608A9:                             ; CODE XREF: sub_460820+ED↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4608B2:                             ; CODE XREF: sub_460820+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_46090F
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6C+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                mov     ecx, [ebp+var_B8]
                add     ecx, 50h
                call    sub_48CC70
                mov     edx, [ebp+var_6C]
                mov     [eax], edx
                mov     ecx, [ebp-68h]
                mov     [eax+4], ecx
                mov     dl, [ebp+var_64]
                mov     [eax+8], dl
                jmp     short loc_4608A9
; ---------------------------------------------------------------------------

loc_46090F:                             ; CODE XREF: sub_460820+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_B8]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_460820      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460950      proc near               ; CODE XREF: sub_45E870+8D↑p

var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_66          = byte ptr -66h
var_65          = byte ptr -65h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C8h
                mov     [ebp+var_D0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_D0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4609A2
                mov     [ebp+var_D4], offset byte_110A50C
                jmp     short loc_4609B0
; ---------------------------------------------------------------------------

loc_4609A2:                             ; CODE XREF: sub_460950+44↑j
                mov     edx, [ebp+var_D0]
                mov     eax, [edx]
                mov     [ebp+var_D4], eax

loc_4609B0:                             ; CODE XREF: sub_460950+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbAkashicDisas ; "tb_Akashic_Disassemble"
                mov     edx, [ebp+var_D4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4609E2
; ---------------------------------------------------------------------------

loc_4609D9:                             ; CODE XREF: sub_460950+107↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4609E2:                             ; CODE XREF: sub_460950+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_460A59
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_66]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_65]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_70]
                push    edx
                mov     ecx, [ebp+var_D0]
                add     ecx, 60h
                call    sub_48CD30
                mov     ecx, [ebp+var_70]
                mov     [eax], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+4], edx
                mov     ecx, [ebp-68h]
                mov     [eax+8], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+0Ch], dx
                mov     cl, [ebp+var_62]
                mov     [eax+0Eh], cl
                jmp     short loc_4609D9
; ---------------------------------------------------------------------------

loc_460A59:                             ; CODE XREF: sub_460950+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_D0]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_460950      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460A90      proc near               ; CODE XREF: sub_45E870+A3↑p

var_C8          = dword ptr -0C8h
var_C4          = dword ptr -0C4h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0BCh
                push    esi
                push    edi
                mov     [ebp+var_C4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_98], eax
                mov     ecx, [ebp+var_C4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_460AE7
                mov     [ebp+var_C8], offset byte_110A50C
                jmp     short loc_460AF5
; ---------------------------------------------------------------------------

loc_460AE7:                             ; CODE XREF: sub_460A90+49↑j
                mov     edx, [ebp+var_C4]
                mov     eax, [edx]
                mov     [ebp+var_C8], eax

loc_460AF5:                             ; CODE XREF: sub_460A90+55↑j
                push    0
                mov     ecx, [ebp+var_98]
                push    ecx
                push    offset aTbAkashicMake ; "tb_Akashic_Make"
                mov     edx, [ebp+var_C8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_460B2A
; ---------------------------------------------------------------------------

loc_460B21:                             ; CODE XREF: sub_460A90+17A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_460B2A:                             ; CODE XREF: sub_460A90+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_460C0F
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_8B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_66]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_90]
                push    ecx
                mov     ecx, [ebp+var_C4]
                add     ecx, 70h
                call    sub_48CE00
                mov     ecx, 0Bh
                lea     esi, [ebp+var_90]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_460B21
; ---------------------------------------------------------------------------

loc_460C0F:                             ; CODE XREF: sub_460A90+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_C4]
                call    read_and_verify_checksum
                mov     [ebp+var_91], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_91]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_460A90      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460C50      proc near               ; CODE XREF: sub_45E870+B9↑p

var_1B8         = dword ptr -1B8h
var_1B4         = dword ptr -1B4h
var_A4          = dword ptr -0A4h
var_9D          = byte ptr -9Dh
var_9C          = byte ptr -9Ch
var_9A          = byte ptr -9Ah
var_7E          = byte ptr -7Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72CF0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_460C50
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1ACh
                mov     [ebp+var_1B4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A4], eax
                mov     ecx, [ebp+var_1B4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_460CA5
                mov     [ebp+var_1B8], offset byte_110A50C
                jmp     short loc_460CB3
; ---------------------------------------------------------------------------

loc_460CA5:                             ; CODE XREF: sub_460C50+47↑j
                mov     edx, [ebp+var_1B4]
                mov     eax, [edx]
                mov     [ebp+var_1B8], eax

loc_460CB3:                             ; CODE XREF: sub_460C50+53↑j
                push    0
                mov     ecx, [ebp+var_A4]
                push    ecx
                push    offset aTbAkashicParts ; "tb_Akashic_Parts"
                mov     edx, [ebp+var_1B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_460CE8
; ---------------------------------------------------------------------------

loc_460CDF:                             ; CODE XREF: sub_460C50+118↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_460CE8:                             ; CODE XREF: sub_460C50+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_460D6D
                lea     ecx, [ebp+var_9C]
                call    sub_48F230
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_9A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_7E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_9C]
                push    ecx
                mov     ecx, [ebp+var_1B4]
                add     ecx, 80h
                call    sub_48CED0
                mov     ecx, eax
                call    sub_460DB0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_9C]
                call    sub_466A00
                jmp     loc_460CDF
; ---------------------------------------------------------------------------

loc_460D6D:                             ; CODE XREF: sub_460C50+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_1B4]
                call    read_and_verify_checksum
                mov     [ebp+var_9D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_9D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_460C50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460DB0      proc near               ; CODE XREF: sub_460C50+104↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Eh
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_460DB0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_460E10      proc near               ; CODE XREF: sub_45E870+CF↑p

var_16C         = dword ptr -16Ch
var_168         = dword ptr -168h
var_144         = dword ptr -144h
var_13D         = byte ptr -13Dh
var_13C         = byte ptr -13Ch
var_138         = byte ptr -138h
var_134         = byte ptr -134h
var_130         = byte ptr -130h
var_12C         = byte ptr -12Ch
var_128         = byte ptr -128h
var_127         = byte ptr -127h
var_125         = byte ptr -125h
var_124         = byte ptr -124h
var_123         = byte ptr -123h
var_122         = byte ptr -122h
var_121         = byte ptr -121h
var_120         = byte ptr -120h
var_104         = byte ptr -104h
var_E8          = byte ptr -0E8h
var_CC          = byte ptr -0CCh
var_CA          = byte ptr -0CAh
var_C8          = byte ptr -0C8h
var_C6          = byte ptr -0C6h
var_AA          = byte ptr -0AAh
var_A8          = byte ptr -0A8h
var_A7          = byte ptr -0A7h
var_A3          = byte ptr -0A3h
var_A2          = byte ptr -0A2h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_93          = byte ptr -93h
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72D10 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_460E10
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 160h
                mov     [ebp+var_168], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_144], eax
                mov     ecx, [ebp+var_168]
                cmp     dword ptr [ecx], 0
                jnz     short loc_460E65
                mov     [ebp+var_16C], offset byte_110A50C
                jmp     short loc_460E73
; ---------------------------------------------------------------------------

loc_460E65:                             ; CODE XREF: sub_460E10+47↑j
                mov     edx, [ebp+var_168]
                mov     eax, [edx]
                mov     [ebp+var_16C], eax

loc_460E73:                             ; CODE XREF: sub_460E10+53↑j
                push    0
                mov     ecx, [ebp+var_144]
                push    ecx
                push    offset aTbAkashicRecor ; "tb_Akashic_Records"
                mov     edx, [ebp+var_16C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_460EA8
; ---------------------------------------------------------------------------

loc_460E9F:                             ; CODE XREF: sub_460E10+342↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_460EA8:                             ; CODE XREF: sub_460E10+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_461157
                lea     ecx, [ebp+var_13C]
                call    sub_461190
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_13C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_138]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_130]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_12C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_128]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_127]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_125]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_124]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_123]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_122]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_121]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_120]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_104]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_E8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_CC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_CA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_C8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     eax, [ebp+var_C6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_AA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_A0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_98]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_93]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_91]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_77]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_73]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_13C]
                push    ecx
                lea     edx, [ebp+var_13C]
                push    edx
                mov     ecx, [ebp+var_168]
                add     ecx, 90h
                call    sub_48D110
                mov     ecx, eax
                call    sub_461360
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_13C]
                call    sub_4612A0
                jmp     loc_460E9F
; ---------------------------------------------------------------------------

loc_461157:                             ; CODE XREF: sub_460E10+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_168]
                call    read_and_verify_checksum
                mov     [ebp+var_13D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_13D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_460E10      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_461190      proc near               ; CODE XREF: sub_460E10+AA↑p
                                        ; sub_48D110+A1↓p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72D30 SIZE 0000004D BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_472590
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 1Ch
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 38h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 54h
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 76h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_461190      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4612A0      proc near               ; CODE XREF: sub_460E10+33D↑p
                                        ; sub_48D110+12B↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_2C          = dword ptr -2Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F743E0 SIZE 00000041 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4726A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 76h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 54h
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 38h
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 1Ch
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4612A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_461360      proc near               ; CODE XREF: sub_460E10+32E↑p

var_78          = dword ptr -78h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 78h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+8]
                mov     [eax+8], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                mov     [eax+10h], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+14h]
                mov     [eax+14h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+15h]
                mov     [eax+15h], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+17h]
                mov     [eax+17h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+18h]
                mov     [eax+18h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+19h]
                mov     [eax+19h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1Ah]
                mov     [eax+1Ah], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1Bh]
                mov     [eax+1Bh], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 1Ch
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 1Ch
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 38h
                push    eax
                mov     ecx, [ebp+var_78]
                add     ecx, 38h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 54h
                push    edx
                mov     ecx, [ebp+var_78]
                add     ecx, 54h
                call    sub_4A0090
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+70h]
                mov     [eax+70h], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+72h]
                mov     [eax+72h], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+74h]
                mov     [eax+74h], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 76h
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 76h
                call    sub_4A0090
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+92h]
                mov     [edx+92h], cx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+94h]
                mov     [edx+94h], cl
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+95h]
                mov     [edx+95h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+99h]
                mov     [edx+99h], cl
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+9Ah]
                mov     [edx+9Ah], cx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+9Ch]
                mov     [edx+9Ch], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0A0h]
                mov     [edx+0A0h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0A4h]
                mov     [edx+0A4h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0A8h]
                mov     [edx+0A8h], cl
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0A9h]
                mov     [edx+0A9h], cx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0ABh]
                mov     [edx+0ABh], cl
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0ACh]
                mov     [edx+0ACh], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0B0h]
                mov     [edx+0B0h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0B4h]
                mov     [edx+0B4h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0B8h]
                mov     [edx+0B8h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0BCh]
                mov     [edx+0BCh], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0C0h]
                mov     [edx+0C0h], cl
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C1h]
                mov     [edx+0C1h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C5h]
                mov     [edx+0C5h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C9h]
                mov     [edx+0C9h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0CDh]
                mov     [edx+0CDh], ecx
                mov     eax, [ebp+var_78]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_461360      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_461620      proc near               ; CODE XREF: sub_45E870+E5↑p

var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_128         = dword ptr -128h
var_124         = dword ptr -124h
var_A0          = dword ptr -0A0h
var_99          = byte ptr -99h
var_98          = dword ptr -98h
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_82          = byte ptr -82h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72D90 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_461620
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 124h
                mov     [ebp+var_128], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_128]
                cmp     dword ptr [ecx], 0
                jnz     short loc_461675
                mov     [ebp+var_12C], offset byte_110A50C
                jmp     short loc_461683
; ---------------------------------------------------------------------------

loc_461675:                             ; CODE XREF: sub_461620+47↑j
                mov     edx, [ebp+var_128]
                mov     eax, [edx]
                mov     [ebp+var_12C], eax

loc_461683:                             ; CODE XREF: sub_461620+53↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbAppearance ; "tb_Appearance"
                mov     edx, [ebp+var_12C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4616B8
; ---------------------------------------------------------------------------

loc_4616AF:                             ; CODE XREF: sub_461620+183↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4616B8:                             ; CODE XREF: sub_461620+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4617A8
                lea     eax, [ebp+var_7E]
                mov     [ebp+var_A0], eax
                lea     ecx, [ebp+var_99]
                mov     [ebp+var_98], ecx
                mov     edx, [ebp+var_A0]
                mov     [ebp+var_130], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_A0]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_82]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_7E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_88]
                push    ecx
                mov     ecx, [ebp+var_128]
                add     ecx, 0A0h
                call    sub_48D310
                mov     ecx, eax
                call    sub_461830
                mov     byte ptr [ebp+var_4], 0
                lea     edx, [ebp+var_7E]
                mov     [ebp+var_124], edx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_124]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_4616AF
; ---------------------------------------------------------------------------

loc_4617A8:                             ; CODE XREF: sub_461620+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_128]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_461620      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4617E0      proc near               ; CODE XREF: sub_45FC40+B1304E↓j
                                        ; sub_461620+B11789↓j ...

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 0Ah
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4617E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_461830      proc near               ; CODE XREF: sub_461620+15A↑p

var_38          = dword ptr -38h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 38h
                mov     [ebp+var_38], ecx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+5]
                mov     [eax+5], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+6]
                mov     [eax+6], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+8]
                mov     [eax+8], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0Ah
                push    ecx
                mov     ecx, [ebp+var_38]
                add     ecx, 0Ah
                call    sub_4A0090
                mov     eax, [ebp+var_38]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_461830      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4618A0      proc near               ; CODE XREF: sub_45E870+FB↑p

var_AC          = dword ptr -0ACh
var_A8          = dword ptr -0A8h
var_80          = dword ptr -80h
var_79          = byte ptr -79h
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A0h
                mov     [ebp+var_A8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_A8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4618F2
                mov     [ebp+var_AC], offset byte_110A50C
                jmp     short loc_461900
; ---------------------------------------------------------------------------

loc_4618F2:                             ; CODE XREF: sub_4618A0+44↑j
                mov     edx, [ebp+var_A8]
                mov     eax, [edx]
                mov     [ebp+var_AC], eax

loc_461900:                             ; CODE XREF: sub_4618A0+50↑j
                push    0
                mov     ecx, [ebp+var_80]
                push    ecx
                push    offset aTbAura  ; "tb_Aura"
                mov     edx, [ebp+var_AC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_461932
; ---------------------------------------------------------------------------

loc_461929:                             ; CODE XREF: sub_4618A0+144↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_461932:                             ; CODE XREF: sub_4618A0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4619E9
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_78+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_78+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_71]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_78]
                push    eax
                mov     ecx, [ebp+var_A8]
                add     ecx, 0B0h
                call    sub_48D550
                mov     ecx, [ebp+var_78]
                mov     [eax], ecx
                mov     edx, [ebp-74h]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_70]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp+var_68]
                mov     [eax+10h], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+14h], dx
                jmp     loc_461929
; ---------------------------------------------------------------------------

loc_4619E9:                             ; CODE XREF: sub_4618A0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_A8]
                call    read_and_verify_checksum
                mov     [ebp+var_79], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_79]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4618A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_461A20      proc near               ; CODE XREF: sub_45E870+111↑p

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_63          = byte ptr -63h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 90h
                mov     [ebp+var_98], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_7C], eax
                mov     ecx, [ebp+var_98]
                cmp     dword ptr [ecx], 0
                jnz     short loc_461A72
                mov     [ebp+var_9C], offset byte_110A50C
                jmp     short loc_461A80
; ---------------------------------------------------------------------------

loc_461A72:                             ; CODE XREF: sub_461A20+44↑j
                mov     edx, [ebp+var_98]
                mov     eax, [edx]
                mov     [ebp+var_9C], eax

loc_461A80:                             ; CODE XREF: sub_461A20+50↑j
                push    0
                mov     ecx, [ebp+var_7C]
                push    ecx
                push    offset aTbBankSlotExte ; "tb_Bank_Slot_Extend"
                mov     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_461AB2
; ---------------------------------------------------------------------------

loc_461AA9:                             ; CODE XREF: sub_461A20+160↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_461AB2:                             ; CODE XREF: sub_461A20+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_461B85
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_74+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_74+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_74+3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6C+3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_63]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_62]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_74]
                push    eax
                mov     ecx, [ebp+var_98]
                add     ecx, 0C0h
                call    sub_48D630
                mov     ecx, [ebp+var_74]
                mov     [eax], ecx
                mov     edx, [ebp+var_70]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp-64h]
                mov     [eax+10h], ecx
                jmp     loc_461AA9
; ---------------------------------------------------------------------------

loc_461B85:                             ; CODE XREF: sub_461A20+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_98]
                call    read_and_verify_checksum
                mov     [ebp+var_75], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_75]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_461A20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_461BC0      proc near               ; CODE XREF: sub_45E870+127↑p

var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_65          = byte ptr -65h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C4h
                mov     [ebp+var_CC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_CC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_461C12
                mov     [ebp+var_D0], offset byte_110A50C
                jmp     short loc_461C20
; ---------------------------------------------------------------------------

loc_461C12:                             ; CODE XREF: sub_461BC0+44↑j
                mov     edx, [ebp+var_CC]
                mov     eax, [edx]
                mov     [ebp+var_D0], eax

loc_461C20:                             ; CODE XREF: sub_461BC0+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbBattleArenaI ; "tb_Battle_Arena_Info"
                mov     edx, [ebp+var_D0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_461C52
; ---------------------------------------------------------------------------

loc_461C49:                             ; CODE XREF: sub_461BC0+102↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_461C52:                             ; CODE XREF: sub_461BC0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_461CC4
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_69]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_65]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_70]
                push    edx
                mov     ecx, [ebp+var_CC]
                add     ecx, 0D0h
                call    sub_48D7A0
                mov     ecx, [ebp+var_70]
                mov     [eax], ecx
                mov     edx, [ebp-6Ch]
                mov     [eax+4], edx
                mov     ecx, [ebp-68h]
                mov     [eax+8], ecx
                mov     dl, [ebp+var_64]
                mov     [eax+0Ch], dl
                jmp     short loc_461C49
; ---------------------------------------------------------------------------

loc_461CC4:                             ; CODE XREF: sub_461BC0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_CC]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_461BC0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_461D00      proc near               ; CODE XREF: sub_45E870+13D↑p

var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_BC          = dword ptr -0BCh
var_B5          = byte ptr -0B5h
var_B4          = byte ptr -0B4h
var_B2          = byte ptr -0B2h
var_B0          = byte ptr -0B0h
var_AF          = byte ptr -0AFh
var_AE          = byte ptr -0AEh
var_AD          = byte ptr -0ADh
var_AC          = byte ptr -0ACh
var_AB          = byte ptr -0ABh
var_AA          = byte ptr -0AAh
var_A9          = byte ptr -0A9h
var_A8          = byte ptr -0A8h
var_A7          = byte ptr -0A7h
var_A6          = byte ptr -0A6h
var_A5          = byte ptr -0A5h
var_A4          = byte ptr -0A4h
var_A3          = byte ptr -0A3h
var_A2          = byte ptr -0A2h
var_A1          = byte ptr -0A1h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7C          = byte ptr -7Ch
var_7A          = byte ptr -7Ah
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6D          = byte ptr -6Dh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C8h
                push    esi
                push    edi
                mov     [ebp+var_D0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_BC], eax
                mov     ecx, [ebp+var_D0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_461D57
                mov     [ebp+var_D4], offset byte_110A50C
                jmp     short loc_461D65
; ---------------------------------------------------------------------------

loc_461D57:                             ; CODE XREF: sub_461D00+49↑j
                mov     edx, [ebp+var_D0]
                mov     eax, [edx]
                mov     [ebp+var_D4], eax

loc_461D65:                             ; CODE XREF: sub_461D00+55↑j
                push    0
                mov     ecx, [ebp+var_BC]
                push    ecx
                push    offset aTbBooster ; "tb_Booster"
                mov     edx, [ebp+var_D4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_461D9A
; ---------------------------------------------------------------------------

loc_461D91:                             ; CODE XREF: sub_461D00+2EA↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_461D9A:                             ; CODE XREF: sub_461D00+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_461FEF
                lea     eax, [ebp+var_B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_B2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_AF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_AE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_AD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_AB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_AA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_98]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_90]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_8C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_76]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B4]
                push    ecx
                mov     ecx, [ebp+var_D0]
                add     ecx, 0E0h
                call    sub_491F80
                mov     ecx, 12h
                lea     esi, [ebp+var_B4]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_461D91
; ---------------------------------------------------------------------------

loc_461FEF:                             ; CODE XREF: sub_461D00+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_D0]
                call    read_and_verify_checksum
                mov     [ebp+var_B5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_B5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_461D00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public read_float32
read_float32    proc near               ; CODE XREF: sub_461D00+1BE↑p
                                        ; sub_461D00+1CF↑p ...

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_8], ecx
                mov     eax, [ebp+var_8]
                cmp     dword ptr [eax], 0
                jz      short loc_46205A
                push    4
                lea     ecx, [ebp+var_4]
                push    ecx
                mov     edx, [ebp+var_8]
                mov     eax, [edx]
                mov     ecx, [ebp+var_8]
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+8]
                call    eax
                jmp     short loc_46208A
; ---------------------------------------------------------------------------

loc_46205A:                             ; CODE XREF: read_float32+F↑j
                mov     ecx, [ebp+var_8]
                cmp     dword ptr [ecx+4], 0
                jz      short loc_46207D
                mov     edx, [ebp+var_8]
                mov     eax, [edx+4]
                push    eax
                push    1
                push    4
                lea     ecx, [ebp+var_4]
                push    ecx
                nop
                call    sub_17E0AF6
                add     esp, 10h
                jmp     short loc_46208A
; ---------------------------------------------------------------------------

loc_46207D:                             ; CODE XREF: read_float32+31↑j
                movss   xmm0, dword_10A5548
                movss   [ebp+var_4], xmm0

loc_46208A:                             ; CODE XREF: read_float32+28↑j
                                        ; read_float32+4B↑j
                mov     edx, [ebp+arg_0]
                movss   xmm0, [ebp+var_4]
                movss   dword ptr [edx], xmm0
                fld     [ebp+var_4]
                call    sub_EDA0C6
                mov     ecx, [ebp+var_8]
                add     eax, [ecx+8]
                adc     edx, [ecx+0Ch]
                mov     ecx, [ebp+var_8]
                mov     [ecx+8], eax
                mov     [ecx+0Ch], edx
                fld     [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
read_float32    endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4620C0      proc near               ; CODE XREF: sub_45E870+153↑p

var_1E8         = dword ptr -1E8h
var_1E4         = dword ptr -1E4h
var_C4          = dword ptr -0C4h
var_BD          = byte ptr -0BDh
var_BC          = byte ptr -0BCh
var_BA          = byte ptr -0BAh
var_9E          = byte ptr -9Eh
var_82          = byte ptr -82h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72DD0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4620C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1DCh
                mov     [ebp+var_1E4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_C4], eax
                mov     ecx, [ebp+var_1E4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_462115
                mov     [ebp+var_1E8], offset byte_110A50C
                jmp     short loc_462123
; ---------------------------------------------------------------------------

loc_462115:                             ; CODE XREF: sub_4620C0+47↑j
                mov     edx, [ebp+var_1E4]
                mov     eax, [edx]
                mov     [ebp+var_1E8], eax

loc_462123:                             ; CODE XREF: sub_4620C0+53↑j
                push    0
                mov     ecx, [ebp+var_C4]
                push    ecx
                push    offset aTbBoosterScrip ; "tb_Booster_Script"
                mov     edx, [ebp+var_1E8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_462158
; ---------------------------------------------------------------------------

loc_46214F:                             ; CODE XREF: sub_4620C0+133↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_462158:                             ; CODE XREF: sub_4620C0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4621F8
                lea     ecx, [ebp+var_BC]
                call    sub_462230
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_BA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_9E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_82]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_BC]
                push    ecx
                lea     edx, [ebp+var_BC]
                push    edx
                mov     ecx, [ebp+var_1E4]
                add     ecx, 0F0h
                call    sub_48D910
                mov     ecx, eax
                call    sub_462390
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_BC]
                call    sub_4622F0
                jmp     loc_46214F
; ---------------------------------------------------------------------------

loc_4621F8:                             ; CODE XREF: sub_4620C0+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_1E4]
                call    read_and_verify_checksum
                mov     [ebp+var_BD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_BD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4620C0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_462230      proc near               ; CODE XREF: sub_4620C0+AA↑p
                                        ; sub_48D910+A6↓p

var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_4D          = byte ptr -4Dh
var_4C          = dword ptr -4Ch
var_44          = dword ptr -44h
var_31          = byte ptr -31h
var_30          = dword ptr -30h
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72DF0 SIZE 0000002E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_462230
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 64h
                mov     [ebp+var_64], ecx
                mov     eax, [ebp+var_64]
                add     eax, 2
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_68], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_64]
                add     eax, 1Eh
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_31]
                mov     [ebp+var_30], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_6C], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_64]
                add     eax, 3Ah
                mov     [ebp+var_60], eax
                lea     ecx, [ebp+var_4D]
                mov     [ebp+var_4C], ecx
                mov     edx, [ebp+var_60]
                mov     [ebp+var_70], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_60]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_64]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_462230      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4622F0      proc near               ; CODE XREF: sub_4620C0+12E↑p
                                        ; sub_48D910+126↓p ...

var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_30          = dword ptr -30h
var_20          = dword ptr -20h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72E30 SIZE 0000002E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4622F0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 38h
                mov     [ebp+var_44], ecx
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_44]
                add     eax, 3Ah
                mov     [ebp+var_20], eax
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_44]
                add     ecx, 1Eh
                mov     [ebp+var_30], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_44]
                add     edx, 2
                mov     [ebp+var_40], edx
                mov     [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4622F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_462390      proc near               ; CODE XREF: sub_4620C0+11F↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Eh
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ah
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 3Ah
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_462390      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_462420      proc near               ; CODE XREF: sub_45E870+169↑p

var_188         = dword ptr -188h
var_184         = dword ptr -184h
var_AC          = dword ptr -0ACh
var_A5          = byte ptr -0A5h
var_A4          = byte ptr -0A4h
var_A2          = byte ptr -0A2h
var_86          = byte ptr -86h
var_84          = byte ptr -84h
var_82          = byte ptr -82h
var_80          = byte ptr -80h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72E70 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_462420
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 17Ch
                mov     [ebp+var_184], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_AC], eax
                mov     ecx, [ebp+var_184]
                cmp     dword ptr [ecx], 0
                jnz     short loc_462475
                mov     [ebp+var_188], offset byte_110A50C
                jmp     short loc_462483
; ---------------------------------------------------------------------------

loc_462475:                             ; CODE XREF: sub_462420+47↑j
                mov     edx, [ebp+var_184]
                mov     eax, [edx]
                mov     [ebp+var_188], eax

loc_462483:                             ; CODE XREF: sub_462420+53↑j
                push    0
                mov     ecx, [ebp+var_AC]
                push    ecx
                push    offset aTbBroachSet ; "Tb_Broach_Set"
                mov     edx, [ebp+var_188]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4624B8
; ---------------------------------------------------------------------------

loc_4624AF:                             ; CODE XREF: sub_462420+149↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4624B8:                             ; CODE XREF: sub_462420+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46256E
                lea     ecx, [ebp+var_A4]
                call    sub_4625B0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     ecx, [ebp+var_A2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_86]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_82]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_A4]
                push    ecx
                mov     ecx, [ebp+var_184]
                add     ecx, 100h
                call    sub_48DB10
                mov     ecx, eax
                call    sub_4626C0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_A4]
                call    sub_462640
                jmp     loc_4624AF
; ---------------------------------------------------------------------------

loc_46256E:                             ; CODE XREF: sub_462420+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_184]
                call    read_and_verify_checksum
                mov     [ebp+var_A5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_A5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_462420      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4625B0      proc near               ; CODE XREF: sub_462420+AA↑p
                                        ; sub_48DB10+A6↓p

var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_31          = byte ptr -31h
var_30          = dword ptr -30h
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72E90 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48F230
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 44h
                mov     [ebp+var_48], ecx
                mov     eax, [ebp+var_48]
                add     eax, 2
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_4C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_48]
                add     eax, 24h
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_31]
                mov     [ebp+var_30], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_50], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4625B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_462640      proc near               ; CODE XREF: sub_462420+144↑p
                                        ; sub_48DB10+126↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F734E0 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_466A00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 24h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 2
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_462640      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4626C0      proc near               ; CODE XREF: sub_462420+135↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+1Eh]
                mov     [edx+1Eh], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+20h]
                mov     [edx+20h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+22h]
                mov     [edx+22h], cx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 24h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 24h
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_4626C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_462740      proc near               ; CODE XREF: sub_45E870+17F↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_462792
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_4627A0
; ---------------------------------------------------------------------------

loc_462792:                             ; CODE XREF: sub_462740+44↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_4627A0:                             ; CODE XREF: sub_462740+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbBroachdata ; "TB_BroachData"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4627D2
; ---------------------------------------------------------------------------

loc_4627C9:                             ; CODE XREF: sub_462740+D2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4627D2:                             ; CODE XREF: sub_462740+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_462814
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                mov     ecx, [ebp+var_AC]
                add     ecx, 110h
                call    sub_494340
                mov     ecx, [ebp+var_68]
                mov     [eax], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+4], edx
                jmp     short loc_4627C9
; ---------------------------------------------------------------------------

loc_462814:                             ; CODE XREF: sub_462740+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_462740      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_462850      proc near               ; CODE XREF: sub_45E870+195↑p

var_120         = dword ptr -120h
var_11C         = dword ptr -11Ch
var_118         = dword ptr -118h
var_F4          = dword ptr -0F4h
var_ED          = byte ptr -0EDh
var_EC          = byte ptr -0ECh
var_EA          = byte ptr -0EAh
var_E9          = byte ptr -0E9h
var_E8          = byte ptr -0E8h
var_E7          = byte ptr -0E7h
var_E5          = byte ptr -0E5h
var_E3          = byte ptr -0E3h
var_DF          = byte ptr -0DFh
var_DE          = byte ptr -0DEh
var_DA          = byte ptr -0DAh
var_D6          = byte ptr -0D6h
var_D2          = byte ptr -0D2h
var_D1          = byte ptr -0D1h
var_D0          = byte ptr -0D0h
var_CF          = byte ptr -0CFh
var_B3          = byte ptr -0B3h
var_B1          = byte ptr -0B1h
var_AD          = byte ptr -0ADh
var_AB          = byte ptr -0ABh
var_A9          = byte ptr -0A9h
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A3          = byte ptr -0A3h
var_9F          = byte ptr -9Fh
var_9E          = byte ptr -9Eh
var_9A          = byte ptr -9Ah
var_98          = byte ptr -98h
var_96          = byte ptr -96h
var_94          = byte ptr -94h
var_92          = byte ptr -92h
var_90          = byte ptr -90h
var_8E          = byte ptr -8Eh
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72EC0 SIZE 00000034 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_462850
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 114h
                mov     [ebp+var_11C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_F4], eax
                mov     ecx, [ebp+var_11C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4628A5
                mov     [ebp+var_120], offset byte_110A50C
                jmp     short loc_4628B3
; ---------------------------------------------------------------------------

loc_4628A5:                             ; CODE XREF: sub_462850+47↑j
                mov     edx, [ebp+var_11C]
                mov     eax, [edx]
                mov     [ebp+var_120], eax

loc_4628B3:                             ; CODE XREF: sub_462850+53↑j
                push    0
                mov     ecx, [ebp+var_F4]
                push    ecx
                push    offset aTbBuff  ; "tb_Buff"
                mov     edx, [ebp+var_120]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4628E8
; ---------------------------------------------------------------------------

loc_4628DF:                             ; CODE XREF: sub_462850+338↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4628E8:                             ; CODE XREF: sub_462850+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_462B8D
                lea     ecx, [ebp+var_CF]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_8E]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_EC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_EA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_E9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_E8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_E7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_E5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_E3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_DE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_DA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_D2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_D1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_D0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    0FFh
                lea     edx, [ebp+var_CF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_B3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_B1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_AB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_A9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_9F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_9E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_9A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_98]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_96]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_92]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     ecx, [ebp+var_8E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_EC]
                push    eax
                lea     ecx, [ebp+var_EC]
                push    ecx
                mov     ecx, [ebp+var_11C]
                add     ecx, 120h
                call    sub_48DD10
                mov     ecx, eax
                call    sub_462CD0
                mov     byte ptr [ebp+var_4], 3
                lea     edx, [ebp+var_8E]
                mov     [ebp+var_118], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_118]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_CF]
                call    sub_93E020
                jmp     loc_4628DF
; ---------------------------------------------------------------------------

loc_462B8D:                             ; CODE XREF: sub_462850+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_11C]
                call    read_and_verify_checksum
                mov     [ebp+var_ED], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_ED]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_462850      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

read_int32      proc near               ; CODE XREF: sub_462850+126↑p
                                        ; sub_462850+1FD↑p ...

var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_8], ecx
                mov     eax, [ebp+var_8]
                cmp     dword ptr [eax], 0
                jz      short loc_462BFA
                push    4
                lea     ecx, [ebp+var_4]
                push    ecx
                mov     edx, [ebp+var_8]
                mov     eax, [edx]
                mov     ecx, [ebp+var_8]
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+8]
                call    eax
                jmp     short loc_462C24
; ---------------------------------------------------------------------------

loc_462BFA:                             ; CODE XREF: read_int32+F↑j
                mov     ecx, [ebp+var_8]
                cmp     dword ptr [ecx+4], 0
                jz      short loc_462C1D
                mov     edx, [ebp+var_8]
                mov     eax, [edx+4]
                push    eax
                push    1
                push    4
                lea     ecx, [ebp+var_4]
                push    ecx
                nop
                call    sub_17E0AF6
                add     esp, 10h
                jmp     short loc_462C24
; ---------------------------------------------------------------------------

loc_462C1D:                             ; CODE XREF: read_int32+31↑j
                mov     [ebp+var_4], 0

loc_462C24:                             ; CODE XREF: read_int32+28↑j
                                        ; read_int32+4B↑j
                mov     edx, [ebp+arg_0]
                mov     eax, [ebp+var_4]
                mov     [edx], eax
                mov     eax, [ebp+var_4]
                cdq
                mov     ecx, [ebp+var_8]
                add     eax, [ecx+8]
                adc     edx, [ecx+0Ch]
                mov     ecx, [ebp+var_8]
                mov     [ecx+8], eax
                mov     [ecx+0Ch], edx
                mov     eax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
read_int32      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_462C50      proc near               ; CODE XREF: sub_48DD10+132↓p
                                        ; sub_48DD10+144↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72F00 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_462C50
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 5Eh
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 1Dh
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_462C50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_462CD0      proc near               ; CODE XREF: sub_462850+2FD↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2]
                mov     [eax+2], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+3]
                mov     [eax+3], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5]
                mov     [eax+5], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+7]
                mov     [eax+7], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+9]
                mov     [eax+9], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Dh]
                mov     [eax+0Dh], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Eh]
                mov     [eax+0Eh], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+12h]
                mov     [eax+12h], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+16h]
                mov     [eax+16h], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1Ah]
                mov     [eax+1Ah], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1Bh]
                mov     [eax+1Bh], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1Ch]
                mov     [eax+1Ch], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 1Dh
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 1Dh
                call    sub_4A0090
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+39h]
                mov     [edx+39h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+3Bh]
                mov     [edx+3Bh], ecx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+3Fh]
                mov     [edx+3Fh], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+41h]
                mov     [edx+41h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+43h]
                mov     [edx+43h], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+44h]
                mov     [edx+44h], ecx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+48h]
                mov     [edx+48h], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+49h]
                mov     [edx+49h], ecx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+4Dh]
                mov     [edx+4Dh], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+4Eh]
                mov     [edx+4Eh], ecx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+52h]
                mov     [edx+52h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+54h]
                mov     [edx+54h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+56h]
                mov     [edx+56h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+58h]
                mov     [edx+58h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+5Ah]
                mov     [edx+5Ah], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+5Ch]
                mov     [edx+5Ch], cx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 5Eh
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 5Eh
                call    sub_4A0090
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+7Ah]
                mov     [ecx+7Ah], ax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+7Ch]
                mov     [ecx+7Ch], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+80h]
                mov     [ecx+80h], al
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+81h]
                mov     [ecx+81h], al
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_462CD0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_462EE0      proc near               ; CODE XREF: sub_45E870+1AB↑p

var_240         = dword ptr -240h
var_23C         = dword ptr -23Ch
var_E4          = dword ptr -0E4h
var_DD          = byte ptr -0DDh
var_DC          = byte ptr -0DCh
var_DA          = byte ptr -0DAh
var_BE          = byte ptr -0BEh
var_A2          = byte ptr -0A2h
var_86          = byte ptr -86h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72F30 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_462EE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 234h
                mov     [ebp+var_23C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_E4], eax
                mov     ecx, [ebp+var_23C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_462F35
                mov     [ebp+var_240], offset byte_110A50C
                jmp     short loc_462F43
; ---------------------------------------------------------------------------

loc_462F35:                             ; CODE XREF: sub_462EE0+47↑j
                mov     edx, [ebp+var_23C]
                mov     eax, [edx]
                mov     [ebp+var_240], eax

loc_462F43:                             ; CODE XREF: sub_462EE0+53↑j
                push    0
                mov     ecx, [ebp+var_E4]
                push    ecx
                push    offset aTbBuffScript ; "tb_Buff_Script"
                mov     edx, [ebp+var_240]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_462F78
; ---------------------------------------------------------------------------

loc_462F6F:                             ; CODE XREF: sub_462EE0+147↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_462F78:                             ; CODE XREF: sub_462EE0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46302C
                lea     ecx, [ebp+var_DC]
                call    sub_463070
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_DC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_DA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_BE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_A2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_DC]
                push    edx
                lea     eax, [ebp+var_DC]
                push    eax
                mov     ecx, [ebp+var_23C]
                add     ecx, 130h
                call    sub_48DFA0
                mov     ecx, eax
                call    sub_463240
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_DC]
                call    sub_463180
                jmp     loc_462F6F
; ---------------------------------------------------------------------------

loc_46302C:                             ; CODE XREF: sub_462EE0+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_23C]
                call    read_and_verify_checksum
                mov     [ebp+var_DD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_DD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_462EE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_463070      proc near               ; CODE XREF: sub_462EE0+AA↑p
                                        ; sub_48DFA0+A6↓p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72F50 SIZE 0000004D BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_463070
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 2
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 1Eh
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 3Ah
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 56h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_463070      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_463180      proc near               ; CODE XREF: sub_462EE0+142↑p
                                        ; sub_48DFA0+132↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_2C          = dword ptr -2Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F72FB0 SIZE 00000041 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_463180
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 56h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 3Ah
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 1Eh
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 2
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_463180      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_463240      proc near               ; CODE XREF: sub_462EE0+133↑p

var_78          = dword ptr -78h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 78h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Eh
                push    eax
                mov     ecx, [ebp+var_78]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ah
                push    edx
                mov     ecx, [ebp+var_78]
                add     ecx, 3Ah
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 56h
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 56h
                call    sub_4A0090
                mov     eax, [ebp+var_78]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_463240      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4632D0      proc near               ; CODE XREF: sub_45E870+1C1↑p

var_F4          = dword ptr -0F4h
var_F0          = dword ptr -0F0h
var_C4          = dword ptr -0C4h
var_BD          = byte ptr -0BDh
var_BC          = byte ptr -0BCh
var_BA          = byte ptr -0BAh
var_B6          = byte ptr -0B6h
var_B2          = byte ptr -0B2h
var_AE          = byte ptr -0AEh
var_AA          = byte ptr -0AAh
var_A6          = byte ptr -0A6h
var_A2          = byte ptr -0A2h
var_9E          = byte ptr -9Eh
var_9A          = byte ptr -9Ah
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E8h
                push    esi
                push    edi
                mov     [ebp+var_F0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_C4], eax
                mov     ecx, [ebp+var_F0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_463327
                mov     [ebp+var_F4], offset byte_110A50C
                jmp     short loc_463335
; ---------------------------------------------------------------------------

loc_463327:                             ; CODE XREF: sub_4632D0+49↑j
                mov     edx, [ebp+var_F0]
                mov     eax, [edx]
                mov     [ebp+var_F4], eax

loc_463335:                             ; CODE XREF: sub_4632D0+55↑j
                push    0
                mov     ecx, [ebp+var_C4]
                push    ecx
                push    offset aTbCashbillingI ; "tb_CashBilling_Info"
                mov     edx, [ebp+var_F4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46336A
; ---------------------------------------------------------------------------

loc_463361:                             ; CODE XREF: sub_4632D0+1FB↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46336A:                             ; CODE XREF: sub_4632D0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4634D0
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_BA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_96]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_92]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_86]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_82]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_72]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BC]
                push    eax
                mov     ecx, [ebp+var_F0]
                add     ecx, 140h
                call    sub_48E1A0
                mov     ecx, 14h
                lea     esi, [ebp+var_BC]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_463361
; ---------------------------------------------------------------------------

loc_4634D0:                             ; CODE XREF: sub_4632D0+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_F0]
                call    read_and_verify_checksum
                mov     [ebp+var_BD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_BD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4632D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_463510      proc near               ; CODE XREF: sub_45E870+1D7↑p

var_108         = dword ptr -108h
var_104         = dword ptr -104h
var_E4          = dword ptr -0E4h
var_DD          = byte ptr -0DDh
var_DC          = byte ptr -0DCh
var_D8          = byte ptr -0D8h
var_D6          = byte ptr -0D6h
var_D4          = byte ptr -0D4h
var_D3          = byte ptr -0D3h
var_CF          = byte ptr -0CFh
var_CE          = byte ptr -0CEh
var_CD          = byte ptr -0CDh
var_CC          = byte ptr -0CCh
var_C8          = byte ptr -0C8h
var_C7          = byte ptr -0C7h
var_AB          = byte ptr -0ABh
var_8F          = byte ptr -8Fh
var_8E          = byte ptr -8Eh
var_8C          = byte ptr -8Ch
var_8B          = byte ptr -8Bh
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_87          = byte ptr -87h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73000 SIZE 0000003F BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_463510
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0FCh
                mov     [ebp+var_104], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_E4], eax
                mov     ecx, [ebp+var_104]
                cmp     dword ptr [ecx], 0
                jnz     short loc_463565
                mov     [ebp+var_108], offset byte_110A50C
                jmp     short loc_463573
; ---------------------------------------------------------------------------

loc_463565:                             ; CODE XREF: sub_463510+47↑j
                mov     edx, [ebp+var_104]
                mov     eax, [edx]
                mov     [ebp+var_108], eax

loc_463573:                             ; CODE XREF: sub_463510+53↑j
                push    0
                mov     ecx, [ebp+var_E4]
                push    ecx
                push    offset aTbCashshop ; "tb_CashShop"
                mov     edx, [ebp+var_108]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4635A8
; ---------------------------------------------------------------------------

loc_46359F:                             ; CODE XREF: sub_463510+250↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4635A8:                             ; CODE XREF: sub_463510+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_463765
                lea     ecx, [ebp+var_C7]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_AB]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_87]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 3
                lea     eax, [ebp+var_DC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_D6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_D4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_D3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_CF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_CE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_CD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     ecx, [ebp+var_C7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_AB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_8F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_8E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_8C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_89]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_DC]
                push    ecx
                lea     edx, [ebp+var_DC]
                push    edx
                mov     ecx, [ebp+var_104]
                add     ecx, 150h
                call    sub_48E2A0
                mov     ecx, eax
                call    sub_463840
                mov     byte ptr [ebp+var_4], 5
                lea     ecx, [ebp+var_87]
                call    sub_93E020
                mov     byte ptr [ebp+var_4], 4
                lea     ecx, [ebp+var_AB]
                call    sub_93E020
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_C7]
                call    sub_93E020
                jmp     loc_46359F
; ---------------------------------------------------------------------------

loc_463765:                             ; CODE XREF: sub_463510+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_104]
                call    read_and_verify_checksum
                mov     [ebp+var_DD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_DD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_463510      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4637A0      proc near               ; CODE XREF: sub_48E2A0+12B↓p
                                        ; sub_48E2A0+13D↓p ...

var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_30          = dword ptr -30h
var_20          = dword ptr -20h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73050 SIZE 0000002E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4637A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 38h
                mov     [ebp+var_44], ecx
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_44]
                add     eax, 55h
                mov     [ebp+var_20], eax
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_44]
                add     ecx, 31h
                mov     [ebp+var_30], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_44]
                add     edx, 15h
                mov     [ebp+var_40], edx
                mov     [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4637A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_463840      proc near               ; CODE XREF: sub_463510+21E↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+4]
                mov     [eax+4], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+6]
                mov     [eax+6], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+8]
                mov     [eax+8], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+9]
                mov     [eax+9], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Dh]
                mov     [eax+0Dh], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Eh]
                mov     [eax+0Eh], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Fh]
                mov     [eax+0Fh], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                mov     [eax+10h], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+14h]
                mov     [eax+14h], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 15h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 15h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 31h
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 31h
                call    sub_4A0090
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+4Dh]
                mov     [ecx+4Dh], al
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+4Eh]
                mov     [ecx+4Eh], ax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+50h]
                mov     [ecx+50h], al
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+51h]
                mov     [ecx+51h], ax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+53h]
                mov     [ecx+53h], al
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+54h]
                mov     [ecx+54h], al
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 55h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 55h
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_463840      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4639B0      proc near               ; CODE XREF: sub_45E870+1ED↑p

var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B4h
                mov     [ebp+var_BC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_BC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_463A02
                mov     [ebp+var_C0], offset byte_110A50C
                jmp     short loc_463A10
; ---------------------------------------------------------------------------

loc_463A02:                             ; CODE XREF: sub_4639B0+44↑j
                mov     edx, [ebp+var_BC]
                mov     eax, [edx]
                mov     [ebp+var_C0], eax

loc_463A10:                             ; CODE XREF: sub_4639B0+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbChangeMobId ; "tb_Change_Mob_ID"
                mov     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_463A42
; ---------------------------------------------------------------------------

loc_463A39:                             ; CODE XREF: sub_4639B0+E4↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_463A42:                             ; CODE XREF: sub_4639B0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_463A96
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6C]
                push    eax
                mov     ecx, [ebp+var_BC]
                add     ecx, 160h
                call    sub_49B520
                mov     ecx, [ebp+var_6C]
                mov     [eax], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_64]
                mov     [eax+8], ecx
                jmp     short loc_463A39
; ---------------------------------------------------------------------------

loc_463A96:                             ; CODE XREF: sub_4639B0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_BC]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4639B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_463AD0      proc near               ; CODE XREF: sub_45E870+203↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_463B22
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_463B30
; ---------------------------------------------------------------------------

loc_463B22:                             ; CODE XREF: sub_463AD0+44↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_463B30:                             ; CODE XREF: sub_463AD0+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbChangeTab ; "tb_change_tab"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_463B62
; ---------------------------------------------------------------------------

loc_463B59:                             ; CODE XREF: sub_463AD0+E0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_463B62:                             ; CODE XREF: sub_463AD0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_463BB2
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_68]
                push    eax
                mov     ecx, [ebp+var_AC]
                add     ecx, 170h
                call    sub_48E560
                mov     ecx, [ebp+var_68]
                mov     [eax], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+4], dx
                jmp     short loc_463B59
; ---------------------------------------------------------------------------

loc_463BB2:                             ; CODE XREF: sub_463AD0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_463AD0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_463BF0      proc near               ; CODE XREF: sub_45E870+219↑p

var_280         = dword ptr -280h
var_27C         = dword ptr -27Ch
var_224         = dword ptr -224h
var_21D         = byte ptr -21Dh
var_21C         = byte ptr -21Ch
var_21A         = byte ptr -21Ah
var_218         = byte ptr -218h
var_217         = byte ptr -217h
var_1FB         = byte ptr -1FBh
var_1DF         = byte ptr -1DFh
var_1C3         = byte ptr -1C3h
var_1A7         = byte ptr -1A7h
var_18B         = byte ptr -18Bh
var_16F         = byte ptr -16Fh
var_153         = byte ptr -153h
var_14F         = byte ptr -14Fh
var_14B         = byte ptr -14Bh
var_147         = byte ptr -147h
var_143         = byte ptr -143h
var_13F         = byte ptr -13Fh
var_13B         = byte ptr -13Bh
var_137         = byte ptr -137h
var_133         = byte ptr -133h
var_12F         = byte ptr -12Fh
var_12D         = byte ptr -12Dh
var_12B         = byte ptr -12Bh
var_127         = byte ptr -127h
var_123         = byte ptr -123h
var_11F         = byte ptr -11Fh
var_11B         = byte ptr -11Bh
var_117         = byte ptr -117h
var_113         = byte ptr -113h
var_111         = byte ptr -111h
var_10F         = byte ptr -10Fh
var_10D         = byte ptr -10Dh
var_10B         = byte ptr -10Bh
var_109         = byte ptr -109h
var_108         = byte ptr -108h
var_104         = byte ptr -104h
var_100         = byte ptr -100h
var_FC          = byte ptr -0FCh
var_FA          = byte ptr -0FAh
var_F6          = byte ptr -0F6h
var_F4          = byte ptr -0F4h
var_F2          = byte ptr -0F2h
var_F0          = byte ptr -0F0h
var_EE          = byte ptr -0EEh
var_EC          = byte ptr -0ECh
var_EA          = byte ptr -0EAh
var_E8          = byte ptr -0E8h
var_E4          = byte ptr -0E4h
var_E3          = byte ptr -0E3h
var_E1          = byte ptr -0E1h
var_DF          = byte ptr -0DFh
var_DD          = byte ptr -0DDh
var_DB          = byte ptr -0DBh
var_D9          = byte ptr -0D9h
var_D7          = byte ptr -0D7h
var_D5          = byte ptr -0D5h
var_D3          = byte ptr -0D3h
var_D1          = byte ptr -0D1h
var_CF          = byte ptr -0CFh
var_CD          = byte ptr -0CDh
var_CB          = byte ptr -0CBh
var_C9          = byte ptr -0C9h
var_C5          = byte ptr -0C5h
var_C1          = byte ptr -0C1h
var_BD          = byte ptr -0BDh
var_B9          = byte ptr -0B9h
var_B5          = byte ptr -0B5h
var_B1          = byte ptr -0B1h
var_AD          = byte ptr -0ADh
var_A9          = byte ptr -0A9h
var_A5          = byte ptr -0A5h
var_A1          = byte ptr -0A1h
var_9D          = byte ptr -9Dh
var_99          = byte ptr -99h
var_95          = byte ptr -95h
var_91          = byte ptr -91h
var_8D          = byte ptr -8Dh
var_89          = byte ptr -89h
var_85          = byte ptr -85h
var_81          = byte ptr -81h
var_7D          = byte ptr -7Dh
var_79          = byte ptr -79h
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_69          = byte ptr -69h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73090 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_463BF0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 274h
                mov     [ebp+var_27C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_224], eax
                mov     ecx, [ebp+var_27C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_463C45
                mov     [ebp+var_280], offset byte_110A50C
                jmp     short loc_463C53
; ---------------------------------------------------------------------------

loc_463C45:                             ; CODE XREF: sub_463BF0+47↑j
                mov     edx, [ebp+var_27C]
                mov     eax, [edx]
                mov     [ebp+var_280], eax

loc_463C53:                             ; CODE XREF: sub_463BF0+53↑j
                push    0
                mov     ecx, [ebp+var_224]
                push    ecx
                push    offset aTbCharacterInf ; "tb_Character_Info"
                mov     edx, [ebp+var_280]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_463C88
; ---------------------------------------------------------------------------

loc_463C7F:                             ; CODE XREF: sub_463BF0+606↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_463C88:                             ; CODE XREF: sub_463BF0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4641FB
                lea     ecx, [ebp+var_21C]
                call    sub_4642C0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_21C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_21A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_218]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_217]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_1FB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_1DF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_1C3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_1A7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_18B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_16F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_153]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_14F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_14B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_147]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_143]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_13F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_13B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_137]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_133]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_12F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_12D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_12B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_127]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_123]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_11F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_11B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_117]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_113]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_111]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_10F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_10D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_10B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_109]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_108]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_104]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_100]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_FA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_F6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_F4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_F2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_EE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_EC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_EA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_E8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_E4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_E3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_E1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_DD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_DB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_D9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_D7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_D5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_D3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_D1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_CF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_CD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_CB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_C9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_99]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_95]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_91]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_89]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_85]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_81]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_79]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_69]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_21C]
                push    edx
                lea     eax, [ebp+var_21C]
                push    eax
                mov     ecx, [ebp+var_27C]
                add     ecx, 180h
                call    sub_48E620
                mov     ecx, eax
                call    sub_4645A0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_21C]
                call    sub_464470
                jmp     loc_463C7F
; ---------------------------------------------------------------------------

loc_4641FB:                             ; CODE XREF: sub_463BF0+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_27C]
                call    read_and_verify_checksum
                mov     [ebp+var_21D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_21D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_463BF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public read_int16
read_int16      proc near               ; CODE XREF: sub_463BF0+275↑p
                                        ; sub_463BF0+284↑p ...

var_8           = dword ptr -8
var_4           = word ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_8], ecx
                mov     eax, [ebp+var_8]
                cmp     dword ptr [eax], 0
                jz      short loc_46426A
                push    2
                lea     ecx, [ebp+var_4]
                push    ecx
                mov     edx, [ebp+var_8]
                mov     eax, [edx]
                mov     ecx, [ebp+var_8]
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+8]
                call    eax
                jmp     short loc_464293
; ---------------------------------------------------------------------------

loc_46426A:                             ; CODE XREF: read_int16+F↑j
                mov     ecx, [ebp+var_8]
                cmp     dword ptr [ecx+4], 0
                jz      short loc_46428D
                mov     edx, [ebp+var_8]
                mov     eax, [edx+4]
                push    eax
                push    1
                push    2
                lea     ecx, [ebp+var_4]
                push    ecx
                nop
                call    sub_17E0AF6
                add     esp, 10h
                jmp     short loc_464293
; ---------------------------------------------------------------------------

loc_46428D:                             ; CODE XREF: read_int16+31↑j
                xor     edx, edx
                mov     [ebp+var_4], dx

loc_464293:                             ; CODE XREF: read_int16+28↑j
                                        ; read_int16+4B↑j
                mov     eax, [ebp+arg_0]
                mov     cx, [ebp+var_4]
                mov     [eax], cx
                movsx   eax, [ebp+var_4]
                cdq
                mov     ecx, [ebp+var_8]
                add     eax, [ecx+8]
                adc     edx, [ecx+0Ch]
                mov     ecx, [ebp+var_8]
                mov     [ecx+8], eax
                mov     [ecx+0Ch], edx
                mov     ax, [ebp+var_4]
                mov     esp, ebp
                pop     ebp
                retn    4
read_int16      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4642C0      proc near               ; CODE XREF: sub_463BF0+AA↑p
                                        ; sub_48E620+A6↓p

var_AC          = dword ptr -0ACh
var_A8          = dword ptr -0A8h
var_A4          = dword ptr -0A4h
var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_7C          = dword ptr -7Ch
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_64          = dword ptr -64h
var_5D          = byte ptr -5Dh
var_5C          = dword ptr -5Ch
var_54          = dword ptr -54h
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F730B0 SIZE 00000092 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4642C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A0h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 5
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 21h
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 3Dh
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 59h
                mov     [ebp+var_54], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_54]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_90]
                add     eax, 75h
                mov     [ebp+var_64], eax
                lea     ecx, [ebp+var_5D]
                mov     [ebp+var_5C], ecx
                mov     edx, [ebp+var_64]
                mov     [ebp+var_A4], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_64]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_90]
                add     eax, 91h
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_6D]
                mov     [ebp+var_6C], ecx
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_A8], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_7C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_90]
                add     eax, 0ADh
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_84], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_AC], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4642C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_464470      proc near               ; CODE XREF: sub_463BF0+601↑p
                                        ; sub_48E620+132↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_2C          = dword ptr -2Ch
var_20          = dword ptr -20h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73150 SIZE 0000007D BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_464470
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 5
                mov     eax, [ebp+var_4C]
                add     eax, 0ADh
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_4C]
                add     ecx, 91h
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     edx, [ebp+var_4C]
                add     edx, 75h
                mov     [ebp+var_20], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     eax, [ebp+var_4C]
                add     eax, 59h
                mov     [ebp+var_2C], eax
                mov     byte ptr [ebp+var_4], 9
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_4C]
                add     ecx, 3Dh
                mov     [ebp+var_38], ecx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    1
                mov     ecx, [ebp+var_38]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_4C]
                add     edx, 21h
                mov     [ebp+var_3C], edx
                mov     byte ptr [ebp+var_4], 0Bh
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_4C]
                add     eax, 5
                mov     [ebp+var_48], eax
                mov     [ebp+var_4], 0Ch
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_464470      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4645A0      proc near               ; CODE XREF: sub_463BF0+5F2↑p

var_FC          = dword ptr -0FCh
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 0FCh
                push    esi
                mov     [ebp+var_FC], ecx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2]
                mov     [eax+2], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 5
                push    ecx
                mov     ecx, [ebp+var_FC]
                add     ecx, 5
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 21h
                push    eax
                mov     ecx, [ebp+var_FC]
                add     ecx, 21h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Dh
                push    edx
                mov     ecx, [ebp+var_FC]
                add     ecx, 3Dh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 59h
                push    ecx
                mov     ecx, [ebp+var_FC]
                add     ecx, 59h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 75h
                push    eax
                mov     ecx, [ebp+var_FC]
                add     ecx, 75h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 91h
                push    edx
                mov     ecx, [ebp+var_FC]
                add     ecx, 91h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0ADh
                push    ecx
                mov     ecx, [ebp+var_FC]
                add     ecx, 0ADh
                call    sub_4A0090
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C9h]
                mov     [edx+0C9h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0CDh]
                mov     [edx+0CDh], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0D1h]
                mov     [edx+0D1h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0D5h]
                mov     [edx+0D5h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0D9h]
                mov     [edx+0D9h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0DDh]
                mov     [edx+0DDh], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0E1h]
                mov     [edx+0E1h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0E5h]
                mov     [edx+0E5h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0E9h]
                mov     [edx+0E9h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0EDh]
                mov     [edx+0EDh], cx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0EFh]
                mov     [edx+0EFh], cx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0F1h]
                mov     [edx+0F1h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0F5h]
                mov     [edx+0F5h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0F9h]
                mov     [edx+0F9h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0FDh]
                mov     [edx+0FDh], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+101h]
                mov     [edx+101h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+105h]
                mov     [edx+105h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+109h]
                mov     [edx+109h], cx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+10Bh]
                mov     [edx+10Bh], cx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+10Dh]
                mov     [edx+10Dh], cx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+10Fh]
                mov     [edx+10Fh], cx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+111h]
                mov     [edx+111h], cx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+113h]
                mov     [edx+113h], cl
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+114h]
                mov     [edx+114h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+118h]
                mov     [edx+118h], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+11Ch]
                mov     [edx+11Ch], ecx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+120h]
                mov     [edx+120h], cx
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+arg_0]
                fld     dword ptr [eax+122h]
                fstp    dword ptr [edx+122h]
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+126h]
                mov     [ecx+126h], ax
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+128h]
                mov     [ecx+128h], ax
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+12Ah]
                mov     [ecx+12Ah], ax
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+12Ch]
                mov     [ecx+12Ch], ax
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+12Eh]
                mov     [ecx+12Eh], ax
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+130h]
                mov     [ecx+130h], ax
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+132h]
                mov     [ecx+132h], ax
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                fld     dword ptr [edx+134h]
                fstp    dword ptr [ecx+134h]
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+138h]
                mov     [eax+138h], dl
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+139h]
                mov     [eax+139h], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+13Bh]
                mov     [eax+13Bh], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+13Dh]
                mov     [eax+13Dh], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+13Fh]
                mov     [eax+13Fh], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+141h]
                mov     [eax+141h], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+143h]
                mov     [eax+143h], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+145h]
                mov     [eax+145h], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+147h]
                mov     [eax+147h], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+149h]
                mov     [eax+149h], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+14Bh]
                mov     [eax+14Bh], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+14Dh]
                mov     [eax+14Dh], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+14Fh]
                mov     [eax+14Fh], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+151h]
                mov     [eax+151h], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+153h]
                mov     [eax+153h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+157h]
                mov     [eax+157h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+15Bh]
                mov     [eax+15Bh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+15Fh]
                mov     [eax+15Fh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+163h]
                mov     [eax+163h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+167h]
                mov     [eax+167h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+16Bh]
                mov     [eax+16Bh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+16Fh]
                mov     [eax+16Fh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+173h]
                mov     [eax+173h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+177h]
                mov     [eax+177h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+17Bh]
                mov     [eax+17Bh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+17Fh]
                mov     [eax+17Fh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+183h]
                mov     [eax+183h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+187h]
                mov     [eax+187h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+18Bh]
                mov     [eax+18Bh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+18Fh]
                mov     [eax+18Fh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+193h]
                mov     [eax+193h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+197h]
                mov     [eax+197h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+19Bh]
                mov     [eax+19Bh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+19Fh]
                mov     [eax+19Fh], edx
                mov     [ebp+var_4], 0
                jmp     short loc_464CC2
; ---------------------------------------------------------------------------

loc_464CB9:                             ; CODE XREF: sub_4645A0+745↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_464CC2:                             ; CODE XREF: sub_4645A0+717↑j
                cmp     [ebp+var_4], 14h
                jnb     short loc_464CE7
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_FC]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+153h]
                mov     [edx+ecx*4+153h], eax
                jmp     short loc_464CB9
; ---------------------------------------------------------------------------

loc_464CE7:                             ; CODE XREF: sub_4645A0+726↑j
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+1A3h]
                mov     [ecx+1A3h], ax
                mov     ecx, [ebp+var_FC]
                mov     edx, [ebp+arg_0]
                fld     dword ptr [edx+1A5h]
                fstp    dword ptr [ecx+1A5h]
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1A9h]
                mov     [eax+1A9h], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1ADh]
                mov     [eax+1ADh], edx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1B1h]
                mov     [eax+1B1h], dx
                mov     eax, [ebp+var_FC]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1B3h]
                mov     [eax+1B3h], dl
                mov     eax, [ebp+var_FC]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_4645A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_464D80      proc near               ; CODE XREF: sub_45E870+22F↑p

var_27C         = dword ptr -27Ch
var_278         = dword ptr -278h
var_104         = dword ptr -104h
var_FD          = byte ptr -0FDh
var_FC          = byte ptr -0FCh
var_FA          = byte ptr -0FAh
var_F8          = byte ptr -0F8h
var_F7          = byte ptr -0F7h
var_DB          = byte ptr -0DBh
var_BF          = byte ptr -0BFh
var_A3          = byte ptr -0A3h
var_87          = byte ptr -87h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F731E0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_464D80
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 270h
                mov     [ebp+var_278], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_104], eax
                mov     ecx, [ebp+var_278]
                cmp     dword ptr [ecx], 0
                jnz     short loc_464DD5
                mov     [ebp+var_27C], offset byte_110A50C
                jmp     short loc_464DE3
; ---------------------------------------------------------------------------

loc_464DD5:                             ; CODE XREF: sub_464D80+47↑j
                mov     edx, [ebp+var_278]
                mov     eax, [edx]
                mov     [ebp+var_27C], eax

loc_464DE3:                             ; CODE XREF: sub_464D80+53↑j
                push    0
                mov     ecx, [ebp+var_104]
                push    ecx
                push    offset aTbCharacterPar ; "tb_Character_Parts"
                mov     edx, [ebp+var_27C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_464E18
; ---------------------------------------------------------------------------

loc_464E0F:                             ; CODE XREF: sub_464D80+179↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_464E18:                             ; CODE XREF: sub_464D80+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_464EFE
                lea     ecx, [ebp+var_FC]
                call    sub_464F40
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_FA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_F8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_F7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_DB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_BF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_A3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_87]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_FC]
                push    edx
                lea     eax, [ebp+var_FC]
                push    eax
                mov     ecx, [ebp+var_278]
                add     ecx, 190h
                call    sub_48E820
                mov     ecx, eax
                call    sub_465140
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_FC]
                call    sub_465060
                jmp     loc_464E0F
; ---------------------------------------------------------------------------

loc_464EFE:                             ; CODE XREF: sub_464D80+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_278]
                call    read_and_verify_checksum
                mov     [ebp+var_FD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_FD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_464D80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_464F40      proc near               ; CODE XREF: sub_464D80+AA↑p
                                        ; sub_48E820+A6↓p

var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_64          = dword ptr -64h
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_2D          = byte ptr -2Dh
var_2C          = dword ptr -2Ch
var_24          = dword ptr -24h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73200 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh

loc_464F45:                             ; DATA XREF: ___:off_1106CE8↓o
                push    offset SEH_464F40
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 80h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                add     eax, 5
                mov     [ebp+var_24], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_24]
                mov     [ebp+var_7C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_78]
                add     eax, 21h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_2D]
                mov     [ebp+var_2C], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_80], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_78]
                add     eax, 3Dh
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_84], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_78]
                add     eax, 59h
                mov     [ebp+var_64], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_64]
                mov     [ebp+var_88], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_64]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_78]
                add     eax, 75h
                mov     [ebp+var_74], eax
                lea     ecx, [ebp+var_6D]
                mov     [ebp+var_6C], ecx
                mov     edx, [ebp+var_74]
                mov     [ebp+var_8C], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_74]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_464F40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_465060      proc near               ; CODE XREF: sub_464D80+174↑p
                                        ; sub_48E820:loc_48E952↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73260 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_465060
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 3
                mov     eax, [ebp+var_4C]
                add     eax, 75h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_4C]
                add     ecx, 59h
                mov     [ebp+var_24], ecx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_4C]
                add     edx, 3Dh
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_4C]
                add     eax, 21h
                mov     [ebp+var_3C], eax
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_4C]
                add     ecx, 5
                mov     [ebp+var_48], ecx
                mov     [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_465060      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_465140      proc near               ; CODE XREF: sub_464D80+165↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2]
                mov     [eax+2], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 5
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 5
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 21h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 21h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Dh
                push    edx
                mov     ecx, [ebp+var_70]
                add     ecx, 3Dh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 59h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 59h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 75h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 75h
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_465140      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_465200      proc near               ; CODE XREF: sub_45E870+245↑p

var_284         = dword ptr -284h
var_280         = dword ptr -280h
var_104         = dword ptr -104h
var_FD          = byte ptr -0FDh
var_FC          = byte ptr -0FCh
var_F8          = byte ptr -0F8h
var_F7          = byte ptr -0F7h
var_DB          = byte ptr -0DBh
var_BF          = byte ptr -0BFh
var_A3          = byte ptr -0A3h
var_87          = byte ptr -87h
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F732C0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_465200
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 278h
                mov     [ebp+var_280], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_104], eax
                mov     ecx, [ebp+var_280]
                cmp     dword ptr [ecx], 0
                jnz     short loc_465255
                mov     [ebp+var_284], offset byte_110A50C
                jmp     short loc_465263
; ---------------------------------------------------------------------------

loc_465255:                             ; CODE XREF: sub_465200+47↑j
                mov     edx, [ebp+var_280]
                mov     eax, [edx]
                mov     [ebp+var_284], eax

loc_465263:                             ; CODE XREF: sub_465200+53↑j
                push    0
                mov     ecx, [ebp+var_104]
                push    ecx
                push    offset aTbChattingcomm ; "tb_ChattingCommand"
                mov     edx, [ebp+var_284]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_465298
; ---------------------------------------------------------------------------

loc_46528F:                             ; CODE XREF: sub_465200+18F↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_465298:                             ; CODE XREF: sub_465200+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_465394
                push    offset sub_93E020
                push    offset sub_48C660
                push    5
                push    1Ch
                lea     eax, [ebp+var_F7]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_FC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_F8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_byte
                push    1FFh
                lea     eax, [ebp+var_F7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_DB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_BF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_A3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_87]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_FC]
                push    ecx
                mov     ecx, [ebp+var_280]
                add     ecx, 1A0h
                call    sub_48EA20
                mov     ecx, eax
                call    sub_465470
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    5
                push    1Ch
                lea     edx, [ebp+var_F7]
                push    edx
                call    sub_ED9E2A
                jmp     loc_46528F
; ---------------------------------------------------------------------------

loc_465394:                             ; CODE XREF: sub_465200+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_280]
                call    read_and_verify_checksum
                mov     [ebp+var_FD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_FD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_465200      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

                public read_byte
read_byte       proc near               ; CODE XREF: sub_465200+DB↑p
                                        ; sub_4783E0+B1↓p ...

var_8           = dword ptr -8
var_1           = byte ptr -1
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 8
                mov     [ebp+var_8], ecx
                mov     eax, [ebp+var_8]
                cmp     dword ptr [eax], 0
                jz      short loc_4653FA
                push    1
                lea     ecx, [ebp+var_1]
                push    ecx
                mov     edx, [ebp+var_8]
                mov     eax, [edx]
                mov     ecx, [ebp+var_8]
                mov     ecx, [ecx]
                mov     edx, [eax]
                mov     eax, [edx+8]
                call    eax
                jmp     short loc_465421
; ---------------------------------------------------------------------------

loc_4653FA:                             ; CODE XREF: read_byte+F↑j
                mov     ecx, [ebp+var_8]
                cmp     dword ptr [ecx+4], 0
                jz      short loc_46541D
                mov     edx, [ebp+var_8]
                mov     eax, [edx+4]
                push    eax
                push    1
                push    1
                lea     ecx, [ebp+var_1]
                push    ecx
                nop
                call    sub_17E0AF6
                add     esp, 10h
                jmp     short loc_465421
; ---------------------------------------------------------------------------

loc_46541D:                             ; CODE XREF: read_byte+31↑j
                mov     [ebp+var_1], 0

loc_465421:                             ; CODE XREF: read_byte+28↑j
                                        ; read_byte+4B↑j
                mov     edx, [ebp+arg_0]
                mov     al, [ebp+var_1]
                mov     [edx], al
                movsx   eax, [ebp+var_1]
                cdq
                mov     ecx, [ebp+var_8]
                add     eax, [ecx+8]
                adc     edx, [ecx+0Ch]
                mov     ecx, [ebp+var_8]
                mov     [ecx+8], eax
                mov     [ecx+0Ch], edx
                mov     al, [ebp+var_1]
                mov     esp, ebp
                pop     ebp
                retn    4
read_byte       endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_465450      proc near               ; CODE XREF: sub_465200+B0E0CE↓j
                                        ; sub_48EA20+AE7866↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    5
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 5
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_465450      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_465470      proc near               ; CODE XREF: sub_465200+171↑p

var_3C          = dword ptr -3Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 3Ch
                mov     [ebp+var_3C], ecx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     [ebp+var_4], 0
                jmp     short loc_4654A1
; ---------------------------------------------------------------------------

loc_465498:                             ; CODE XREF: sub_465470+60↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_4654A1:                             ; CODE XREF: sub_465470+26↑j
                cmp     [ebp+var_4], 5
                jnb     short loc_4654D2
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+arg_0]
                lea     ecx, [eax+edx+5]
                push    ecx
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+var_3C]
                lea     ecx, [eax+edx+5]
                call    sub_4A0090
                jmp     short loc_465498
; ---------------------------------------------------------------------------

loc_4654D2:                             ; CODE XREF: sub_465470+35↑j
                mov     ecx, [ebp+var_3C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+91h]
                mov     [ecx+91h], eax
                mov     eax, [ebp+var_3C]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_465470      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4654F0      proc near               ; CODE XREF: sub_45E870+25B↑p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_11C         = dword ptr -11Ch
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = dword ptr -80h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74CF0 SIZE 00000026 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488190
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 12Ch
                mov     [ebp+var_130], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_130]
                cmp     dword ptr [ecx], 0
                jnz     short loc_465545
                mov     [ebp+var_134], offset byte_110A50C
                jmp     short loc_465553
; ---------------------------------------------------------------------------

loc_465545:                             ; CODE XREF: sub_4654F0+47↑j
                mov     edx, [ebp+var_130]
                mov     eax, [edx]
                mov     [ebp+var_134], eax

loc_465553:                             ; CODE XREF: sub_4654F0+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbChattingfilt ; "tb_ChattingFilter"
                mov     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_465588
; ---------------------------------------------------------------------------

loc_46557F:                             ; CODE XREF: sub_4654F0+162↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_465588:                             ; CODE XREF: sub_4654F0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_465657
                lea     eax, [ebp+var_7C]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_138], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_130]
                add     ecx, 1B0h
                call    sub_49C730
                mov     [ebp+var_11C], eax
                mov     eax, [ebp+var_11C]
                mov     ecx, [ebp+var_80]
                mov     [eax], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_11C]
                add     ecx, 4
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                mov     [ebp+var_12C], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_12C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_46557F
; ---------------------------------------------------------------------------

loc_465657:                             ; CODE XREF: sub_4654F0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_130]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4654F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_465690      proc near               ; CODE XREF: sub_45E870+271↑p

var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_84          = dword ptr -84h
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0F4h
                push    esi
                push    edi
                mov     [ebp+var_FC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_84], eax
                mov     ecx, [ebp+var_FC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4656E7
                mov     [ebp+var_100], offset byte_110A50C
                jmp     short loc_4656F5
; ---------------------------------------------------------------------------

loc_4656E7:                             ; CODE XREF: sub_465690+49↑j
                mov     edx, [ebp+var_FC]
                mov     eax, [edx]
                mov     [ebp+var_100], eax

loc_4656F5:                             ; CODE XREF: sub_465690+55↑j
                push    0
                mov     ecx, [ebp+var_84]
                push    ecx
                push    offset aTbCheckAccessR ; "tb_Check_Access_Reward"
                mov     edx, [ebp+var_100]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46572A
; ---------------------------------------------------------------------------

loc_465721:                             ; CODE XREF: sub_465690+117↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46572A:                             ; CODE XREF: sub_465690+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_4657AC
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                mov     ecx, [ebp+var_FC]
                add     ecx, 1C0h
                call    sub_4954E0
                mov     ecx, 7
                lea     esi, [ebp+var_7C]
                mov     edi, eax
                rep movsd
                jmp     loc_465721
; ---------------------------------------------------------------------------

loc_4657AC:                             ; CODE XREF: sub_465690+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_FC]
                call    read_and_verify_checksum
                mov     [ebp+var_7D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_7D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_465690      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4657E0      proc near               ; CODE XREF: sub_45E870+287↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_465832
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_465840
; ---------------------------------------------------------------------------

loc_465832:                             ; CODE XREF: sub_4657E0+44↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_465840:                             ; CODE XREF: sub_4657E0+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbCheckAttenda ; "tb_Check_Attendance_Info"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_465872
; ---------------------------------------------------------------------------

loc_465869:                             ; CODE XREF: sub_4657E0+D2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_465872:                             ; CODE XREF: sub_4657E0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_4658B4
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                mov     ecx, [ebp+var_AC]
                add     ecx, 1D0h
                call    sub_494340
                mov     ecx, [ebp+var_68]
                mov     [eax], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+4], edx
                jmp     short loc_465869
; ---------------------------------------------------------------------------

loc_4658B4:                             ; CODE XREF: sub_4657E0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4657E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4658F0      proc near               ; CODE XREF: sub_45E870+29D↑p

var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_A0          = dword ptr -0A0h
var_99          = byte ptr -99h
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C4h
                push    esi
                push    edi
                mov     [ebp+var_CC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A0], eax
                mov     ecx, [ebp+var_CC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_465947
                mov     [ebp+var_D0], offset byte_110A50C
                jmp     short loc_465955
; ---------------------------------------------------------------------------

loc_465947:                             ; CODE XREF: sub_4658F0+49↑j
                mov     edx, [ebp+var_CC]
                mov     eax, [edx]
                mov     [ebp+var_D0], eax

loc_465955:                             ; CODE XREF: sub_4658F0+55↑j
                push    0
                mov     ecx, [ebp+var_A0]
                push    ecx
                push    offset aTbCheckAttenda_0 ; "tb_Check_Attendance_Reward"
                mov     edx, [ebp+var_D0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46598A
; ---------------------------------------------------------------------------

loc_465981:                             ; CODE XREF: sub_4658F0+187↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46598A:                             ; CODE XREF: sub_4658F0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_465A7C
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_98]
                push    edx
                mov     ecx, [ebp+var_CC]
                add     ecx, 1E0h
                call    sub_48EC50
                mov     ecx, 0Eh
                lea     esi, [ebp+var_98]
                mov     edi, eax
                rep movsd
                jmp     loc_465981
; ---------------------------------------------------------------------------

loc_465A7C:                             ; CODE XREF: sub_4658F0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_CC]
                call    read_and_verify_checksum
                mov     [ebp+var_99], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_99]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4658F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_465AC0      proc near               ; CODE XREF: sub_45E870+2B3↑p

var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_84          = dword ptr -84h
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0F4h
                push    esi
                push    edi
                mov     [ebp+var_FC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_84], eax
                mov     ecx, [ebp+var_FC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_465B17
                mov     [ebp+var_100], offset byte_110A50C
                jmp     short loc_465B25
; ---------------------------------------------------------------------------

loc_465B17:                             ; CODE XREF: sub_465AC0+49↑j
                mov     edx, [ebp+var_FC]
                mov     eax, [edx]
                mov     [ebp+var_100], eax

loc_465B25:                             ; CODE XREF: sub_465AC0+55↑j
                push    0
                mov     ecx, [ebp+var_84]
                push    ecx
                push    offset aTbCheckAttenda_1 ; "tb_Check_Attendance_Streak"
                mov     edx, [ebp+var_100]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_465B5A
; ---------------------------------------------------------------------------

loc_465B51:                             ; CODE XREF: sub_465AC0+117↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_465B5A:                             ; CODE XREF: sub_465AC0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_465BDC
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                mov     ecx, [ebp+var_FC]
                add     ecx, 1F0h
                call    sub_4954E0
                mov     ecx, 7
                lea     esi, [ebp+var_7C]
                mov     edi, eax
                rep movsd
                jmp     loc_465B51
; ---------------------------------------------------------------------------

loc_465BDC:                             ; CODE XREF: sub_465AC0+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_FC]
                call    read_and_verify_checksum
                mov     [ebp+var_7D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_7D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_465AC0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_465C10      proc near               ; CODE XREF: sub_45E870+2C9↑p

var_3DC         = dword ptr -3DCh
var_3D8         = dword ptr -3D8h
var_16C         = dword ptr -16Ch
var_165         = byte ptr -165h
var_164         = byte ptr -164h
var_162         = byte ptr -162h
var_146         = byte ptr -146h
var_12A         = byte ptr -12Ah
var_10E         = byte ptr -10Eh
var_F2          = byte ptr -0F2h
var_D6          = byte ptr -0D6h
var_BA          = byte ptr -0BAh
var_9E          = byte ptr -9Eh
var_82          = byte ptr -82h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F732E0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_465C10
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 3D0h
                mov     [ebp+var_3D8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_16C], eax
                mov     ecx, [ebp+var_3D8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_465C65
                mov     [ebp+var_3DC], offset byte_110A50C
                jmp     short loc_465C73
; ---------------------------------------------------------------------------

loc_465C65:                             ; CODE XREF: sub_465C10+47↑j
                mov     edx, [ebp+var_3D8]
                mov     eax, [edx]
                mov     [ebp+var_3DC], eax

loc_465C73:                             ; CODE XREF: sub_465C10+53↑j
                push    0
                mov     ecx, [ebp+var_16C]
                push    ecx
                push    offset aTbCinemaString ; "tb_Cinema_String"
                mov     edx, [ebp+var_3DC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_465CA8
; ---------------------------------------------------------------------------

loc_465C9F:                             ; CODE XREF: sub_465C10+1AB↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_465CA8:                             ; CODE XREF: sub_465C10+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_465DC0
                lea     ecx, [ebp+var_164]
                call    sub_465E00
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_164]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_162]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_146]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_12A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_10E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_F2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_D6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_BA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_9E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_82]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_164]
                push    ecx
                lea     edx, [ebp+var_164]
                push    edx
                mov     ecx, [ebp+var_3D8]
                add     ecx, 200h
                call    sub_48ED40
                mov     ecx, eax
                call    sub_466190
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_164]
                call    sub_466020
                jmp     loc_465C9F
; ---------------------------------------------------------------------------

loc_465DC0:                             ; CODE XREF: sub_465C10+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_3D8]
                call    read_and_verify_checksum
                mov     [ebp+var_165], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_165]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_465C10      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_465E00      proc near               ; CODE XREF: sub_465C10+AA↑p
                                        ; sub_48ED40+A6↓p

var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_A8          = dword ptr -0A8h
var_A4          = dword ptr -0A4h
var_9D          = byte ptr -9Dh
var_9C          = dword ptr -9Ch
var_94          = dword ptr -94h
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73300 SIZE 000000C7 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_465E00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C0h
                mov     [ebp+var_A8], ecx
                mov     eax, [ebp+var_A8]
                add     eax, 2
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_AC], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_A8]
                add     eax, 1Eh
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_B0], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_A8]
                add     eax, 3Ah
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_B4], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_A8]
                add     eax, 56h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_B8], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_A8]
                add     eax, 72h
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_BC], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_A8]
                add     eax, 8Eh
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_C0], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_A8]
                add     eax, 0AAh
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_C4], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_7C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     eax, [ebp+var_A8]
                add     eax, 0C6h
                mov     [ebp+var_94], eax
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_84], ecx
                mov     edx, [ebp+var_94]
                mov     [ebp+var_C8], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    0
                mov     ecx, [ebp+var_94]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Fh
                mov     eax, [ebp+var_A8]
                add     eax, 0E2h
                mov     [ebp+var_A4], eax
                lea     ecx, [ebp+var_9D]
                mov     [ebp+var_9C], ecx
                mov     edx, [ebp+var_A4]
                mov     [ebp+var_CC], edx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    0
                mov     ecx, [ebp+var_A4]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Fh
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_A8]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_465E00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466020      proc near               ; CODE XREF: sub_465C10+1A6↑p
                                        ; sub_48ED40+132↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_38          = dword ptr -38h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F733E0 SIZE 000000A9 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_466020
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 7
                mov     eax, [ebp+var_4C]
                add     eax, 0E2h
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     byte ptr [ebp+var_4], 6
                mov     ecx, [ebp+var_4C]
                add     ecx, 0C6h
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 9
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 6
                mov     byte ptr [ebp+var_4], 5
                mov     edx, [ebp+var_4C]
                add     edx, 0AAh
                mov     [ebp+var_18], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     eax, [ebp+var_4C]
                add     eax, 8Eh
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 0Bh
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     ecx, [ebp+var_4C]
                add     ecx, 72h
                mov     [ebp+var_28], ecx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    1
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     edx, [ebp+var_4C]
                add     edx, 56h
                mov     [ebp+var_2C], edx
                mov     byte ptr [ebp+var_4], 0Dh
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     eax, [ebp+var_4C]
                add     eax, 3Ah
                mov     [ebp+var_38], eax
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    1
                mov     ecx, [ebp+var_38]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_4C]
                add     ecx, 1Eh
                mov     [ebp+var_44], ecx
                mov     byte ptr [ebp+var_4], 0Fh
                push    0
                push    1
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_4C]
                add     edx, 2
                mov     [ebp+var_48], edx
                mov     [ebp+var_4], 10h
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_466020      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466190      proc near               ; CODE XREF: sub_465C10+197↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Eh
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ah
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 3Ah
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 56h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 56h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 72h
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 72h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 8Eh
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 8Eh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0AAh
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 0AAh
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0C6h
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 0C6h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0E2h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 0E2h
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_466190      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4662E0      proc near               ; CODE XREF: sub_45E870+2DF↑p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_11C         = dword ptr -11Ch
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = dword ptr -80h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488190
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 12Ch
                mov     [ebp+var_130], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_130]
                cmp     dword ptr [ecx], 0
                jnz     short loc_466335
                mov     [ebp+var_134], offset byte_110A50C
                jmp     short loc_466343
; ---------------------------------------------------------------------------

loc_466335:                             ; CODE XREF: sub_4662E0+47↑j
                mov     edx, [ebp+var_130]
                mov     eax, [edx]
                mov     [ebp+var_134], eax

loc_466343:                             ; CODE XREF: sub_4662E0+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbClassForm ; "tb_Class_form"
                mov     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_466378
; ---------------------------------------------------------------------------

loc_46636F:                             ; CODE XREF: sub_4662E0+162↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_466378:                             ; CODE XREF: sub_4662E0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_466447
                lea     eax, [ebp+var_7C]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_138], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_130]
                add     ecx, 210h
                call    sub_49C730
                mov     [ebp+var_11C], eax
                mov     eax, [ebp+var_11C]
                mov     ecx, [ebp+var_80]
                mov     [eax], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_11C]
                add     ecx, 4
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                mov     [ebp+var_12C], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_12C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_46636F
; ---------------------------------------------------------------------------

loc_466447:                             ; CODE XREF: sub_4662E0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_130]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4662E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466480      proc near               ; CODE XREF: sub_45E870+2F5↑p

var_108         = dword ptr -108h
var_104         = dword ptr -104h
var_DC          = dword ptr -0DCh
var_D5          = byte ptr -0D5h
var_D4          = byte ptr -0D4h
var_D0          = byte ptr -0D0h
var_CC          = byte ptr -0CCh
var_C8          = byte ptr -0C8h
var_C4          = byte ptr -0C4h
var_C0          = byte ptr -0C0h
var_BC          = byte ptr -0BCh
var_B8          = byte ptr -0B8h
var_B4          = byte ptr -0B4h
var_B3          = byte ptr -0B3h
var_B2          = byte ptr -0B2h
var_B1          = byte ptr -0B1h
var_B0          = byte ptr -0B0h
var_AF          = byte ptr -0AFh
var_AE          = byte ptr -0AEh
var_AD          = byte ptr -0ADh
var_AC          = byte ptr -0ACh
var_AB          = byte ptr -0ABh
var_AA          = byte ptr -0AAh
var_A9          = byte ptr -0A9h
var_A8          = byte ptr -0A8h
var_A7          = byte ptr -0A7h
var_A6          = byte ptr -0A6h
var_A2          = byte ptr -0A2h
var_9E          = byte ptr -9Eh
var_9A          = byte ptr -9Ah
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_87          = byte ptr -87h
var_86          = byte ptr -86h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0FCh
                push    esi
                push    edi
                mov     [ebp+var_104], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_DC], eax
                mov     ecx, [ebp+var_104]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4664D7
                mov     [ebp+var_108], offset byte_110A50C
                jmp     short loc_4664E5
; ---------------------------------------------------------------------------

loc_4664D7:                             ; CODE XREF: sub_466480+49↑j
                mov     edx, [ebp+var_104]
                mov     eax, [edx]
                mov     [ebp+var_108], eax

loc_4664E5:                             ; CODE XREF: sub_466480+55↑j
                push    0
                mov     ecx, [ebp+var_DC]
                push    ecx
                push    offset aTbClassSpeech ; "tb_Class_Speech"
                mov     edx, [ebp+var_108]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46651A
; ---------------------------------------------------------------------------

loc_466511:                             ; CODE XREF: sub_466480+341↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46651A:                             ; CODE XREF: sub_466480+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4667C6
                lea     eax, [ebp+var_D4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_B3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_B2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_B1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_B0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_AF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_AE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_AD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_AC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_AB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_AA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_96]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_92]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_89]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_87]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_86]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_85]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_83]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D4]
                push    ecx
                mov     ecx, [ebp+var_104]
                add     ecx, 220h
                call    sub_48EF40
                mov     ecx, 1Bh
                lea     esi, [ebp+var_D4]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_466511
; ---------------------------------------------------------------------------

loc_4667C6:                             ; CODE XREF: sub_466480+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_104]
                call    read_and_verify_checksum
                mov     [ebp+var_D5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_D5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_466480      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466800      proc near               ; CODE XREF: sub_45E870+30B↑p

var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_B4          = dword ptr -0B4h
var_AD          = byte ptr -0ADh
var_AC          = byte ptr -0ACh
var_AA          = byte ptr -0AAh
var_8E          = byte ptr -8Eh
var_72          = byte ptr -72h
var_71          = byte ptr -71h
var_70          = byte ptr -70h
var_6F          = byte ptr -6Fh
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F734A0 SIZE 00000034 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_466800
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0CCh
                mov     [ebp+var_D4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_B4], eax
                mov     ecx, [ebp+var_D4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_466855
                mov     [ebp+var_D8], offset byte_110A50C
                jmp     short loc_466863
; ---------------------------------------------------------------------------

loc_466855:                             ; CODE XREF: sub_466800+47↑j
                mov     edx, [ebp+var_D4]
                mov     eax, [edx]
                mov     [ebp+var_D8], eax

loc_466863:                             ; CODE XREF: sub_466800+53↑j
                push    0
                mov     ecx, [ebp+var_B4]
                push    ecx
                push    offset aTbClassbattleR ; "tb_ClassBattle_Role"
                mov     edx, [ebp+var_D8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_466898
; ---------------------------------------------------------------------------

loc_46688F:                             ; CODE XREF: sub_466800+1B5↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_466898:                             ; CODE XREF: sub_466800+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4669BA
                lea     ecx, [ebp+var_AA]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_8E]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_AA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_8E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_71]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_70]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_AC]
                push    edx
                lea     eax, [ebp+var_AC]
                push    eax
                mov     ecx, [ebp+var_D4]
                add     ecx, 230h
                call    sub_48F0D0
                mov     ecx, eax
                call    sub_466A80
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_8E]
                mov     [ebp+var_D0], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_D0]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_AA]
                call    sub_93E020
                jmp     loc_46688F
; ---------------------------------------------------------------------------

loc_4669BA:                             ; CODE XREF: sub_466800+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_D4]
                call    read_and_verify_checksum
                mov     [ebp+var_AD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_AD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_466800      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466A00      proc near               ; CODE XREF: sub_460C50+113↑p
                                        ; sub_48CED0+16A↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_466A00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 1Eh
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 2
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_466A00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466A80      proc near               ; CODE XREF: sub_466800+17A↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Eh
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+3Ah]
                mov     [ecx+3Ah], al
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+3Bh]
                mov     [ecx+3Bh], al
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+3Ch]
                mov     [ecx+3Ch], al
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+3Dh]
                mov     [ecx+3Dh], al
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+3Eh]
                mov     [ecx+3Eh], ax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+40h]
                mov     [ecx+40h], ax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+42h]
                mov     [ecx+42h], ax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+44h]
                mov     [ecx+44h], al
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_466A80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466B40      proc near               ; CODE XREF: sub_45E870+321↑p

var_168         = dword ptr -168h
var_164         = dword ptr -164h
var_13C         = dword ptr -13Ch
var_135         = byte ptr -135h
var_134         = byte ptr -134h
var_133         = byte ptr -133h
var_117         = byte ptr -117h
var_FB          = byte ptr -0FBh
var_F7          = byte ptr -0F7h
var_F3          = byte ptr -0F3h
var_EF          = byte ptr -0EFh
var_EB          = byte ptr -0EBh
var_E7          = byte ptr -0E7h
var_E3          = byte ptr -0E3h
var_DF          = byte ptr -0DFh
var_DB          = byte ptr -0DBh
var_D7          = byte ptr -0D7h
var_D3          = byte ptr -0D3h
var_CF          = byte ptr -0CFh
var_CB          = byte ptr -0CBh
var_C7          = byte ptr -0C7h
var_C5          = byte ptr -0C5h
var_C3          = byte ptr -0C3h
var_BF          = byte ptr -0BFh
var_BD          = byte ptr -0BDh
var_A1          = byte ptr -0A1h
var_85          = byte ptr -85h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73510 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_466B40
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 15Ch
                mov     [ebp+var_164], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_13C], eax
                mov     ecx, [ebp+var_164]
                cmp     dword ptr [ecx], 0
                jnz     short loc_466B95
                mov     [ebp+var_168], offset byte_110A50C
                jmp     short loc_466BA3
; ---------------------------------------------------------------------------

loc_466B95:                             ; CODE XREF: sub_466B40+47↑j
                mov     edx, [ebp+var_164]
                mov     eax, [edx]
                mov     [ebp+var_168], eax

loc_466BA3:                             ; CODE XREF: sub_466B40+53↑j
                push    0
                mov     ecx, [ebp+var_13C]
                push    ecx
                push    offset aTbClassselectI ; "tb_ClassSelect_Info"
                mov     edx, [ebp+var_168]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_466BD8
; ---------------------------------------------------------------------------

loc_466BCF:                             ; CODE XREF: sub_466B40+25A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_466BD8:                             ; CODE XREF: sub_466B40+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_466D9F
                lea     ecx, [ebp+var_134]
                call    sub_466DE0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_134]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     ecx, [ebp+var_133]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_117]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_FB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_F3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_EF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_EB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_E7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_E3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_DB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_D7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_CF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_CB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_C5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_C3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_BF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_BD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_A1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_85]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_134]
                push    edx
                lea     eax, [ebp+var_134]
                push    eax
                mov     ecx, [ebp+var_164]
                add     ecx, 240h
                call    sub_48F360
                mov     ecx, eax
                call    sub_466FF0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_134]
                call    sub_466F00
                jmp     loc_466BCF
; ---------------------------------------------------------------------------

loc_466D9F:                             ; CODE XREF: sub_466B40+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_164]
                call    read_and_verify_checksum
                mov     [ebp+var_135], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_135]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_466B40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466DE0      proc near               ; CODE XREF: sub_466B40+AA↑p
                                        ; sub_48F360+A6↓p

var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_64          = dword ptr -64h
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_2D          = byte ptr -2Dh
var_2C          = dword ptr -2Ch
var_24          = dword ptr -24h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73530 SIZE 00000057 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_466DE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 80h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                add     eax, 1
                mov     [ebp+var_24], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_24]
                mov     [ebp+var_7C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_78]
                add     eax, 1Dh
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_2D]
                mov     [ebp+var_2C], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_80], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_78]
                add     eax, 77h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_84], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_78]
                add     eax, 93h
                mov     [ebp+var_64], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_64]
                mov     [ebp+var_88], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_64]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_78]
                add     eax, 0AFh
                mov     [ebp+var_74], eax
                lea     ecx, [ebp+var_6D]
                mov     [ebp+var_6C], ecx
                mov     edx, [ebp+var_74]
                mov     [ebp+var_8C], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_74]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_466DE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466F00      proc near               ; CODE XREF: sub_466B40+255↑p
                                        ; sub_48F360+130↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F735A0 SIZE 00000057 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_466F00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 3
                mov     eax, [ebp+var_4C]
                add     eax, 0AFh
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_4C]
                add     ecx, 93h
                mov     [ebp+var_24], ecx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_4C]
                add     edx, 77h
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_4C]
                add     eax, 1Dh
                mov     [ebp+var_3C], eax
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_4C]
                add     ecx, 1
                mov     [ebp+var_48], ecx
                mov     [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_466F00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_466FF0      proc near               ; CODE XREF: sub_466B40+246↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 1
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 1
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Dh
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 1Dh
                call    sub_4A0090
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+39h]
                mov     [ecx+39h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+3Dh]
                mov     [ecx+3Dh], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+41h]
                mov     [ecx+41h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+45h]
                mov     [ecx+45h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+49h]
                mov     [ecx+49h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Dh]
                mov     [ecx+4Dh], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+51h]
                mov     [ecx+51h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+55h]
                mov     [ecx+55h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+59h]
                mov     [ecx+59h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+5Dh]
                mov     [ecx+5Dh], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+61h]
                mov     [ecx+61h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+65h]
                mov     [ecx+65h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+69h]
                mov     [ecx+69h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+6Dh]
                mov     [ecx+6Dh], ax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+6Fh]
                mov     [ecx+6Fh], ax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+71h]
                mov     [ecx+71h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+75h]
                mov     [ecx+75h], ax
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 77h
                push    edx
                mov     ecx, [ebp+var_70]
                add     ecx, 77h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 93h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 93h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0AFh
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 0AFh
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_466FF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_467170      proc near               ; CODE XREF: sub_45E870+337↑p

var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 88h
                mov     [ebp+var_90], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_7C], eax
                mov     ecx, [ebp+var_90]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4671C2
                mov     [ebp+var_94], offset byte_110A50C
                jmp     short loc_4671D0
; ---------------------------------------------------------------------------

loc_4671C2:                             ; CODE XREF: sub_467170+44↑j
                mov     edx, [ebp+var_90]
                mov     eax, [edx]
                mov     [ebp+var_94], eax

loc_4671D0:                             ; CODE XREF: sub_467170+50↑j
                push    0
                mov     ecx, [ebp+var_7C]
                push    ecx
                push    offset aTbColor ; "tb_Color"
                mov     edx, [ebp+var_94]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_467202
; ---------------------------------------------------------------------------

loc_4671F9:                             ; CODE XREF: sub_467170+19C↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_467202:                             ; CODE XREF: sub_467170+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_467311
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_70+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_70+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_70+3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6C+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_68+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68+3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_64+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_64+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_64+3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_74]
                push    edx
                mov     ecx, [ebp+var_90]
                add     ecx, 250h
                call    sub_496E20
                mov     ecx, [ebp+var_74]
                mov     [eax], ecx
                mov     edx, [ebp+var_70]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp+var_64]
                mov     [eax+10h], ecx
                jmp     loc_4671F9
; ---------------------------------------------------------------------------

loc_467311:                             ; CODE XREF: sub_467170+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_90]
                call    read_and_verify_checksum
                mov     [ebp+var_75], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_75]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_467170      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_467350      proc near               ; CODE XREF: sub_45E870+34D↑p

var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_82          = byte ptr -82h
var_81          = byte ptr -81h
var_7F          = byte ptr -7Fh
var_7D          = byte ptr -7Dh
var_7B          = byte ptr -7Bh
var_79          = byte ptr -79h
var_77          = byte ptr -77h
var_75          = byte ptr -75h
var_73          = byte ptr -73h
var_71          = byte ptr -71h
var_6F          = byte ptr -6Fh
var_6D          = byte ptr -6Dh
var_6B          = byte ptr -6Bh
var_69          = byte ptr -69h
var_67          = byte ptr -67h
var_65          = byte ptr -65h
var_63          = byte ptr -63h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B0h
                push    esi
                push    edi
                mov     [ebp+var_B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4673A7
                mov     [ebp+var_BC], offset byte_110A50C
                jmp     short loc_4673B5
; ---------------------------------------------------------------------------

loc_4673A7:                             ; CODE XREF: sub_467350+49↑j
                mov     edx, [ebp+var_B8]
                mov     eax, [edx]
                mov     [ebp+var_BC], eax

loc_4673B5:                             ; CODE XREF: sub_467350+55↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbComboBuff ; "tb_Combo_Buff"
                mov     edx, [ebp+var_BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4673EA
; ---------------------------------------------------------------------------

loc_4673E1:                             ; CODE XREF: sub_467350+1DE↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4673EA:                             ; CODE XREF: sub_467350+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_467533
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_85]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_82]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_81]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_79]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_77]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_75]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_71]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_69]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_65]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_63]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_88]
                push    eax
                mov     ecx, [ebp+var_B8]
                add     ecx, 260h
                call    sub_48F560
                mov     ecx, 9
                lea     esi, [ebp+var_88]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_4673E1
; ---------------------------------------------------------------------------

loc_467533:                             ; CODE XREF: sub_467350+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_B8]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_467350      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_467570      proc near               ; CODE XREF: sub_45E870+363↑p

var_144         = dword ptr -144h
var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_124         = dword ptr -124h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_80          = byte ptr -80h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75D40 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4897D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 138h
                mov     [ebp+var_13C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_13C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4675C5
                mov     [ebp+var_140], offset byte_110A50C
                jmp     short loc_4675D3
; ---------------------------------------------------------------------------

loc_4675C5:                             ; CODE XREF: sub_467570+47↑j
                mov     edx, [ebp+var_13C]
                mov     eax, [edx]
                mov     [ebp+var_140], eax

loc_4675D3:                             ; CODE XREF: sub_467570+53↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbCommon ; "tb_Common"
                mov     edx, [ebp+var_140]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_467608
; ---------------------------------------------------------------------------

loc_4675FF:                             ; CODE XREF: sub_467570+188↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_467608:                             ; CODE XREF: sub_467570+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4676FD
                lea     eax, [ebp+var_80]
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_144], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_84]
                push    eax
                mov     ecx, [ebp+var_13C]
                add     ecx, 270h
                call    sub_48F630
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_124]
                mov     edx, [ebp+var_84]
                mov     [ecx], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                lea     ecx, [ebp+var_80]
                push    ecx
                mov     ecx, [ebp+var_124]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, [ebp+var_124]
                movss   xmm0, [ebp+var_64]
                movss   dword ptr [edx+20h], xmm0
                mov     byte ptr [ebp+var_4], 0
                lea     eax, [ebp+var_80]
                mov     [ebp+var_138], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_138]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_4675FF
; ---------------------------------------------------------------------------

loc_4676FD:                             ; CODE XREF: sub_467570+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_13C]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_467570      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_467740      proc near               ; CODE XREF: sub_45E870+379↑p

var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_84          = dword ptr -84h
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_7A          = byte ptr -7Ah
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_66          = byte ptr -66h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A8h
                push    esi
                push    edi
                mov     [ebp+var_B0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_84], eax
                mov     ecx, [ebp+var_B0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_467797
                mov     [ebp+var_B4], offset byte_110A50C
                jmp     short loc_4677A5
; ---------------------------------------------------------------------------

loc_467797:                             ; CODE XREF: sub_467740+49↑j
                mov     edx, [ebp+var_B0]
                mov     eax, [edx]
                mov     [ebp+var_B4], eax

loc_4677A5:                             ; CODE XREF: sub_467740+55↑j
                push    0
                mov     ecx, [ebp+var_84]
                push    ecx
                push    offset aTbControlkeyin ; "tb_ControlKeyInfo"
                mov     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4677DA
; ---------------------------------------------------------------------------

loc_4677D1:                             ; CODE XREF: sub_467740+165↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4677DA:                             ; CODE XREF: sub_467740+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4678AA
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_66]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7C]
                push    ecx
                mov     ecx, [ebp+var_B0]
                add     ecx, 280h
                call    sub_48F8A0
                mov     ecx, 6
                lea     esi, [ebp+var_7C]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_4677D1
; ---------------------------------------------------------------------------

loc_4678AA:                             ; CODE XREF: sub_467740+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_B0]
                call    read_and_verify_checksum
                mov     [ebp+var_7D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_7D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_467740      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4678E0      proc near               ; CODE XREF: sub_45E870+38F↑p

var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_80          = dword ptr -80h
var_79          = byte ptr -79h
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 8Ch
                mov     [ebp+var_94], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_94]
                cmp     dword ptr [ecx], 0
                jnz     short loc_467932
                mov     [ebp+var_98], offset byte_110A50C
                jmp     short loc_467940
; ---------------------------------------------------------------------------

loc_467932:                             ; CODE XREF: sub_4678E0+44↑j
                mov     edx, [ebp+var_94]
                mov     eax, [edx]
                mov     [ebp+var_98], eax

loc_467940:                             ; CODE XREF: sub_4678E0+50↑j
                push    0
                mov     ecx, [ebp+var_80]
                push    ecx
                push    offset aTbCostumeSocke ; "tb_Costume_Socket"
                mov     edx, [ebp+var_98]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_467972
; ---------------------------------------------------------------------------

loc_467969:                             ; CODE XREF: sub_4678E0+17E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_467972:                             ; CODE XREF: sub_4678E0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_467A63
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_74+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_74+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_74+3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_70]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_70+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_70+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_70+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6C+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C+3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_65]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_78]
                push    edx
                mov     ecx, [ebp+var_94]
                add     ecx, 290h
                call    sub_48F970
                mov     ecx, [ebp+var_78]
                mov     [eax], ecx
                mov     edx, [ebp+var_74]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_70]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp-68h]
                mov     [eax+10h], ecx
                mov     dl, [ebp+var_64]
                mov     [eax+14h], dl
                jmp     loc_467969
; ---------------------------------------------------------------------------

loc_467A63:                             ; CODE XREF: sub_4678E0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_94]
                call    read_and_verify_checksum
                mov     [ebp+var_79], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_79]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4678E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_467AA0      proc near               ; CODE XREF: sub_45E870+3A5↑p

var_164         = dword ptr -164h
var_160         = dword ptr -160h
var_15C         = dword ptr -15Ch
var_158         = dword ptr -158h
var_B0          = dword ptr -0B0h
var_A9          = byte ptr -0A9h
var_A8          = dword ptr -0A8h
var_A0          = dword ptr -0A0h
var_99          = byte ptr -99h
var_98          = byte ptr -98h
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73610 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_467AA0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 158h
                mov     [ebp+var_15C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A0], eax
                mov     ecx, [ebp+var_15C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_467AF5
                mov     [ebp+var_160], offset byte_110A50C
                jmp     short loc_467B03
; ---------------------------------------------------------------------------

loc_467AF5:                             ; CODE XREF: sub_467AA0+47↑j
                mov     edx, [ebp+var_15C]
                mov     eax, [edx]
                mov     [ebp+var_160], eax

loc_467B03:                             ; CODE XREF: sub_467AA0+53↑j
                push    0
                mov     ecx, [ebp+var_A0]
                push    ecx
                push    offset aTbCreateCloth ; "tb_Create_Cloth"
                mov     edx, [ebp+var_160]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_467B38
; ---------------------------------------------------------------------------

loc_467B2F:                             ; CODE XREF: sub_467AA0+1A4↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_467B38:                             ; CODE XREF: sub_467AA0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_467C49
                lea     eax, [ebp+var_7E]
                mov     [ebp+var_B0], eax
                lea     ecx, [ebp+var_A9]
                mov     [ebp+var_A8], ecx
                mov     edx, [ebp+var_B0]
                mov     [ebp+var_164], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_B0]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_96]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_92]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_86]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_82]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_98]
                push    edx
                lea     eax, [ebp+var_98]
                push    eax
                mov     ecx, [ebp+var_15C]
                add     ecx, 2A0h
                call    sub_48FA50
                mov     ecx, eax
                call    sub_467CE0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7E]
                mov     [ebp+var_158], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_158]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_467B2F
; ---------------------------------------------------------------------------

loc_467C49:                             ; CODE XREF: sub_467AA0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_15C]
                call    read_and_verify_checksum
                mov     [ebp+var_99], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_99]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_467AA0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_467C90      proc near               ; CODE XREF: sub_467AA0+B0BB89↓j
                                        ; sub_48FA50+AE68C1↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 1Ah
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_467C90      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_467CE0      proc near               ; CODE XREF: sub_467AA0+17B↑p

var_38          = dword ptr -38h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 38h
                mov     [ebp+var_38], ecx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2]
                mov     [eax+2], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+6]
                mov     [eax+6], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ah]
                mov     [eax+0Ah], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Eh]
                mov     [eax+0Eh], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+12h]
                mov     [eax+12h], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+16h]
                mov     [eax+16h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 1Ah
                push    ecx
                mov     ecx, [ebp+var_38]
                add     ecx, 1Ah
                call    sub_4A0090
                mov     eax, [ebp+var_38]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_467CE0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_467D60      proc near               ; CODE XREF: sub_45E870+3BB↑p

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_80          = dword ptr -80h
var_79          = byte ptr -79h
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 90h
                mov     [ebp+var_98], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_98]
                cmp     dword ptr [ecx], 0
                jnz     short loc_467DB2
                mov     [ebp+var_9C], offset byte_110A50C
                jmp     short loc_467DC0
; ---------------------------------------------------------------------------

loc_467DB2:                             ; CODE XREF: sub_467D60+44↑j
                mov     edx, [ebp+var_98]
                mov     eax, [edx]
                mov     [ebp+var_9C], eax

loc_467DC0:                             ; CODE XREF: sub_467D60+50↑j
                push    0
                mov     ecx, [ebp+var_80]
                push    ecx
                push    offset aTbCreateoption ; "tb_CreateOption"
                mov     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_467DF2
; ---------------------------------------------------------------------------

loc_467DE9:                             ; CODE XREF: sub_467D60+17E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_467DF2:                             ; CODE XREF: sub_467D60+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_467EE3
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_78+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_78+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_74+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_74+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_74+3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_6D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6C+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_65]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_78]
                push    edx
                mov     ecx, [ebp+var_98]
                add     ecx, 2B0h
                call    sub_496350
                mov     ecx, [ebp+var_78]
                mov     [eax], ecx
                mov     edx, [ebp+var_74]
                mov     [eax+4], edx
                mov     ecx, [ebp-70h]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp-68h]
                mov     [eax+10h], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+14h], edx
                jmp     loc_467DE9
; ---------------------------------------------------------------------------

loc_467EE3:                             ; CODE XREF: sub_467D60+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_98]
                call    read_and_verify_checksum
                mov     [ebp+var_79], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_79]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_467D60      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_467F20      proc near               ; CODE XREF: sub_45E870+3D1↑p

var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A8h
                mov     [ebp+var_B0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_B0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_467F72
                mov     [ebp+var_B4], offset byte_110A50C
                jmp     short loc_467F80
; ---------------------------------------------------------------------------

loc_467F72:                             ; CODE XREF: sub_467F20+44↑j
                mov     edx, [ebp+var_B0]
                mov     eax, [edx]
                mov     [ebp+var_B4], eax

loc_467F80:                             ; CODE XREF: sub_467F20+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbCreditRaise ; "tb_Credit_Raise"
                mov     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_467FB2
; ---------------------------------------------------------------------------

loc_467FA9:                             ; CODE XREF: sub_467F20+FE↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_467FB2:                             ; CODE XREF: sub_467F20+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_468020
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_64+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_62]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68]
                push    edx
                mov     ecx, [ebp+var_B0]
                add     ecx, 2C0h
                call    sub_49BA40
                mov     ecx, [ebp+var_68]
                mov     [eax], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+4], dx
                mov     cl, [ebp+var_62]
                mov     [eax+6], cl
                jmp     short loc_467FA9
; ---------------------------------------------------------------------------

loc_468020:                             ; CODE XREF: sub_467F20+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_B0]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_467F20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_468060      proc near               ; CODE XREF: sub_45E870+3E7↑p

var_150         = dword ptr -150h
var_14C         = dword ptr -14Ch
var_124         = dword ptr -124h
var_11D         = byte ptr -11Dh
var_11C         = byte ptr -11Ch
var_118         = byte ptr -118h
var_114         = byte ptr -114h
var_110         = byte ptr -110h
var_10C         = byte ptr -10Ch
var_108         = byte ptr -108h
var_104         = byte ptr -104h
var_100         = byte ptr -100h
var_FC          = byte ptr -0FCh
var_F8          = byte ptr -0F8h
var_F4          = byte ptr -0F4h
var_D8          = byte ptr -0D8h
var_BC          = byte ptr -0BCh
var_A0          = byte ptr -0A0h
var_84          = byte ptr -84h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73650 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_468060
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 144h
                mov     [ebp+var_14C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_14C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4680B5
                mov     [ebp+var_150], offset byte_110A50C
                jmp     short loc_4680C3
; ---------------------------------------------------------------------------

loc_4680B5:                             ; CODE XREF: sub_468060+47↑j
                mov     edx, [ebp+var_14C]
                mov     eax, [edx]
                mov     [ebp+var_150], eax

loc_4680C3:                             ; CODE XREF: sub_468060+53↑j
                push    0
                mov     ecx, [ebp+var_124]
                push    ecx
                push    offset aTbCultivation ; "tb_Cultivation"
                mov     edx, [ebp+var_150]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4680F8
; ---------------------------------------------------------------------------

loc_4680EF:                             ; CODE XREF: sub_468060+1E2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4680F8:                             ; CODE XREF: sub_468060+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_468247
                lea     ecx, [ebp+var_11C]
                call    sub_468280
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_11C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_118]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_114]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_110]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_10C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_108]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_104]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_100]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_FC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_F8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_F4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_D8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_11C]
                push    eax
                lea     ecx, [ebp+var_11C]
                push    ecx
                mov     ecx, [ebp+var_14C]
                add     ecx, 2D0h
                call    sub_48FCC0
                mov     ecx, eax
                call    sub_468480
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_11C]
                call    sub_4683A0
                jmp     loc_4680EF
; ---------------------------------------------------------------------------

loc_468247:                             ; CODE XREF: sub_468060+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_14C]
                call    read_and_verify_checksum
                mov     [ebp+var_11D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_11D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_468060      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_468280      proc near               ; CODE XREF: sub_468060+AA↑p
                                        ; sub_48FCC0+A1↓p

var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_64          = dword ptr -64h
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_2D          = byte ptr -2Dh
var_2C          = dword ptr -2Ch
var_24          = dword ptr -24h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73670 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_468280
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 80h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                add     eax, 28h
                mov     [ebp+var_24], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_24]
                mov     [ebp+var_7C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_78]
                add     eax, 44h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_2D]
                mov     [ebp+var_2C], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_80], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_78]
                add     eax, 60h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_84], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_78]
                add     eax, 7Ch
                mov     [ebp+var_64], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_64]
                mov     [ebp+var_88], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_64]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_78]
                add     eax, 98h
                mov     [ebp+var_74], eax
                lea     ecx, [ebp+var_6D]
                mov     [ebp+var_6C], ecx
                mov     edx, [ebp+var_74]
                mov     [ebp+var_8C], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_74]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_468280      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4683A0      proc near               ; CODE XREF: sub_468060+1DD↑p
                                        ; sub_48FCC0+12B↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F736D0 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4683A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 3
                mov     eax, [ebp+var_4C]
                add     eax, 98h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_4C]
                add     ecx, 7Ch
                mov     [ebp+var_24], ecx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_4C]
                add     edx, 60h
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_4C]
                add     eax, 44h
                mov     [ebp+var_3C], eax
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_4C]
                add     ecx, 28h
                mov     [ebp+var_48], ecx
                mov     [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4683A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_468480      proc near               ; CODE XREF: sub_468060+1CE↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+8]
                mov     [eax+8], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                mov     [eax+10h], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+14h]
                mov     [eax+14h], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+18h]
                mov     [eax+18h], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Ch]
                mov     [eax+1Ch], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+20h]
                mov     [eax+20h], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+24h]
                mov     [eax+24h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 28h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 28h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 44h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 44h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 60h
                push    edx
                mov     ecx, [ebp+var_70]
                add     ecx, 60h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 7Ch
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 7Ch
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 98h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 98h
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_468480      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4685A0      proc near               ; CODE XREF: sub_45E870+3FD↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_84          = dword ptr -84h
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_75          = byte ptr -75h
var_73          = byte ptr -73h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_69          = byte ptr -69h
var_65          = byte ptr -65h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                push    esi
                push    edi
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_84], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4685F7
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_468605
; ---------------------------------------------------------------------------

loc_4685F7:                             ; CODE XREF: sub_4685A0+49↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_468605:                             ; CODE XREF: sub_4685A0+55↑j
                push    0
                mov     ecx, [ebp+var_84]
                push    ecx
                push    offset aTbCustomerBene ; "tb_Customer_Benefit"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46863A
; ---------------------------------------------------------------------------

loc_468631:                             ; CODE XREF: sub_4685A0+136↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46863A:                             ; CODE XREF: sub_4685A0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4686DB
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_75]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_71]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_69]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_65]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_AC]
                add     ecx, 2E0h
                call    sub_495410
                mov     ecx, 6
                lea     esi, [ebp+var_7C]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_468631
; ---------------------------------------------------------------------------

loc_4686DB:                             ; CODE XREF: sub_4685A0+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_7D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_7D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4685A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_468710      proc near               ; CODE XREF: sub_45E870+413↑p

var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_67          = byte ptr -67h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B4h
                push    esi
                push    edi
                mov     [ebp+var_BC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_BC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_468767
                mov     [ebp+var_C0], offset byte_110A50C
                jmp     short loc_468775
; ---------------------------------------------------------------------------

loc_468767:                             ; CODE XREF: sub_468710+49↑j
                mov     edx, [ebp+var_BC]
                mov     eax, [edx]
                mov     [ebp+var_C0], eax

loc_468775:                             ; CODE XREF: sub_468710+55↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbCustomerGrad ; "tb_Customer_Grade"
                mov     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4687AA
; ---------------------------------------------------------------------------

loc_4687A1:                             ; CODE XREF: sub_468710+179↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4687AA:                             ; CODE XREF: sub_468710+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46888E
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_83]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_81]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_7B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_77]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                mov     ecx, [ebp+var_BC]
                add     ecx, 2F0h
                call    sub_48FEC0
                mov     ecx, 9
                lea     esi, [ebp+var_88]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_4687A1
; ---------------------------------------------------------------------------

loc_46888E:                             ; CODE XREF: sub_468710+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_BC]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_468710      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4688D0      proc near               ; CODE XREF: sub_45E870+429↑p

var_20C         = dword ptr -20Ch
var_208         = dword ptr -208h
var_1DC         = dword ptr -1DCh
var_1D5         = byte ptr -1D5h
var_1D4         = byte ptr -1D4h
var_1D3         = byte ptr -1D3h
var_1CF         = byte ptr -1CFh
var_1CB         = byte ptr -1CBh
var_1C7         = byte ptr -1C7h
var_1C3         = byte ptr -1C3h
var_1BF         = byte ptr -1BFh
var_1BB         = byte ptr -1BBh
var_1B7         = byte ptr -1B7h
var_1B3         = byte ptr -1B3h
var_1AF         = byte ptr -1AFh
var_1AB         = byte ptr -1ABh
var_18F         = byte ptr -18Fh
var_173         = byte ptr -173h
var_157         = byte ptr -157h
var_13B         = byte ptr -13Bh
var_11F         = byte ptr -11Fh
var_103         = byte ptr -103h
var_E7          = byte ptr -0E7h
var_CB          = byte ptr -0CBh
var_AF          = byte ptr -0AFh
var_93          = byte ptr -93h
var_8F          = byte ptr -8Fh
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73830 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_469B60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 200h
                mov     [ebp+var_208], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_1DC], eax
                mov     ecx, [ebp+var_208]
                cmp     dword ptr [ecx], 0
                jnz     short loc_468925
                mov     [ebp+var_20C], offset byte_110A50C
                jmp     short loc_468933
; ---------------------------------------------------------------------------

loc_468925:                             ; CODE XREF: sub_4688D0+47↑j
                mov     edx, [ebp+var_208]
                mov     eax, [edx]
                mov     [ebp+var_20C], eax

loc_468933:                             ; CODE XREF: sub_4688D0+53↑j
                push    0
                mov     ecx, [ebp+var_1DC]
                push    ecx
                push    offset aTbCustomizeEye ; "tb_Customize_Eyes"
                mov     edx, [ebp+var_20C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_468968
; ---------------------------------------------------------------------------

loc_46895F:                             ; CODE XREF: sub_4688D0+2F5↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_468968:                             ; CODE XREF: sub_4688D0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_468BCA
                push    offset sub_93E020
                push    offset sub_48C660
                push    0Ah
                push    1Ch
                lea     eax, [ebp+var_1AB]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_1D4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1D3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1CF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1CB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1C7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1C3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1BF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1BB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1B7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1B3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1AF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_1AB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_18F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_173]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_157]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_13B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_11F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_103]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_E7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_CB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_AF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_93]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_87]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_77]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1D4]
                push    edx
                lea     eax, [ebp+var_1D4]
                push    eax
                mov     ecx, [ebp+var_208]
                add     ecx, 300h
                call    sub_48FFA0
                mov     ecx, eax
                call    sub_468C10
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    0Ah
                push    1Ch
                lea     ecx, [ebp+var_1AB]
                push    ecx
                call    sub_ED9E2A
                jmp     loc_46895F
; ---------------------------------------------------------------------------

loc_468BCA:                             ; CODE XREF: sub_4688D0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_208]
                call    read_and_verify_checksum
                mov     [ebp+var_1D5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_1D5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4688D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_468C10      proc near               ; CODE XREF: sub_4688D0+2D7↑p
                                        ; sub_469B60+2D7↓p

var_44          = dword ptr -44h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 44h
                push    esi
                mov     [ebp+var_44], ecx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1]
                mov     [eax+1], edx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+5]
                mov     [eax+5], edx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+9]
                mov     [eax+9], edx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Dh]
                mov     [eax+0Dh], edx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+11h]
                mov     [eax+11h], edx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+15h]
                mov     [eax+15h], edx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+19h]
                mov     [eax+19h], edx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Dh]
                mov     [eax+1Dh], edx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+21h]
                mov     [eax+21h], edx
                mov     eax, [ebp+var_44]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+25h]
                mov     [eax+25h], edx
                mov     [ebp+var_4], 0
                jmp     short loc_468CAE
; ---------------------------------------------------------------------------

loc_468CA5:                             ; CODE XREF: sub_468C10+B8↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_468CAE:                             ; CODE XREF: sub_468C10+93↑j
                cmp     [ebp+var_4], 0Ah
                jnb     short loc_468CCA
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+1]
                mov     [edx+ecx*4+1], eax
                jmp     short loc_468CA5
; ---------------------------------------------------------------------------

loc_468CCA:                             ; CODE XREF: sub_468C10+A2↑j
                mov     [ebp+var_8], 0
                jmp     short loc_468CDC
; ---------------------------------------------------------------------------

loc_468CD3:                             ; CODE XREF: sub_468C10+FB↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_468CDC:                             ; CODE XREF: sub_468C10+C1↑j
                cmp     [ebp+var_8], 0Ah
                jnb     short loc_468D0D
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+var_8]
                imul    eax, 1Ch
                mov     ecx, [ebp+arg_0]
                lea     edx, [ecx+eax+29h]
                push    edx
                mov     eax, [ebp+var_8]
                imul    eax, 1Ch
                mov     ecx, [ebp+var_44]
                lea     ecx, [ecx+eax+29h]
                call    sub_4A0090
                jmp     short loc_468CD3
; ---------------------------------------------------------------------------

loc_468D0D:                             ; CODE XREF: sub_468C10+D0↑j
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+141h]
                mov     [edx+141h], ecx
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+145h]
                mov     [edx+145h], ecx
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+149h]
                mov     [edx+149h], ecx
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+14Dh]
                mov     [edx+14Dh], ecx
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+151h]
                mov     [edx+151h], ecx
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+155h]
                mov     [edx+155h], ecx
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+159h]
                mov     [edx+159h], ecx
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+15Dh]
                mov     [edx+15Dh], ecx
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+161h]
                mov     [edx+161h], ecx
                mov     edx, [ebp+var_44]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+165h]
                mov     [edx+165h], ecx
                mov     [ebp+var_C], 0
                jmp     short loc_468DD3
; ---------------------------------------------------------------------------

loc_468DCA:                             ; CODE XREF: sub_468C10+1E3↓j
                mov     edx, [ebp+var_C]
                add     edx, 1
                mov     [ebp+var_C], edx

loc_468DD3:                             ; CODE XREF: sub_468C10+1B8↑j
                cmp     [ebp+var_C], 0Ah
                jnb     short loc_468DF5
                mov     eax, [ebp+var_C]
                mov     ecx, [ebp+var_44]
                mov     edx, [ebp+var_C]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+141h]
                mov     [ecx+eax*4+141h], edx
                jmp     short loc_468DCA
; ---------------------------------------------------------------------------

loc_468DF5:                             ; CODE XREF: sub_468C10+1C7↑j
                mov     eax, [ebp+var_44]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_468C10      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_468E00      proc near               ; CODE XREF: sub_45E870+43F↑p

var_26C         = dword ptr -26Ch
var_268         = dword ptr -268h
var_22C         = dword ptr -22Ch
var_225         = byte ptr -225h
var_224         = byte ptr -224h
var_223         = byte ptr -223h
var_21F         = byte ptr -21Fh
var_21B         = byte ptr -21Bh
var_217         = byte ptr -217h
var_213         = byte ptr -213h
var_20F         = byte ptr -20Fh
var_20B         = byte ptr -20Bh
var_207         = byte ptr -207h
var_203         = byte ptr -203h
var_1FF         = byte ptr -1FFh
var_1FB         = byte ptr -1FBh
var_1F7         = byte ptr -1F7h
var_1F3         = byte ptr -1F3h
var_1EF         = byte ptr -1EFh
var_1EB         = byte ptr -1EBh
var_1E7         = byte ptr -1E7h
var_1E3         = byte ptr -1E3h
var_1DF         = byte ptr -1DFh
var_1DB         = byte ptr -1DBh
var_1D7         = byte ptr -1D7h
var_1D3         = byte ptr -1D3h
var_1CF         = byte ptr -1CFh
var_1CB         = byte ptr -1CBh
var_1C7         = byte ptr -1C7h
var_1C3         = byte ptr -1C3h
var_1BF         = byte ptr -1BFh
var_1BB         = byte ptr -1BBh
var_1B7         = byte ptr -1B7h
var_1B3         = byte ptr -1B3h
var_1AF         = byte ptr -1AFh
var_1AB         = byte ptr -1ABh
var_18F         = byte ptr -18Fh
var_173         = byte ptr -173h
var_157         = byte ptr -157h
var_13B         = byte ptr -13Bh
var_11F         = byte ptr -11Fh
var_103         = byte ptr -103h
var_E7          = byte ptr -0E7h
var_CB          = byte ptr -0CBh
var_AF          = byte ptr -0AFh
var_93          = byte ptr -93h
var_8F          = byte ptr -8Fh
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73730 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_468E00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 260h
                mov     [ebp+var_268], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_22C], eax
                mov     ecx, [ebp+var_268]
                cmp     dword ptr [ecx], 0
                jnz     short loc_468E55
                mov     [ebp+var_26C], offset byte_110A50C
                jmp     short loc_468E63
; ---------------------------------------------------------------------------

loc_468E55:                             ; CODE XREF: sub_468E00+47↑j
                mov     edx, [ebp+var_268]
                mov     eax, [edx]
                mov     [ebp+var_26C], eax

loc_468E63:                             ; CODE XREF: sub_468E00+53↑j
                push    0
                mov     ecx, [ebp+var_22C]
                push    ecx
                push    offset aTbCustomizeHai ; "tb_Customize_Hair"
                mov     edx, [ebp+var_26C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_468E98
; ---------------------------------------------------------------------------

loc_468E8F:                             ; CODE XREF: sub_468E00+421↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_468E98:                             ; CODE XREF: sub_468E00+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_469226
                push    offset sub_93E020
                push    offset sub_48C660
                push    0Ah
                push    1Ch
                lea     eax, [ebp+var_1AB]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_224]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_223]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_21F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_21B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_217]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_213]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_20F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_20B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_207]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_203]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1FF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1FB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1F3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1EF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1EB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1E7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1E3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1DB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1D7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1D3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1CF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1CB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1C7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1C3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1BF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1BB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1B7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1B3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1AF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_1AB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_18F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_173]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_157]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_13B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_11F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_103]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_E7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_CB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_AF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_93]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_77]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_73]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_224]
                push    ecx
                lea     edx, [ebp+var_224]
                push    edx
                mov     ecx, [ebp+var_268]
                add     ecx, 310h
                call    sub_4901D0
                mov     ecx, eax
                call    sub_469280
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    0Ah
                push    1Ch
                lea     eax, [ebp+var_1AB]
                push    eax
                call    sub_ED9E2A
                jmp     loc_468E8F
; ---------------------------------------------------------------------------

loc_469226:                             ; CODE XREF: sub_468E00+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_268]
                call    read_and_verify_checksum
                mov     [ebp+var_225], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_225]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_468E00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_469260      proc near               ; CODE XREF: sub_468E00+B0A93E↓j
                                        ; sub_4901D0+AE61B6↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    0Ah
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 79h
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_469260      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_469280      proc near               ; CODE XREF: sub_468E00+403↑p

var_4C          = dword ptr -4Ch
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 4Ch
                push    esi
                mov     [ebp+var_4C], ecx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1]
                mov     [eax+1], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+5]
                mov     [eax+5], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+9]
                mov     [eax+9], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Dh]
                mov     [eax+0Dh], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+11h]
                mov     [eax+11h], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+15h]
                mov     [eax+15h], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+19h]
                mov     [eax+19h], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Dh]
                mov     [eax+1Dh], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+21h]
                mov     [eax+21h], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+25h]
                mov     [eax+25h], edx
                mov     [ebp+var_4], 0
                jmp     short loc_46931E
; ---------------------------------------------------------------------------

loc_469315:                             ; CODE XREF: sub_469280+B8↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_46931E:                             ; CODE XREF: sub_469280+93↑j
                cmp     [ebp+var_4], 0Ah
                jnb     short loc_46933A
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+1]
                mov     [edx+ecx*4+1], eax
                jmp     short loc_469315
; ---------------------------------------------------------------------------

loc_46933A:                             ; CODE XREF: sub_469280+A2↑j
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+29h]
                mov     [ecx+29h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+2Dh]
                mov     [ecx+2Dh], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+31h]
                mov     [ecx+31h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+35h]
                mov     [ecx+35h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+39h]
                mov     [ecx+39h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+3Dh]
                mov     [ecx+3Dh], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+41h]
                mov     [ecx+41h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+45h]
                mov     [ecx+45h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+49h]
                mov     [ecx+49h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Dh]
                mov     [ecx+4Dh], eax
                mov     [ebp+var_8], 0
                jmp     short loc_4693C4
; ---------------------------------------------------------------------------

loc_4693BB:                             ; CODE XREF: sub_469280+15E↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_4693C4:                             ; CODE XREF: sub_469280+139↑j
                cmp     [ebp+var_8], 0Ah
                jnb     short loc_4693E0
                mov     edx, [ebp+var_8]
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+29h]
                mov     [eax+edx*4+29h], ecx
                jmp     short loc_4693BB
; ---------------------------------------------------------------------------

loc_4693E0:                             ; CODE XREF: sub_469280+148↑j
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+51h]
                mov     [edx+51h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+55h]
                mov     [edx+55h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+59h]
                mov     [edx+59h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+5Dh]
                mov     [edx+5Dh], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+61h]
                mov     [edx+61h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+65h]
                mov     [edx+65h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+69h]
                mov     [edx+69h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+6Dh]
                mov     [edx+6Dh], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+71h]
                mov     [edx+71h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+75h]
                mov     [edx+75h], ecx
                mov     [ebp+var_C], 0
                jmp     short loc_46946A
; ---------------------------------------------------------------------------

loc_469461:                             ; CODE XREF: sub_469280+204↓j
                mov     edx, [ebp+var_C]
                add     edx, 1
                mov     [ebp+var_C], edx

loc_46946A:                             ; CODE XREF: sub_469280+1DF↑j
                cmp     [ebp+var_C], 0Ah
                jnb     short loc_469486
                mov     eax, [ebp+var_C]
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+var_C]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+51h]
                mov     [ecx+eax*4+51h], edx
                jmp     short loc_469461
; ---------------------------------------------------------------------------

loc_469486:                             ; CODE XREF: sub_469280+1EE↑j
                mov     [ebp+var_10], 0
                jmp     short loc_469498
; ---------------------------------------------------------------------------

loc_46948F:                             ; CODE XREF: sub_469280+247↓j
                mov     eax, [ebp+var_10]
                add     eax, 1
                mov     [ebp+var_10], eax

loc_469498:                             ; CODE XREF: sub_469280+20D↑j
                cmp     [ebp+var_10], 0Ah
                jnb     short loc_4694C9
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+var_10]
                imul    edx, 1Ch
                mov     eax, [ebp+arg_0]
                lea     ecx, [eax+edx+79h]
                push    ecx
                mov     edx, [ebp+var_10]
                imul    edx, 1Ch
                mov     eax, [ebp+var_4C]
                lea     ecx, [eax+edx+79h]
                call    sub_4A0090
                jmp     short loc_46948F
; ---------------------------------------------------------------------------

loc_4694C9:                             ; CODE XREF: sub_469280+21C↑j
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+191h]
                mov     [ecx+191h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+195h]
                mov     [ecx+195h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+199h]
                mov     [ecx+199h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+19Dh]
                mov     [ecx+19Dh], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1A1h]
                mov     [ecx+1A1h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1A5h]
                mov     [ecx+1A5h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1A9h]
                mov     [ecx+1A9h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1ADh]
                mov     [ecx+1ADh], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1B1h]
                mov     [ecx+1B1h], eax
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1B5h]
                mov     [ecx+1B5h], eax
                mov     [ebp+var_14], 0
                jmp     short loc_46958F
; ---------------------------------------------------------------------------

loc_469586:                             ; CODE XREF: sub_469280+32F↓j
                mov     ecx, [ebp+var_14]
                add     ecx, 1
                mov     [ebp+var_14], ecx

loc_46958F:                             ; CODE XREF: sub_469280+304↑j
                cmp     [ebp+var_14], 0Ah
                jnb     short loc_4695B1
                mov     edx, [ebp+var_14]
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+var_14]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+191h]
                mov     [eax+edx*4+191h], ecx
                jmp     short loc_469586
; ---------------------------------------------------------------------------

loc_4695B1:                             ; CODE XREF: sub_469280+313↑j
                mov     eax, [ebp+var_4C]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_469280      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4695C0      proc near               ; CODE XREF: sub_45E870+455↑p

var_118         = dword ptr -118h
var_114         = dword ptr -114h
var_104         = dword ptr -104h
var_FD          = byte ptr -0FDh
var_FC          = byte ptr -0FCh
var_FB          = byte ptr -0FBh
var_FA          = byte ptr -0FAh
var_F9          = byte ptr -0F9h
var_F8          = byte ptr -0F8h
var_F7          = byte ptr -0F7h
var_F6          = byte ptr -0F6h
var_F5          = byte ptr -0F5h
var_F4          = byte ptr -0F4h
var_F3          = byte ptr -0F3h
var_F2          = byte ptr -0F2h
var_F1          = byte ptr -0F1h
var_F0          = byte ptr -0F0h
var_D4          = byte ptr -0D4h
var_B8          = byte ptr -0B8h
var_9C          = byte ptr -9Ch
var_80          = byte ptr -80h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73750 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4695C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 10Ch
                mov     [ebp+var_114], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_104], eax
                mov     ecx, [ebp+var_114]
                cmp     dword ptr [ecx], 0
                jnz     short loc_469615
                mov     [ebp+var_118], offset byte_110A50C
                jmp     short loc_469623
; ---------------------------------------------------------------------------

loc_469615:                             ; CODE XREF: sub_4695C0+47↑j
                mov     edx, [ebp+var_114]
                mov     eax, [edx]
                mov     [ebp+var_118], eax

loc_469623:                             ; CODE XREF: sub_4695C0+53↑j
                push    0
                mov     ecx, [ebp+var_104]
                push    ecx
                push    offset aTbCustomizeInf ; "tb_Customize_Info"
                mov     edx, [ebp+var_118]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_469658
; ---------------------------------------------------------------------------

loc_46964F:                             ; CODE XREF: sub_4695C0+1FD↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_469658:                             ; CODE XREF: sub_4695C0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4697C2
                lea     ecx, [ebp+var_FC]
                call    sub_469800
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_FB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_FA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_F9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_F8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_F7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_F6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_F5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_F4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_F3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_F2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_F1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_F0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_D4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_FC]
                push    edx
                lea     eax, [ebp+var_FC]
                push    eax
                mov     ecx, [ebp+var_114]
                add     ecx, 320h
                call    sub_490400
                mov     ecx, eax
                call    sub_469A00
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_FC]
                call    sub_469920
                jmp     loc_46964F
; ---------------------------------------------------------------------------

loc_4697C2:                             ; CODE XREF: sub_4695C0+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_114]
                call    read_and_verify_checksum
                mov     [ebp+var_FD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_FD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4695C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_469800      proc near               ; CODE XREF: sub_4695C0+AA↑p
                                        ; sub_490400+A6↓p

var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_64          = dword ptr -64h
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_2D          = byte ptr -2Dh
var_2C          = dword ptr -2Ch
var_24          = dword ptr -24h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73770 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_469800
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 80h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                add     eax, 0Ch
                mov     [ebp+var_24], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_24]
                mov     [ebp+var_7C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_78]
                add     eax, 28h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_2D]
                mov     [ebp+var_2C], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_80], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_78]
                add     eax, 44h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_84], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_78]
                add     eax, 60h
                mov     [ebp+var_64], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_64]
                mov     [ebp+var_88], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_64]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_78]
                add     eax, 7Ch
                mov     [ebp+var_74], eax
                lea     ecx, [ebp+var_6D]
                mov     [ebp+var_6C], ecx
                mov     edx, [ebp+var_74]
                mov     [ebp+var_8C], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_74]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_469800      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_469920      proc near               ; CODE XREF: sub_4695C0+1F8↑p
                                        ; sub_490400+130↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F737D0 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_469920
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 3
                mov     eax, [ebp+var_4C]
                add     eax, 7Ch
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_4C]
                add     ecx, 60h
                mov     [ebp+var_24], ecx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_4C]
                add     edx, 44h
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_4C]
                add     eax, 28h
                mov     [ebp+var_3C], eax
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_4C]
                add     ecx, 0Ch
                mov     [ebp+var_48], ecx
                mov     [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_469920      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_469A00      proc near               ; CODE XREF: sub_4695C0+1E9↑p

var_74          = dword ptr -74h
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 74h
                mov     [ebp+var_74], ecx
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1]
                mov     [eax+1], dl
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2]
                mov     [eax+2], dl
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+3]
                mov     [eax+3], dl
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+5]
                mov     [eax+5], dl
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+6]
                mov     [eax+6], dl
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+7]
                mov     [eax+7], dl
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+8]
                mov     [eax+8], dl
                mov     [ebp+var_4], 0
                jmp     short loc_469A85
; ---------------------------------------------------------------------------

loc_469A7C:                             ; CODE XREF: sub_469A00+9D↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_469A85:                             ; CODE XREF: sub_469A00+7A↑j
                cmp     [ebp+var_4], 5
                jnb     short loc_469A9F
                mov     ecx, [ebp+var_74]
                add     ecx, [ebp+var_4]
                mov     edx, [ebp+arg_0]
                add     edx, [ebp+var_4]
                mov     al, [edx+4]
                mov     [ecx+4], al
                jmp     short loc_469A7C
; ---------------------------------------------------------------------------

loc_469A9F:                             ; CODE XREF: sub_469A00+89↑j
                mov     ecx, [ebp+var_74]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+9]
                mov     [ecx+9], al
                mov     ecx, [ebp+var_74]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0Ah]
                mov     [ecx+0Ah], al
                mov     ecx, [ebp+var_74]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0Bh]
                mov     [ecx+0Bh], al
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0Ch
                push    edx
                mov     ecx, [ebp+var_74]
                add     ecx, 0Ch
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 28h
                push    ecx
                mov     ecx, [ebp+var_74]
                add     ecx, 28h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 44h
                push    eax
                mov     ecx, [ebp+var_74]
                add     ecx, 44h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 60h
                push    edx
                mov     ecx, [ebp+var_74]
                add     ecx, 60h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 7Ch
                push    ecx
                mov     ecx, [ebp+var_74]
                add     ecx, 7Ch
                call    sub_4A0090
                mov     eax, [ebp+var_74]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_469A00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_469B60      proc near               ; CODE XREF: sub_45E870+46B↑p

var_20C         = dword ptr -20Ch
var_208         = dword ptr -208h
var_1DC         = dword ptr -1DCh
var_1D5         = byte ptr -1D5h
var_1D4         = byte ptr -1D4h
var_1D3         = byte ptr -1D3h
var_1CF         = byte ptr -1CFh
var_1CB         = byte ptr -1CBh
var_1C7         = byte ptr -1C7h
var_1C3         = byte ptr -1C3h
var_1BF         = byte ptr -1BFh
var_1BB         = byte ptr -1BBh
var_1B7         = byte ptr -1B7h
var_1B3         = byte ptr -1B3h
var_1AF         = byte ptr -1AFh
var_1AB         = byte ptr -1ABh
var_18F         = byte ptr -18Fh
var_173         = byte ptr -173h
var_157         = byte ptr -157h
var_13B         = byte ptr -13Bh
var_11F         = byte ptr -11Fh
var_103         = byte ptr -103h
var_E7          = byte ptr -0E7h
var_CB          = byte ptr -0CBh
var_AF          = byte ptr -0AFh
var_93          = byte ptr -93h
var_8F          = byte ptr -8Fh
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_469B60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 200h
                mov     [ebp+var_208], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_1DC], eax
                mov     ecx, [ebp+var_208]
                cmp     dword ptr [ecx], 0
                jnz     short loc_469BB5
                mov     [ebp+var_20C], offset byte_110A50C
                jmp     short loc_469BC3
; ---------------------------------------------------------------------------

loc_469BB5:                             ; CODE XREF: sub_469B60+47↑j
                mov     edx, [ebp+var_208]
                mov     eax, [edx]
                mov     [ebp+var_20C], eax

loc_469BC3:                             ; CODE XREF: sub_469B60+53↑j
                push    0
                mov     ecx, [ebp+var_1DC]
                push    ecx
                push    offset aTbCustomizeSki ; "tb_Customize_Skin"
                mov     edx, [ebp+var_20C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_469BF8
; ---------------------------------------------------------------------------

loc_469BEF:                             ; CODE XREF: sub_469B60+2F5↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_469BF8:                             ; CODE XREF: sub_469B60+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_469E5A
                push    offset sub_93E020
                push    offset sub_48C660
                push    0Ah
                push    1Ch
                lea     eax, [ebp+var_1AB]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_1D4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1D3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1CF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1CB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1C7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1C3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1BF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1BB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1B7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1B3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1AF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_1AB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_18F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_173]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_157]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_13B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_11F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_103]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_E7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_CB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_AF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_93]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_87]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_77]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1D4]
                push    edx
                lea     eax, [ebp+var_1D4]
                push    eax
                mov     ecx, [ebp+var_208]
                add     ecx, 330h
                call    sub_48FFA0
                mov     ecx, eax
                call    sub_468C10
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    0Ah
                push    1Ch
                lea     ecx, [ebp+var_1AB]
                push    ecx
                call    sub_ED9E2A
                jmp     loc_469BEF
; ---------------------------------------------------------------------------

loc_469E5A:                             ; CODE XREF: sub_469B60+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_208]
                call    read_and_verify_checksum
                mov     [ebp+var_1D5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_1D5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_469B60      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_469EA0      proc near               ; CODE XREF: sub_4688D0+B0AF6E↓j
                                        ; sub_48FFA0+AE63C6↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    0Ah
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 29h
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_469EA0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_469EC0      proc near               ; CODE XREF: sub_45E870+481↑p

var_278         = dword ptr -278h
var_274         = dword ptr -274h
var_104         = dword ptr -104h
var_FD          = byte ptr -0FDh
var_FC          = byte ptr -0FCh
var_FB          = byte ptr -0FBh
var_F9          = byte ptr -0F9h
var_F7          = byte ptr -0F7h
var_F5          = byte ptr -0F5h
var_F3          = byte ptr -0F3h
var_F1          = byte ptr -0F1h
var_D5          = byte ptr -0D5h
var_B9          = byte ptr -0B9h
var_9D          = byte ptr -9Dh
var_81          = byte ptr -81h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73870 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46A430
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 26Ch
                mov     [ebp+var_274], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_104], eax
                mov     ecx, [ebp+var_274]
                cmp     dword ptr [ecx], 0
                jnz     short loc_469F15
                mov     [ebp+var_278], offset byte_110A50C
                jmp     short loc_469F23
; ---------------------------------------------------------------------------

loc_469F15:                             ; CODE XREF: sub_469EC0+47↑j
                mov     edx, [ebp+var_274]
                mov     eax, [edx]
                mov     [ebp+var_278], eax

loc_469F23:                             ; CODE XREF: sub_469EC0+53↑j
                push    0
                mov     ecx, [ebp+var_104]
                push    ecx
                push    offset aTbCustomizeVie ; "tb_Customize_View_Ani"
                mov     edx, [ebp+var_278]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_469F58
; ---------------------------------------------------------------------------

loc_469F4F:                             ; CODE XREF: sub_469EC0+1BF↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_469F58:                             ; CODE XREF: sub_469EC0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46A084
                push    offset sub_93E020
                push    offset sub_48C660
                push    5
                push    1Ch
                lea     eax, [ebp+var_F1]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_FC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_FB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_F5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_F1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_D5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_B9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_9D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_81]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_FC]
                push    ecx
                mov     ecx, [ebp+var_274]
                add     ecx, 340h
                call    sub_490860
                mov     ecx, eax
                call    sub_46A630
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    5
                push    1Ch
                lea     edx, [ebp+var_F1]
                push    edx
                call    sub_ED9E2A
                jmp     loc_469F4F
; ---------------------------------------------------------------------------

loc_46A084:                             ; CODE XREF: sub_469EC0+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_274]
                call    read_and_verify_checksum
                mov     [ebp+var_FD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_FD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_469EC0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46A0C0      proc near               ; CODE XREF: sub_469EC0+B099BE↓j
                                        ; sub_490860+AE5BA6↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    5
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 0Bh
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_46A0C0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46A0E0      proc near               ; CODE XREF: sub_45E870+497↑p

var_EC          = dword ptr -0ECh
var_E8          = dword ptr -0E8h
var_BC          = dword ptr -0BCh
var_B5          = byte ptr -0B5h
var_B4          = byte ptr -0B4h
var_B3          = byte ptr -0B3h
var_AF          = byte ptr -0AFh
var_AB          = byte ptr -0ABh
var_A7          = byte ptr -0A7h
var_A3          = byte ptr -0A3h
var_9F          = byte ptr -9Fh
var_9B          = byte ptr -9Bh
var_97          = byte ptr -97h
var_93          = byte ptr -93h
var_8F          = byte ptr -8Fh
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73850 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46A0E0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E0h
                mov     [ebp+var_E8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_BC], eax
                mov     ecx, [ebp+var_E8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46A135
                mov     [ebp+var_EC], offset byte_110A50C
                jmp     short loc_46A143
; ---------------------------------------------------------------------------

loc_46A135:                             ; CODE XREF: sub_46A0E0+47↑j
                mov     edx, [ebp+var_E8]
                mov     eax, [edx]
                mov     [ebp+var_EC], eax

loc_46A143:                             ; CODE XREF: sub_46A0E0+53↑j
                push    0
                mov     ecx, [ebp+var_BC]
                push    ecx
                push    offset aTbCustomizeVie_0 ; "tb_Customize_View_Costume"
                mov     edx, [ebp+var_EC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46A178
; ---------------------------------------------------------------------------

loc_46A16F:                             ; CODE XREF: sub_46A0E0+1BF↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46A178:                             ; CODE XREF: sub_46A0E0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46A2A4
                lea     ecx, [ebp+var_83]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_B3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_AB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_97]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_93]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_B4]
                push    edx
                lea     eax, [ebp+var_B4]
                push    eax
                mov     ecx, [ebp+var_E8]
                add     ecx, 350h
                call    sub_490600
                mov     ecx, eax
                call    sub_46A330
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_83]
                call    sub_93E020
                jmp     loc_46A16F
; ---------------------------------------------------------------------------

loc_46A2A4:                             ; CODE XREF: sub_46A0E0+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_E8]
                call    read_and_verify_checksum
                mov     [ebp+var_B5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_B5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46A0E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46A2E0      proc near               ; CODE XREF: sub_46A0E0+B0977E↓j
                                        ; sub_490600+AE5DD1↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 31h
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46A2E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46A330      proc near               ; CODE XREF: sub_46A0E0+1AB↑p

var_3C          = dword ptr -3Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 3Ch
                push    esi
                mov     [ebp+var_3C], ecx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1]
                mov     [eax+1], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+5]
                mov     [eax+5], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+9]
                mov     [eax+9], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Dh]
                mov     [eax+0Dh], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+11h]
                mov     [eax+11h], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+15h]
                mov     [eax+15h], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+19h]
                mov     [eax+19h], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Dh]
                mov     [eax+1Dh], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+21h]
                mov     [eax+21h], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+25h]
                mov     [eax+25h], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+29h]
                mov     [eax+29h], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2Dh]
                mov     [eax+2Dh], edx
                mov     [ebp+var_4], 0
                jmp     short loc_46A3E6
; ---------------------------------------------------------------------------

loc_46A3DD:                             ; CODE XREF: sub_46A330+D0↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_46A3E6:                             ; CODE XREF: sub_46A330+AB↑j
                cmp     [ebp+var_4], 0Ch
                jnb     short loc_46A402
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+1]
                mov     [edx+ecx*4+1], eax
                jmp     short loc_46A3DD
; ---------------------------------------------------------------------------

loc_46A402:                             ; CODE XREF: sub_46A330+BA↑j
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 31h
                push    edx
                mov     ecx, [ebp+var_3C]
                add     ecx, 31h
                call    sub_4A0090
                mov     eax, [ebp+var_3C]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46A330      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46A430      proc near               ; CODE XREF: sub_45E870+4AD↑p

var_278         = dword ptr -278h
var_274         = dword ptr -274h
var_104         = dword ptr -104h
var_FD          = byte ptr -0FDh
var_FC          = byte ptr -0FCh
var_FB          = byte ptr -0FBh
var_F9          = byte ptr -0F9h
var_F7          = byte ptr -0F7h
var_F5          = byte ptr -0F5h
var_F3          = byte ptr -0F3h
var_F1          = byte ptr -0F1h
var_D5          = byte ptr -0D5h
var_B9          = byte ptr -0B9h
var_9D          = byte ptr -9Dh
var_81          = byte ptr -81h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46A430
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 26Ch
                mov     [ebp+var_274], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_104], eax
                mov     ecx, [ebp+var_274]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46A485
                mov     [ebp+var_278], offset byte_110A50C
                jmp     short loc_46A493
; ---------------------------------------------------------------------------

loc_46A485:                             ; CODE XREF: sub_46A430+47↑j
                mov     edx, [ebp+var_274]
                mov     eax, [edx]
                mov     [ebp+var_278], eax

loc_46A493:                             ; CODE XREF: sub_46A430+53↑j
                push    0
                mov     ecx, [ebp+var_104]
                push    ecx
                push    offset aTbCustomizeVie_1 ; "tb_Customize_View_Sound"
                mov     edx, [ebp+var_278]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46A4C8
; ---------------------------------------------------------------------------

loc_46A4BF:                             ; CODE XREF: sub_46A430+1BF↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46A4C8:                             ; CODE XREF: sub_46A430+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46A5F4
                push    offset sub_93E020
                push    offset sub_48C660
                push    5
                push    1Ch
                lea     eax, [ebp+var_F1]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_FC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_FB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_F5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_F1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_D5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_B9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_9D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_81]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_FC]
                push    ecx
                mov     ecx, [ebp+var_274]
                add     ecx, 360h
                call    sub_490860
                mov     ecx, eax
                call    sub_46A630
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    5
                push    1Ch
                lea     edx, [ebp+var_F1]
                push    edx
                call    sub_ED9E2A
                jmp     loc_46A4BF
; ---------------------------------------------------------------------------

loc_46A5F4:                             ; CODE XREF: sub_46A430+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_274]
                call    read_and_verify_checksum
                mov     [ebp+var_FD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_FD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46A430      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46A630      proc near               ; CODE XREF: sub_469EC0+1A1↑p
                                        ; sub_46A430+1A1↑p

var_40          = dword ptr -40h
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 40h
                push    esi
                mov     [ebp+var_40], ecx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1]
                mov     [eax+1], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+3]
                mov     [eax+3], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5]
                mov     [eax+5], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+7]
                mov     [eax+7], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+9]
                mov     [eax+9], dx
                mov     [ebp+var_4], 0
                jmp     short loc_46A69C
; ---------------------------------------------------------------------------

loc_46A693:                             ; CODE XREF: sub_46A630+88↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_46A69C:                             ; CODE XREF: sub_46A630+61↑j
                cmp     [ebp+var_4], 5
                jnb     short loc_46A6BA
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+1]
                mov     [edx+ecx*2+1], ax
                jmp     short loc_46A693
; ---------------------------------------------------------------------------

loc_46A6BA:                             ; CODE XREF: sub_46A630+70↑j
                mov     [ebp+var_8], 0
                jmp     short loc_46A6CC
; ---------------------------------------------------------------------------

loc_46A6C3:                             ; CODE XREF: sub_46A630+CB↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_46A6CC:                             ; CODE XREF: sub_46A630+91↑j
                cmp     [ebp+var_8], 5
                jnb     short loc_46A6FD
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+var_8]
                imul    eax, 1Ch
                mov     ecx, [ebp+arg_0]
                lea     edx, [ecx+eax+0Bh]
                push    edx
                mov     eax, [ebp+var_8]
                imul    eax, 1Ch
                mov     ecx, [ebp+var_40]
                lea     ecx, [ecx+eax+0Bh]
                call    sub_4A0090
                jmp     short loc_46A6C3
; ---------------------------------------------------------------------------

loc_46A6FD:                             ; CODE XREF: sub_46A630+A0↑j
                mov     eax, [ebp+var_40]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46A630      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46A710      proc near               ; CODE XREF: sub_45E870+4C3↑p

var_E8          = dword ptr -0E8h
var_E4          = dword ptr -0E4h
var_80          = dword ptr -80h
var_79          = byte ptr -79h
var_78          = dword ptr -78h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_67          = byte ptr -67h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0DCh
                mov     [ebp+var_E4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_E4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46A762
                mov     [ebp+var_E8], offset byte_110A50C
                jmp     short loc_46A770
; ---------------------------------------------------------------------------

loc_46A762:                             ; CODE XREF: sub_46A710+44↑j
                mov     edx, [ebp+var_E4]
                mov     eax, [edx]
                mov     [ebp+var_E8], eax

loc_46A770:                             ; CODE XREF: sub_46A710+50↑j
                push    0
                mov     ecx, [ebp+var_80]
                push    ecx
                push    offset aTbCustomizeVie_2 ; "tb_Customize_View_Weapon"
                mov     edx, [ebp+var_E8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46A7A2
; ---------------------------------------------------------------------------

loc_46A799:                             ; CODE XREF: sub_46A710+11E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46A7A2:                             ; CODE XREF: sub_46A710+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46A833
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_78+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_73]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_67]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_78]
                push    eax
                mov     ecx, [ebp+var_E4]
                add     ecx, 370h
                call    sub_490A90
                mov     ecx, [ebp+var_78]
                mov     [eax], ecx
                mov     edx, [ebp-74h]
                mov     [eax+4], edx
                mov     ecx, [ebp-70h]
                mov     [eax+8], ecx
                mov     edx, [ebp-6Ch]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp-68h]
                mov     [eax+10h], ecx
                mov     dl, [ebp+var_64]
                mov     [eax+14h], dl
                jmp     loc_46A799
; ---------------------------------------------------------------------------

loc_46A833:                             ; CODE XREF: sub_46A710+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_E4]
                call    read_and_verify_checksum
                mov     [ebp+var_79], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_79]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46A710      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46A870      proc near               ; CODE XREF: sub_45E870+4D9↑p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_11C         = dword ptr -11Ch
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = dword ptr -80h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488190
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 12Ch
                mov     [ebp+var_130], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_130]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46A8C5
                mov     [ebp+var_134], offset byte_110A50C
                jmp     short loc_46A8D3
; ---------------------------------------------------------------------------

loc_46A8C5:                             ; CODE XREF: sub_46A870+47↑j
                mov     edx, [ebp+var_130]
                mov     eax, [edx]
                mov     [ebp+var_134], eax

loc_46A8D3:                             ; CODE XREF: sub_46A870+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbCutsceneStri ; "tb_Cutscene_String"
                mov     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46A908
; ---------------------------------------------------------------------------

loc_46A8FF:                             ; CODE XREF: sub_46A870+162↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46A908:                             ; CODE XREF: sub_46A870+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46A9D7
                lea     eax, [ebp+var_7C]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_138], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_130]
                add     ecx, 380h
                call    sub_49C730
                mov     [ebp+var_11C], eax
                mov     eax, [ebp+var_11C]
                mov     ecx, [ebp+var_80]
                mov     [eax], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_11C]
                add     ecx, 4
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                mov     [ebp+var_12C], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_12C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_46A8FF
; ---------------------------------------------------------------------------

loc_46A9D7:                             ; CODE XREF: sub_46A870+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_130]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46A870      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46AA10      proc near               ; CODE XREF: sub_45E870+4EF↑p

var_110         = dword ptr -110h
var_10C         = dword ptr -10Ch
var_108         = dword ptr -108h
var_E4          = dword ptr -0E4h
var_DD          = byte ptr -0DDh
var_DC          = byte ptr -0DCh
var_D8          = byte ptr -0D8h
var_D7          = byte ptr -0D7h
var_D3          = byte ptr -0D3h
var_CF          = byte ptr -0CFh
var_CE          = byte ptr -0CEh
var_CD          = byte ptr -0CDh
var_C9          = byte ptr -0C9h
var_C8          = byte ptr -0C8h
var_C4          = byte ptr -0C4h
var_C0          = byte ptr -0C0h
var_BF          = byte ptr -0BFh
var_BB          = byte ptr -0BBh
var_B7          = byte ptr -0B7h
var_B6          = byte ptr -0B6h
var_B5          = byte ptr -0B5h
var_99          = byte ptr -99h
var_7D          = byte ptr -7Dh
var_79          = byte ptr -79h
var_75          = byte ptr -75h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_6C          = byte ptr -6Ch
var_6B          = byte ptr -6Bh
var_6A          = byte ptr -6Ah
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73890 SIZE 00000034 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46AA10
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 104h
                mov     [ebp+var_10C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_E4], eax
                mov     ecx, [ebp+var_10C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46AA65
                mov     [ebp+var_110], offset byte_110A50C
                jmp     short loc_46AA73
; ---------------------------------------------------------------------------

loc_46AA65:                             ; CODE XREF: sub_46AA10+47↑j
                mov     edx, [ebp+var_10C]
                mov     eax, [edx]
                mov     [ebp+var_110], eax

loc_46AA73:                             ; CODE XREF: sub_46AA10+53↑j
                push    0
                mov     ecx, [ebp+var_E4]
                push    ecx
                push    offset aTbDailyMission ; "tb_Daily_Mission"
                mov     edx, [ebp+var_110]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46AAA8
; ---------------------------------------------------------------------------

loc_46AA9F:                             ; CODE XREF: sub_46AA10+287↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46AAA8:                             ; CODE XREF: sub_46AA10+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46AC9C
                lea     ecx, [ebp+var_B5]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_99]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_DC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_D7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_D3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_CF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_CE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_CD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_C8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_BF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_B6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_B5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_99]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_79]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_75]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_71]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_DC]
                push    ecx
                lea     edx, [ebp+var_DC]
                push    edx
                mov     ecx, [ebp+var_10C]
                add     ecx, 390h
                call    sub_490C10
                mov     ecx, eax
                call    sub_46AD60
                mov     byte ptr [ebp+var_4], 3
                lea     eax, [ebp+var_99]
                mov     [ebp+var_108], eax
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_108]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_B5]
                call    sub_93E020
                jmp     loc_46AA9F
; ---------------------------------------------------------------------------

loc_46AC9C:                             ; CODE XREF: sub_46AA10+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_10C]
                call    read_and_verify_checksum
                mov     [ebp+var_DD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_DD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46AA10      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46ACE0      proc near               ; CODE XREF: sub_490C10+12B↓p
                                        ; sub_490C10+13D↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F738D0 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46ACE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 43h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 27h
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46ACE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46AD60      proc near               ; CODE XREF: sub_46AA10+24C↑p

var_78          = dword ptr -78h
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 78h
                push    esi
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+5]
                mov     [eax+5], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+9]
                mov     [eax+9], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Dh]
                mov     [eax+0Dh], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Eh]
                mov     [eax+0Eh], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Fh]
                mov     [eax+0Fh], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+13h]
                mov     [eax+13h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+14h]
                mov     [eax+14h], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+18h]
                mov     [eax+18h], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1Ch]
                mov     [eax+1Ch], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Dh]
                mov     [eax+1Dh], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+21h]
                mov     [eax+21h], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+25h]
                mov     [eax+25h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+26h]
                mov     [eax+26h], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 27h
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 27h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 43h
                push    eax
                mov     ecx, [ebp+var_78]
                add     ecx, 43h
                call    sub_4A0090
                mov     ecx, [ebp+var_78]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+5Fh]
                mov     [ecx+5Fh], eax
                mov     ecx, [ebp+var_78]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+63h]
                mov     [ecx+63h], eax
                mov     ecx, [ebp+var_78]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+67h]
                mov     [ecx+67h], eax
                mov     ecx, [ebp+var_78]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+6Bh]
                mov     [ecx+6Bh], eax
                mov     [ebp+var_4], 0
                jmp     short loc_46AE93
; ---------------------------------------------------------------------------

loc_46AE8A:                             ; CODE XREF: sub_46AD60+14D↓j
                mov     ecx, [ebp+var_4]
                add     ecx, 1
                mov     [ebp+var_4], ecx

loc_46AE93:                             ; CODE XREF: sub_46AD60+128↑j
                cmp     [ebp+var_4], 4
                jnb     short loc_46AEAF
                mov     edx, [ebp+var_4]
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+5Fh]
                mov     [eax+edx*4+5Fh], ecx
                jmp     short loc_46AE8A
; ---------------------------------------------------------------------------

loc_46AEAF:                             ; CODE XREF: sub_46AD60+137↑j
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+6Fh]
                mov     [edx+6Fh], cl
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+70h]
                mov     [edx+70h], cl
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+71h]
                mov     [edx+71h], cl
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+72h]
                mov     [edx+72h], cl
                mov     [ebp+var_8], 0
                jmp     short loc_46AEF1
; ---------------------------------------------------------------------------

loc_46AEE8:                             ; CODE XREF: sub_46AD60+1A9↓j
                mov     edx, [ebp+var_8]
                add     edx, 1
                mov     [ebp+var_8], edx

loc_46AEF1:                             ; CODE XREF: sub_46AD60+186↑j
                cmp     [ebp+var_8], 4
                jnb     short loc_46AF0B
                mov     eax, [ebp+var_78]
                add     eax, [ebp+var_8]
                mov     ecx, [ebp+arg_0]
                add     ecx, [ebp+var_8]
                mov     dl, [ecx+6Fh]
                mov     [eax+6Fh], dl
                jmp     short loc_46AEE8
; ---------------------------------------------------------------------------

loc_46AF0B:                             ; CODE XREF: sub_46AD60+195↑j
                mov     eax, [ebp+var_78]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46AD60      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46AF20      proc near               ; CODE XREF: sub_45E870+505↑p

var_17C         = dword ptr -17Ch
var_178         = dword ptr -178h
var_13C         = dword ptr -13Ch
var_135         = byte ptr -135h
var_134         = byte ptr -134h
var_132         = byte ptr -132h
var_131         = byte ptr -131h
var_12F         = byte ptr -12Fh
var_12D         = byte ptr -12Dh
var_12B         = byte ptr -12Bh
var_129         = byte ptr -129h
var_127         = byte ptr -127h
var_125         = byte ptr -125h
var_123         = byte ptr -123h
var_121         = byte ptr -121h
var_11F         = byte ptr -11Fh
var_11D         = byte ptr -11Dh
var_11B         = byte ptr -11Bh
var_119         = byte ptr -119h
var_117         = byte ptr -117h
var_115         = byte ptr -115h
var_113         = byte ptr -113h
var_111         = byte ptr -111h
var_10F         = byte ptr -10Fh
var_10D         = byte ptr -10Dh
var_10B         = byte ptr -10Bh
var_109         = byte ptr -109h
var_107         = byte ptr -107h
var_105         = byte ptr -105h
var_103         = byte ptr -103h
var_101         = byte ptr -101h
var_FF          = byte ptr -0FFh
var_FD          = byte ptr -0FDh
var_FB          = byte ptr -0FBh
var_F9          = byte ptr -0F9h
var_F7          = byte ptr -0F7h
var_F5          = byte ptr -0F5h
var_F3          = byte ptr -0F3h
var_F1          = byte ptr -0F1h
var_EF          = byte ptr -0EFh
var_ED          = byte ptr -0EDh
var_EB          = byte ptr -0EBh
var_E9          = byte ptr -0E9h
var_E7          = byte ptr -0E7h
var_E5          = byte ptr -0E5h
var_E3          = byte ptr -0E3h
var_E1          = byte ptr -0E1h
var_DF          = byte ptr -0DFh
var_DD          = byte ptr -0DDh
var_DB          = byte ptr -0DBh
var_D9          = byte ptr -0D9h
var_D7          = byte ptr -0D7h
var_D5          = byte ptr -0D5h
var_B9          = byte ptr -0B9h
var_9D          = byte ptr -9Dh
var_81          = byte ptr -81h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73900 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46AF20
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 170h
                mov     [ebp+var_178], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_13C], eax
                mov     ecx, [ebp+var_178]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46AF75
                mov     [ebp+var_17C], offset byte_110A50C
                jmp     short loc_46AF83
; ---------------------------------------------------------------------------

loc_46AF75:                             ; CODE XREF: sub_46AF20+47↑j
                mov     edx, [ebp+var_178]
                mov     eax, [edx]
                mov     [ebp+var_17C], eax

loc_46AF83:                             ; CODE XREF: sub_46AF20+53↑j
                push    0
                mov     ecx, [ebp+var_13C]
                push    ecx
                push    offset aTbDailymazePor ; "tb_DailyMaze_Portal"
                mov     edx, [ebp+var_17C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46AFB8
; ---------------------------------------------------------------------------

loc_46AFAF:                             ; CODE XREF: sub_46AF20+408↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46AFB8:                             ; CODE XREF: sub_46AF20+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46B32D
                lea     ecx, [ebp+var_134]
                call    sub_46B370
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_134]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_132]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_131]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_12F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_12D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_12B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_129]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_127]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_125]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_123]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_121]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_11F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_11D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_11B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_119]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_117]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_115]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_113]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_111]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_10F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_10D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_10B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_109]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_107]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_105]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_103]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_101]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_FF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_FD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_FB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_F5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_F1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_EF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_ED]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_EB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_E9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_E7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_E5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_E3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_E1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_DD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_DB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_D9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_D7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     eax, [ebp+var_D5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_B9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_9D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_81]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_134]
                push    ecx
                lea     edx, [ebp+var_134]
                push    edx
                mov     ecx, [ebp+var_178]
                add     ecx, 3A0h
                call    sub_490EA0
                mov     ecx, eax
                call    sub_46B550
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_134]
                call    sub_46B480
                jmp     loc_46AFAF
; ---------------------------------------------------------------------------

loc_46B32D:                             ; CODE XREF: sub_46AF20+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_178]
                call    read_and_verify_checksum
                mov     [ebp+var_135], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_135]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46AF20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46B370      proc near               ; CODE XREF: sub_46AF20+AA↑p
                                        ; sub_490EA0+A6↓p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73920 SIZE 00000050 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46B370
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 5Fh
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 7Bh
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 97h
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 0B3h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46B370      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46B480      proc near               ; CODE XREF: sub_46AF20+403↑p
                                        ; sub_490EA0+132↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_2C          = dword ptr -2Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73980 SIZE 00000044 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46B480
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 0B3h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 97h
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 7Bh
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 5Fh
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46B480      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46B550      proc near               ; CODE XREF: sub_46AF20+3F4↑p

var_12C         = dword ptr -12Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 12Ch
                push    esi
                mov     [ebp+var_12C], ecx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2]
                mov     [eax+2], dl
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+3]
                mov     [eax+3], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5]
                mov     [eax+5], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+7]
                mov     [eax+7], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+9]
                mov     [eax+9], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Bh]
                mov     [eax+0Bh], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Dh]
                mov     [eax+0Dh], dx
                mov     [ebp+var_4], 0
                jmp     short loc_46B5F6
; ---------------------------------------------------------------------------

loc_46B5ED:                             ; CODE XREF: sub_46B550+C5↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_46B5F6:                             ; CODE XREF: sub_46B550+9B↑j
                cmp     [ebp+var_4], 2
                jnb     short loc_46B617
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+0Bh]
                mov     [edx+ecx*2+0Bh], ax
                jmp     short loc_46B5ED
; ---------------------------------------------------------------------------

loc_46B617:                             ; CODE XREF: sub_46B550+AA↑j
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+0Fh]
                mov     [ecx+0Fh], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+11h]
                mov     [ecx+11h], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+13h]
                mov     [ecx+13h], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+15h]
                mov     [ecx+15h], ax
                mov     [ebp+var_8], 0
                jmp     short loc_46B66D
; ---------------------------------------------------------------------------

loc_46B664:                             ; CODE XREF: sub_46B550+13C↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_46B66D:                             ; CODE XREF: sub_46B550+112↑j
                cmp     [ebp+var_8], 4
                jnb     short loc_46B68E
                mov     edx, [ebp+var_8]
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     cx, [esi+ecx*2+0Fh]
                mov     [eax+edx*2+0Fh], cx
                jmp     short loc_46B664
; ---------------------------------------------------------------------------

loc_46B68E:                             ; CODE XREF: sub_46B550+121↑j
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+17h]
                mov     [edx+17h], cx
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+19h]
                mov     [edx+19h], cx
                mov     [ebp+var_C], 0
                jmp     short loc_46B6C2
; ---------------------------------------------------------------------------

loc_46B6B9:                             ; CODE XREF: sub_46B550+191↓j
                mov     edx, [ebp+var_C]
                add     edx, 1
                mov     [ebp+var_C], edx

loc_46B6C2:                             ; CODE XREF: sub_46B550+167↑j
                cmp     [ebp+var_C], 2
                jnb     short loc_46B6E3
                mov     eax, [ebp+var_C]
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+var_C]
                mov     esi, [ebp+arg_0]
                mov     dx, [esi+edx*2+17h]
                mov     [ecx+eax*2+17h], dx
                jmp     short loc_46B6B9
; ---------------------------------------------------------------------------

loc_46B6E3:                             ; CODE XREF: sub_46B550+176↑j
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1Bh]
                mov     [eax+1Bh], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1Dh]
                mov     [eax+1Dh], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1Fh]
                mov     [eax+1Fh], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+21h]
                mov     [eax+21h], dx
                mov     [ebp+var_10], 0
                jmp     short loc_46B739
; ---------------------------------------------------------------------------

loc_46B730:                             ; CODE XREF: sub_46B550+208↓j
                mov     eax, [ebp+var_10]
                add     eax, 1
                mov     [ebp+var_10], eax

loc_46B739:                             ; CODE XREF: sub_46B550+1DE↑j
                cmp     [ebp+var_10], 4
                jnb     short loc_46B75A
                mov     ecx, [ebp+var_10]
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+var_10]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+1Bh]
                mov     [edx+ecx*2+1Bh], ax
                jmp     short loc_46B730
; ---------------------------------------------------------------------------

loc_46B75A:                             ; CODE XREF: sub_46B550+1ED↑j
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+23h]
                mov     [ecx+23h], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+25h]
                mov     [ecx+25h], ax
                mov     [ebp+var_14], 0
                jmp     short loc_46B78E
; ---------------------------------------------------------------------------

loc_46B785:                             ; CODE XREF: sub_46B550+25D↓j
                mov     ecx, [ebp+var_14]
                add     ecx, 1
                mov     [ebp+var_14], ecx

loc_46B78E:                             ; CODE XREF: sub_46B550+233↑j
                cmp     [ebp+var_14], 2
                jnb     short loc_46B7AF
                mov     edx, [ebp+var_14]
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+var_14]
                mov     esi, [ebp+arg_0]
                mov     cx, [esi+ecx*2+23h]
                mov     [eax+edx*2+23h], cx
                jmp     short loc_46B785
; ---------------------------------------------------------------------------

loc_46B7AF:                             ; CODE XREF: sub_46B550+242↑j
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+27h]
                mov     [edx+27h], cx
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+29h]
                mov     [edx+29h], cx
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+2Bh]
                mov     [edx+2Bh], cx
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+2Dh]
                mov     [edx+2Dh], cx
                mov     [ebp+var_18], 0
                jmp     short loc_46B805
; ---------------------------------------------------------------------------

loc_46B7FC:                             ; CODE XREF: sub_46B550+2D4↓j
                mov     edx, [ebp+var_18]
                add     edx, 1
                mov     [ebp+var_18], edx

loc_46B805:                             ; CODE XREF: sub_46B550+2AA↑j
                cmp     [ebp+var_18], 4
                jnb     short loc_46B826
                mov     eax, [ebp+var_18]
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+var_18]
                mov     esi, [ebp+arg_0]
                mov     dx, [esi+edx*2+27h]
                mov     [ecx+eax*2+27h], dx
                jmp     short loc_46B7FC
; ---------------------------------------------------------------------------

loc_46B826:                             ; CODE XREF: sub_46B550+2B9↑j
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2Fh]
                mov     [eax+2Fh], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+31h]
                mov     [eax+31h], dx
                mov     [ebp+var_1C], 0
                jmp     short loc_46B85A
; ---------------------------------------------------------------------------

loc_46B851:                             ; CODE XREF: sub_46B550+329↓j
                mov     eax, [ebp+var_1C]
                add     eax, 1
                mov     [ebp+var_1C], eax

loc_46B85A:                             ; CODE XREF: sub_46B550+2FF↑j
                cmp     [ebp+var_1C], 2
                jnb     short loc_46B87B
                mov     ecx, [ebp+var_1C]
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+var_1C]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+2Fh]
                mov     [edx+ecx*2+2Fh], ax
                jmp     short loc_46B851
; ---------------------------------------------------------------------------

loc_46B87B:                             ; CODE XREF: sub_46B550+30E↑j
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+33h]
                mov     [ecx+33h], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+35h]
                mov     [ecx+35h], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+37h]
                mov     [ecx+37h], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+39h]
                mov     [ecx+39h], ax
                mov     [ebp+var_20], 0
                jmp     short loc_46B8D1
; ---------------------------------------------------------------------------

loc_46B8C8:                             ; CODE XREF: sub_46B550+3A0↓j
                mov     ecx, [ebp+var_20]
                add     ecx, 1
                mov     [ebp+var_20], ecx

loc_46B8D1:                             ; CODE XREF: sub_46B550+376↑j
                cmp     [ebp+var_20], 4
                jnb     short loc_46B8F2
                mov     edx, [ebp+var_20]
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+var_20]
                mov     esi, [ebp+arg_0]
                mov     cx, [esi+ecx*2+33h]
                mov     [eax+edx*2+33h], cx
                jmp     short loc_46B8C8
; ---------------------------------------------------------------------------

loc_46B8F2:                             ; CODE XREF: sub_46B550+385↑j
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+3Bh]
                mov     [edx+3Bh], cx
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+3Dh]
                mov     [edx+3Dh], cx
                mov     [ebp+var_24], 0
                jmp     short loc_46B926
; ---------------------------------------------------------------------------

loc_46B91D:                             ; CODE XREF: sub_46B550+3F5↓j
                mov     edx, [ebp+var_24]
                add     edx, 1
                mov     [ebp+var_24], edx

loc_46B926:                             ; CODE XREF: sub_46B550+3CB↑j
                cmp     [ebp+var_24], 2
                jnb     short loc_46B947
                mov     eax, [ebp+var_24]
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+var_24]
                mov     esi, [ebp+arg_0]
                mov     dx, [esi+edx*2+3Bh]
                mov     [ecx+eax*2+3Bh], dx
                jmp     short loc_46B91D
; ---------------------------------------------------------------------------

loc_46B947:                             ; CODE XREF: sub_46B550+3DA↑j
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+3Fh]
                mov     [eax+3Fh], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+41h]
                mov     [eax+41h], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+43h]
                mov     [eax+43h], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+45h]
                mov     [eax+45h], dx
                mov     [ebp+var_28], 0
                jmp     short loc_46B99D
; ---------------------------------------------------------------------------

loc_46B994:                             ; CODE XREF: sub_46B550+46C↓j
                mov     eax, [ebp+var_28]
                add     eax, 1
                mov     [ebp+var_28], eax

loc_46B99D:                             ; CODE XREF: sub_46B550+442↑j
                cmp     [ebp+var_28], 4
                jnb     short loc_46B9BE
                mov     ecx, [ebp+var_28]
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+var_28]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+3Fh]
                mov     [edx+ecx*2+3Fh], ax
                jmp     short loc_46B994
; ---------------------------------------------------------------------------

loc_46B9BE:                             ; CODE XREF: sub_46B550+451↑j
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+47h]
                mov     [ecx+47h], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+49h]
                mov     [ecx+49h], ax
                mov     [ebp+var_2C], 0
                jmp     short loc_46B9F2
; ---------------------------------------------------------------------------

loc_46B9E9:                             ; CODE XREF: sub_46B550+4C1↓j
                mov     ecx, [ebp+var_2C]
                add     ecx, 1
                mov     [ebp+var_2C], ecx

loc_46B9F2:                             ; CODE XREF: sub_46B550+497↑j
                cmp     [ebp+var_2C], 2
                jnb     short loc_46BA13
                mov     edx, [ebp+var_2C]
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+var_2C]
                mov     esi, [ebp+arg_0]
                mov     cx, [esi+ecx*2+47h]
                mov     [eax+edx*2+47h], cx
                jmp     short loc_46B9E9
; ---------------------------------------------------------------------------

loc_46BA13:                             ; CODE XREF: sub_46B550+4A6↑j
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+4Bh]
                mov     [edx+4Bh], cx
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+4Dh]
                mov     [edx+4Dh], cx
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+4Fh]
                mov     [edx+4Fh], cx
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+51h]
                mov     [edx+51h], cx
                mov     [ebp+var_30], 0
                jmp     short loc_46BA69
; ---------------------------------------------------------------------------

loc_46BA60:                             ; CODE XREF: sub_46B550+538↓j
                mov     edx, [ebp+var_30]
                add     edx, 1
                mov     [ebp+var_30], edx

loc_46BA69:                             ; CODE XREF: sub_46B550+50E↑j
                cmp     [ebp+var_30], 4
                jnb     short loc_46BA8A
                mov     eax, [ebp+var_30]
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+var_30]
                mov     esi, [ebp+arg_0]
                mov     dx, [esi+edx*2+4Bh]
                mov     [ecx+eax*2+4Bh], dx
                jmp     short loc_46BA60
; ---------------------------------------------------------------------------

loc_46BA8A:                             ; CODE XREF: sub_46B550+51D↑j
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+53h]
                mov     [eax+53h], dx
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+55h]
                mov     [eax+55h], dx
                mov     [ebp+var_34], 0
                jmp     short loc_46BABE
; ---------------------------------------------------------------------------

loc_46BAB5:                             ; CODE XREF: sub_46B550+58D↓j
                mov     eax, [ebp+var_34]
                add     eax, 1
                mov     [ebp+var_34], eax

loc_46BABE:                             ; CODE XREF: sub_46B550+563↑j
                cmp     [ebp+var_34], 2
                jnb     short loc_46BADF
                mov     ecx, [ebp+var_34]
                mov     edx, [ebp+var_12C]
                mov     eax, [ebp+var_34]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+53h]
                mov     [edx+ecx*2+53h], ax
                jmp     short loc_46BAB5
; ---------------------------------------------------------------------------

loc_46BADF:                             ; CODE XREF: sub_46B550+572↑j
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+57h]
                mov     [ecx+57h], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+59h]
                mov     [ecx+59h], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+5Bh]
                mov     [ecx+5Bh], ax
                mov     ecx, [ebp+var_12C]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+5Dh]
                mov     [ecx+5Dh], ax
                mov     [ebp+var_38], 0
                jmp     short loc_46BB35
; ---------------------------------------------------------------------------

loc_46BB2C:                             ; CODE XREF: sub_46B550+604↓j
                mov     ecx, [ebp+var_38]
                add     ecx, 1
                mov     [ebp+var_38], ecx

loc_46BB35:                             ; CODE XREF: sub_46B550+5DA↑j
                cmp     [ebp+var_38], 4
                jnb     short loc_46BB56
                mov     edx, [ebp+var_38]
                mov     eax, [ebp+var_12C]
                mov     ecx, [ebp+var_38]
                mov     esi, [ebp+arg_0]
                mov     cx, [esi+ecx*2+57h]
                mov     [eax+edx*2+57h], cx
                jmp     short loc_46BB2C
; ---------------------------------------------------------------------------

loc_46BB56:                             ; CODE XREF: sub_46B550+5E9↑j
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 5Fh
                push    eax
                mov     ecx, [ebp+var_12C]
                add     ecx, 5Fh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 7Bh
                push    edx
                mov     ecx, [ebp+var_12C]
                add     ecx, 7Bh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 97h
                push    ecx
                mov     ecx, [ebp+var_12C]
                add     ecx, 97h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0B3h
                push    eax
                mov     ecx, [ebp+var_12C]
                add     ecx, 0B3h
                call    sub_4A0090
                mov     eax, [ebp+var_12C]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46B550      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46BBF0      proc near               ; CODE XREF: sub_45E870+51B↑p

var_C8          = dword ptr -0C8h
var_C4          = dword ptr -0C4h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0BCh
                mov     [ebp+var_C4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_C4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46BC42
                mov     [ebp+var_C8], offset byte_110A50C
                jmp     short loc_46BC50
; ---------------------------------------------------------------------------

loc_46BC42:                             ; CODE XREF: sub_46BBF0+44↑j
                mov     edx, [ebp+var_C4]
                mov     eax, [edx]
                mov     [ebp+var_C8], eax

loc_46BC50:                             ; CODE XREF: sub_46BBF0+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbDeckBonus ; "tb_Deck_Bonus"
                mov     edx, [ebp+var_C8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46BC82
; ---------------------------------------------------------------------------

loc_46BC79:                             ; CODE XREF: sub_46BBF0+112↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46BC82:                             ; CODE XREF: sub_46BBF0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_46BD07
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6C+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_6C]
                push    eax
                mov     ecx, [ebp+var_C4]
                add     ecx, 3B0h
                call    sub_4910A0
                mov     ecx, [ebp+var_6C]
                mov     [eax], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+4], edx
                mov     cx, [ebp+var_64]
                mov     [eax+8], cx
                mov     dl, [ebp+var_62]
                mov     [eax+0Ah], dl
                jmp     loc_46BC79
; ---------------------------------------------------------------------------

loc_46BD07:                             ; CODE XREF: sub_46BBF0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_C4]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46BBF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46BD40      proc near               ; CODE XREF: sub_45E870+531↑p

var_E4          = dword ptr -0E4h
var_E0          = dword ptr -0E0h
var_B4          = dword ptr -0B4h
var_AD          = byte ptr -0ADh
var_AC          = byte ptr -0ACh
var_AA          = byte ptr -0AAh
var_A6          = byte ptr -0A6h
var_A2          = byte ptr -0A2h
var_9E          = byte ptr -9Eh
var_9A          = byte ptr -9Ah
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D8h
                push    esi
                push    edi
                mov     [ebp+var_E0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_B4], eax
                mov     ecx, [ebp+var_E0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46BD97
                mov     [ebp+var_E4], offset byte_110A50C
                jmp     short loc_46BDA5
; ---------------------------------------------------------------------------

loc_46BD97:                             ; CODE XREF: sub_46BD40+49↑j
                mov     edx, [ebp+var_E0]
                mov     eax, [edx]
                mov     [ebp+var_E4], eax

loc_46BDA5:                             ; CODE XREF: sub_46BD40+55↑j
                push    0
                mov     ecx, [ebp+var_B4]
                push    ecx
                push    offset aTbDefAttack ; "tb_Def_Attack"
                mov     edx, [ebp+var_E4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46BDDA
; ---------------------------------------------------------------------------

loc_46BDD1:                             ; CODE XREF: sub_46BD40+1BF↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46BDDA:                             ; CODE XREF: sub_46BD40+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46BF04
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_AA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_96]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_92]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AC]
                push    edx
                mov     ecx, [ebp+var_E0]
                add     ecx, 3C0h
                call    sub_491210
                mov     ecx, 10h
                lea     esi, [ebp+var_AC]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_46BDD1
; ---------------------------------------------------------------------------

loc_46BF04:                             ; CODE XREF: sub_46BD40+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_E0]
                call    read_and_verify_checksum
                mov     [ebp+var_AD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_AD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_46BD40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46BF40      proc near               ; CODE XREF: sub_45E870+547↑p

var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_A8          = dword ptr -0A8h
var_A1          = byte ptr -0A1h
var_A0          = dword ptr -0A0h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_84          = byte ptr -84h
var_82          = byte ptr -82h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7D          = byte ptr -7Dh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F739D0 SIZE 0000001E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46BF40
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C8h
                mov     [ebp+var_CC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_98], eax
                mov     ecx, [ebp+var_CC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46BF95
                mov     [ebp+var_D0], offset byte_110A50C
                jmp     short loc_46BFA3
; ---------------------------------------------------------------------------

loc_46BF95:                             ; CODE XREF: sub_46BF40+47↑j
                mov     edx, [ebp+var_CC]
                mov     eax, [edx]
                mov     [ebp+var_D0], eax

loc_46BFA3:                             ; CODE XREF: sub_46BF40+53↑j
                push    0
                mov     ecx, [ebp+var_98]
                push    ecx
                push    offset aTbDefensiveWea ; "tb_Defensive_Weapon"
                mov     edx, [ebp+var_D0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46BFD8
; ---------------------------------------------------------------------------

loc_46BFCF:                             ; CODE XREF: sub_46BF40+195↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46BFD8:                             ; CODE XREF: sub_46BF40+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46C0DA
                lea     eax, [ebp+var_7D]
                mov     [ebp+var_A8], eax
                lea     ecx, [ebp+var_A1]
                mov     [ebp+var_A0], ecx
                mov     edx, [ebp+var_A8]
                mov     [ebp+var_D4], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_A8]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_86]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_90]
                push    ecx
                mov     ecx, [ebp+var_CC]
                add     ecx, 3D0h
                call    sub_491310
                mov     ecx, eax
                call    sub_46C170
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7D]
                call    sub_93E020
                jmp     loc_46BFCF
; ---------------------------------------------------------------------------

loc_46C0DA:                             ; CODE XREF: sub_46BF40+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_CC]
                call    read_and_verify_checksum
                mov     [ebp+var_91], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_91]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46BF40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46C120      proc near               ; CODE XREF: sub_46BF40+B07AA9↓j
                                        ; sub_491310+AE518E↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 13h
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46C120      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46C170      proc near               ; CODE XREF: sub_46BF40+184↑p

var_38          = dword ptr -38h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 38h
                mov     [ebp+var_38], ecx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+8]
                mov     [eax+8], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Ah]
                mov     [eax+0Ah], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Ch]
                mov     [eax+0Ch], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Eh]
                mov     [eax+0Eh], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+10h]
                mov     [eax+10h], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+12h]
                mov     [eax+12h], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 13h
                push    ecx
                mov     ecx, [ebp+var_38]
                add     ecx, 13h
                call    sub_4A0090
                mov     eax, [ebp+var_38]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46C170      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46C210      proc near               ; CODE XREF: sub_45E870+55D↑p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_9C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_6C], eax
                mov     ecx, [ebp+var_9C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46C262
                mov     [ebp+var_A0], offset byte_110A50C
                jmp     short loc_46C270
; ---------------------------------------------------------------------------

loc_46C262:                             ; CODE XREF: sub_46C210+44↑j
                mov     edx, [ebp+var_9C]
                mov     eax, [edx]
                mov     [ebp+var_A0], eax

loc_46C270:                             ; CODE XREF: sub_46C210+50↑j
                push    0
                mov     ecx, [ebp+var_6C]
                push    ecx
                push    offset aTbDisassemble ; "tb_Disassemble"
                mov     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46C2A2
; ---------------------------------------------------------------------------

loc_46C299:                             ; CODE XREF: sub_46C210+C0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46C2A2:                             ; CODE XREF: sub_46C210+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_46C2D2
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                mov     ecx, [ebp+var_9C]
                add     ecx, 3E0h
                call    sub_493610
                mov     edx, [ebp+var_64]
                mov     [eax], edx
                jmp     short loc_46C299
; ---------------------------------------------------------------------------

loc_46C2D2:                             ; CODE XREF: sub_46C210+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_9C]
                call    read_and_verify_checksum
                mov     [ebp+var_65], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_65]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46C210      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46C310      proc near               ; CODE XREF: sub_45E870+573↑p

var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_114         = dword ptr -114h
var_10D         = byte ptr -10Dh
var_10C         = byte ptr -10Ch
var_10A         = byte ptr -10Ah
var_108         = byte ptr -108h
var_106         = byte ptr -106h
var_104         = byte ptr -104h
var_E8          = byte ptr -0E8h
var_CC          = byte ptr -0CCh
var_CA          = byte ptr -0CAh
var_C6          = byte ptr -0C6h
var_C2          = byte ptr -0C2h
var_A6          = byte ptr -0A6h
var_8A          = byte ptr -8Ah
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_6C          = byte ptr -6Ch
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73A00 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46C310
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 130h
                mov     [ebp+var_138], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_114], eax
                mov     ecx, [ebp+var_138]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46C365
                mov     [ebp+var_13C], offset byte_110A50C
                jmp     short loc_46C373
; ---------------------------------------------------------------------------

loc_46C365:                             ; CODE XREF: sub_46C310+47↑j
                mov     edx, [ebp+var_138]
                mov     eax, [edx]
                mov     [ebp+var_13C], eax

loc_46C373:                             ; CODE XREF: sub_46C310+53↑j
                push    0
                mov     ecx, [ebp+var_114]
                push    ecx
                push    offset aTbDistrict ; "tb_district"
                mov     edx, [ebp+var_13C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46C3A8
; ---------------------------------------------------------------------------

loc_46C39F:                             ; CODE XREF: sub_46C310+1EB↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46C3A8:                             ; CODE XREF: sub_46C310+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46C500
                lea     ecx, [ebp+var_10C]
                call    sub_46C540
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_10C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_10A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_108]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_106]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     ecx, [ebp+var_104]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_E8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_CC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_CA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    0FFh
                lea     eax, [ebp+var_C2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_A6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_89]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    0FFh
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_10C]
                push    ecx
                lea     edx, [ebp+var_10C]
                push    edx
                mov     ecx, [ebp+var_138]
                add     ecx, 3F0h
                call    sub_491560
                mov     ecx, eax
                call    sub_46C740
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_10C]
                call    sub_46C660
                jmp     loc_46C39F
; ---------------------------------------------------------------------------

loc_46C500:                             ; CODE XREF: sub_46C310+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_138]
                call    read_and_verify_checksum
                mov     [ebp+var_10D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_10D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46C310      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46C540      proc near               ; CODE XREF: sub_46C310+AA↑p
                                        ; sub_491560+A6↓p

var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_64          = dword ptr -64h
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_2D          = byte ptr -2Dh
var_2C          = dword ptr -2Ch
var_24          = dword ptr -24h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73A20 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46C540
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 80h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                add     eax, 8
                mov     [ebp+var_24], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_24]
                mov     [ebp+var_7C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_78]
                add     eax, 24h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_2D]
                mov     [ebp+var_2C], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_80], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_78]
                add     eax, 4Ah
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_84], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_78]
                add     eax, 66h
                mov     [ebp+var_64], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_64]
                mov     [ebp+var_88], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_64]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_78]
                add     eax, 84h
                mov     [ebp+var_74], eax
                lea     ecx, [ebp+var_6D]
                mov     [ebp+var_6C], ecx
                mov     edx, [ebp+var_74]
                mov     [ebp+var_8C], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_74]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46C540      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46C660      proc near               ; CODE XREF: sub_46C310+1E6↑p
                                        ; sub_491560+132↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73A80 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46C660
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 3
                mov     eax, [ebp+var_4C]
                add     eax, 84h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_4C]
                add     ecx, 66h
                mov     [ebp+var_24], ecx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_4C]
                add     edx, 4Ah
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_4C]
                add     eax, 24h
                mov     [ebp+var_3C], eax
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_4C]
                add     ecx, 8
                mov     [ebp+var_48], ecx
                mov     [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46C660      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46C740      proc near               ; CODE XREF: sub_46C310+1D7↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2]
                mov     [eax+2], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+4]
                mov     [eax+4], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+6]
                mov     [eax+6], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 8
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 8
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 24h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 24h
                call    sub_4A0090
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+40h]
                mov     [ecx+40h], ax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+42h]
                mov     [ecx+42h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+46h]
                mov     [ecx+46h], eax
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 4Ah
                push    edx
                mov     ecx, [ebp+var_70]
                add     ecx, 4Ah
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 66h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 66h
                call    sub_4A0090
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+82h]
                mov     [edx+82h], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+83h]
                mov     [edx+83h], cl
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 84h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 84h
                call    sub_4A0090
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0A0h]
                mov     [ecx+0A0h], al
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0A1h]
                mov     [ecx+0A1h], al
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46C740      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46C880      proc near               ; CODE XREF: sub_45E870+589↑p

var_A4          = dword ptr -0A4h
var_A0          = dword ptr -0A0h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 98h
                mov     [ebp+var_A0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_7C], eax
                mov     ecx, [ebp+var_A0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46C8D2
                mov     [ebp+var_A4], offset byte_110A50C
                jmp     short loc_46C8E0
; ---------------------------------------------------------------------------

loc_46C8D2:                             ; CODE XREF: sub_46C880+44↑j
                mov     edx, [ebp+var_A0]
                mov     eax, [edx]
                mov     [ebp+var_A4], eax

loc_46C8E0:                             ; CODE XREF: sub_46C880+50↑j
                push    0
                mov     ecx, [ebp+var_7C]
                push    ecx
                push    offset aTbDistrictTran ; "tb_District_Transport"
                mov     edx, [ebp+var_A4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46C912
; ---------------------------------------------------------------------------

loc_46C909:                             ; CODE XREF: sub_46C880+168↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46C912:                             ; CODE XREF: sub_46C880+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46C9ED
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_74+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_70]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_64+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_62]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_74]
                push    eax
                mov     ecx, [ebp+var_A0]
                add     ecx, 400h
                call    sub_491760
                mov     ecx, [ebp+var_74]
                mov     [eax], ecx
                mov     edx, [ebp+var_70]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+0Ch], edx
                mov     cx, [ebp+var_64]
                mov     [eax+10h], cx
                mov     dl, [ebp+var_62]
                mov     [eax+12h], dl
                jmp     loc_46C909
; ---------------------------------------------------------------------------

loc_46C9ED:                             ; CODE XREF: sub_46C880+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_A0]
                call    read_and_verify_checksum
                mov     [ebp+var_75], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_75]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46C880      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46CA20      proc near               ; CODE XREF: sub_45E870+59F↑p

var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_A8          = dword ptr -0A8h
var_A1          = byte ptr -0A1h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_93          = byte ptr -93h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8D          = byte ptr -8Dh
var_8C          = byte ptr -8Ch
var_8B          = byte ptr -8Bh
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_6C          = byte ptr -6Ch
var_6B          = byte ptr -6Bh
var_67          = byte ptr -67h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73AE0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46CA20
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C0h
                mov     [ebp+var_C8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A8], eax
                mov     ecx, [ebp+var_C8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46CA75
                mov     [ebp+var_CC], offset byte_110A50C
                jmp     short loc_46CA83
; ---------------------------------------------------------------------------

loc_46CA75:                             ; CODE XREF: sub_46CA20+47↑j
                mov     edx, [ebp+var_C8]
                mov     eax, [edx]
                mov     [ebp+var_CC], eax

loc_46CA83:                             ; CODE XREF: sub_46CA20+53↑j
                push    0
                mov     ecx, [ebp+var_A8]
                push    ecx
                push    offset aTbDivergence ; "tb_Divergence"
                mov     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46CAB8
; ---------------------------------------------------------------------------

loc_46CAAF:                             ; CODE XREF: sub_46CA20+1C7↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46CAB8:                             ; CODE XREF: sub_46CA20+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46CBEC
                lea     ecx, [ebp+var_88]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_A0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_98]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_93]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_92]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_8D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_8C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_89]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    0FFh
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_67]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_A0]
                push    eax
                lea     ecx, [ebp+var_A0]
                push    ecx
                mov     ecx, [ebp+var_C8]
                add     ecx, 410h
                call    sub_4918E0
                mov     ecx, eax
                call    sub_46CC80
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_88]
                call    sub_93E020
                jmp     loc_46CAAF
; ---------------------------------------------------------------------------

loc_46CBEC:                             ; CODE XREF: sub_46CA20+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_C8]
                call    read_and_verify_checksum
                mov     [ebp+var_A1], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_A1]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46CA20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46CC30      proc near               ; CODE XREF: sub_46CA20+B070CE↓j
                                        ; sub_4918E0+AE4C21↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 18h
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46CC30      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46CC80      proc near               ; CODE XREF: sub_46CA20+1B3↑p

var_38          = dword ptr -38h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 38h
                mov     [ebp+var_38], ecx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+8]
                mov     [eax+8], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Ch]
                mov     [eax+0Ch], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Dh]
                mov     [eax+0Dh], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Eh]
                mov     [eax+0Eh], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+12h]
                mov     [eax+12h], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+13h]
                mov     [eax+13h], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+14h]
                mov     [eax+14h], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+15h]
                mov     [eax+15h], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+17h]
                mov     [eax+17h], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 18h
                push    ecx
                mov     ecx, [ebp+var_38]
                add     ecx, 18h
                call    sub_4A0090
                mov     edx, [ebp+var_38]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+34h]
                mov     [edx+34h], cl
                mov     edx, [ebp+var_38]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+35h]
                mov     [edx+35h], ecx
                mov     edx, [ebp+var_38]
                mov     eax, [ebp+arg_0]
                fld     dword ptr [eax+39h]
                fstp    dword ptr [edx+39h]
                mov     eax, [ebp+var_38]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46CC80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46CD60      proc near               ; CODE XREF: sub_45E870+5B5↑p

var_424         = dword ptr -424h
var_420         = dword ptr -420h
var_18C         = dword ptr -18Ch
var_185         = byte ptr -185h
var_184         = byte ptr -184h
var_182         = byte ptr -182h
var_166         = byte ptr -166h
var_14A         = byte ptr -14Ah
var_12E         = byte ptr -12Eh
var_112         = byte ptr -112h
var_F6          = byte ptr -0F6h
var_DA          = byte ptr -0DAh
var_BE          = byte ptr -0BEh
var_A2          = byte ptr -0A2h
var_86          = byte ptr -86h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73B00 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46CD60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 418h
                mov     [ebp+var_420], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_18C], eax
                mov     ecx, [ebp+var_420]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46CDB5
                mov     [ebp+var_424], offset byte_110A50C
                jmp     short loc_46CDC3
; ---------------------------------------------------------------------------

loc_46CDB5:                             ; CODE XREF: sub_46CD60+47↑j
                mov     edx, [ebp+var_420]
                mov     eax, [edx]
                mov     [ebp+var_424], eax

loc_46CDC3:                             ; CODE XREF: sub_46CD60+53↑j
                push    0
                mov     ecx, [ebp+var_18C]
                push    ecx
                push    offset aTbDropSymbol ; "Tb_Drop_Symbol"
                mov     edx, [ebp+var_424]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46CDF8
; ---------------------------------------------------------------------------

loc_46CDEF:                             ; CODE XREF: sub_46CD60+1BF↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46CDF8:                             ; CODE XREF: sub_46CD60+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46CF24
                lea     ecx, [ebp+var_184]
                call    sub_46CF60
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_184]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     ecx, [ebp+var_182]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_166]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_14A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_12E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_112]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_F6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_DA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_BE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_A2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_184]
                push    edx
                lea     eax, [ebp+var_184]
                push    eax
                mov     ecx, [ebp+var_420]
                add     ecx, 420h
                call    sub_491B40
                mov     ecx, eax
                call    sub_46D350
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_184]
                call    sub_46D1C0
                jmp     loc_46CDEF
; ---------------------------------------------------------------------------

loc_46CF24:                             ; CODE XREF: sub_46CD60+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_420]
                call    read_and_verify_checksum
                mov     [ebp+var_185], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_185]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46CD60      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46CF60      proc near               ; CODE XREF: sub_46CD60+AA↑p
                                        ; sub_491B40+A6↓p

var_E0          = dword ptr -0E0h
var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_A5          = byte ptr -0A5h
var_A4          = dword ptr -0A4h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73B20 SIZE 000000E3 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46CF60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D4h
                mov     [ebp+var_B8], ecx
                mov     eax, [ebp+var_B8]
                add     eax, 2
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_BC], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_B8]
                add     eax, 1Eh
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_C0], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_B8]
                add     eax, 3Ah
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_C4], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_B8]
                add     eax, 56h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_C8], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_B8]
                add     eax, 72h
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_CC], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_B8]
                add     eax, 8Eh
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_D0], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_B8]
                add     eax, 0AAh
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_D4], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_7C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     eax, [ebp+var_B8]
                add     eax, 0C6h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_84], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_D8], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Fh
                mov     eax, [ebp+var_B8]
                add     eax, 0E2h
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_DC], edx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 11h
                mov     eax, [ebp+var_B8]
                add     eax, 0FEh
                mov     [ebp+var_B4], eax
                lea     ecx, [ebp+var_A5]
                mov     [ebp+var_A4], ecx
                mov     edx, [ebp+var_B4]
                mov     [ebp+var_E0], edx
                mov     byte ptr [ebp+var_4], 12h
                push    0
                push    0
                mov     ecx, [ebp+var_B4]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 11h
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_B8]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46CF60      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46D1C0      proc near               ; CODE XREF: sub_46CD60+1BA↑p
                                        ; sub_491B40+132↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73C10 SIZE 000000BF BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46D1C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 8
                mov     eax, [ebp+var_58]
                add     eax, 0FEh
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 9
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 8
                mov     byte ptr [ebp+var_4], 7
                mov     ecx, [ebp+var_58]
                add     ecx, 0E2h
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     byte ptr [ebp+var_4], 6
                mov     edx, [ebp+var_58]
                add     edx, 0C6h
                mov     [ebp+var_18], edx
                mov     byte ptr [ebp+var_4], 0Bh
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 6
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_58]
                add     eax, 0AAh
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_58]
                add     ecx, 8Eh
                mov     [ebp+var_20], ecx
                mov     byte ptr [ebp+var_4], 0Dh
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     edx, [ebp+var_58]
                add     edx, 72h
                mov     [ebp+var_24], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 56h
                mov     [ebp+var_30], eax
                mov     byte ptr [ebp+var_4], 0Fh
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 3Ah
                mov     [ebp+var_3C], ecx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 1Eh
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 11h
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 2
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 12h
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46D1C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46D350      proc near               ; CODE XREF: sub_46CD60+1AB↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Eh
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ah
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 3Ah
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 56h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 56h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 72h
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 72h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 8Eh
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 8Eh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0AAh
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 0AAh
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0C6h
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 0C6h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0E2h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 0E2h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0FEh
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 0FEh
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46D350      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46D4C0      proc near               ; CODE XREF: sub_45E870+5CB↑p

var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = byte ptr -94h
var_92          = byte ptr -92h
var_90          = byte ptr -90h
var_8E          = byte ptr -8Eh
var_8D          = byte ptr -8Dh
var_8C          = byte ptr -8Ch
var_8B          = byte ptr -8Bh
var_8A          = byte ptr -8Ah
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_84          = byte ptr -84h
var_82          = byte ptr -82h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_7B          = byte ptr -7Bh
var_7A          = byte ptr -7Ah
var_79          = byte ptr -79h
var_75          = byte ptr -75h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_69          = byte ptr -69h
var_65          = byte ptr -65h
var_64          = byte ptr -64h
var_63          = byte ptr -63h
var_62          = byte ptr -62h
var_61          = byte ptr -61h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B0h
                push    esi
                push    edi
                mov     [ebp+var_B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_9C], eax
                mov     ecx, [ebp+var_B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46D517
                mov     [ebp+var_BC], offset byte_110A50C
                jmp     short loc_46D525
; ---------------------------------------------------------------------------

loc_46D517:                             ; CODE XREF: sub_46D4C0+49↑j
                mov     edx, [ebp+var_B8]
                mov     eax, [edx]
                mov     [ebp+var_BC], eax

loc_46D525:                             ; CODE XREF: sub_46D4C0+55↑j
                push    0
                mov     ecx, [ebp+var_9C]
                push    ecx
                push    offset aTbDsPoint ; "tb_DS_Point"
                mov     edx, [ebp+var_BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46D55A
; ---------------------------------------------------------------------------

loc_46D551:                             ; CODE XREF: sub_46D4C0+250↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46D55A:                             ; CODE XREF: sub_46D4C0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46D715
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_92]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_8E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_8D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_8C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_8A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_89]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_82]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_79]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_75]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_71]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_69]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_65]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_63]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_62]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_61]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_94]
                push    edx
                mov     ecx, [ebp+var_B8]
                add     ecx, 430h
                call    sub_49D360
                mov     ecx, 0Dh
                lea     esi, [ebp+var_94]
                mov     edi, eax
                rep movsd
                jmp     loc_46D551
; ---------------------------------------------------------------------------

loc_46D715:                             ; CODE XREF: sub_46D4C0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_B8]
                call    read_and_verify_checksum
                mov     [ebp+var_95], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_95]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_46D4C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46D750      proc near               ; CODE XREF: sub_45E870+5E1↑p

var_118         = dword ptr -118h
var_114         = dword ptr -114h
var_110         = dword ptr -110h
var_10C         = dword ptr -10Ch
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_82          = byte ptr -82h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_7E          = byte ptr -7Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73CE0 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46D750
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 10Ch
                mov     [ebp+var_110], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_110]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46D7A5
                mov     [ebp+var_114], offset byte_110A50C
                jmp     short loc_46D7B3
; ---------------------------------------------------------------------------

loc_46D7A5:                             ; CODE XREF: sub_46D750+47↑j
                mov     edx, [ebp+var_110]
                mov     eax, [edx]
                mov     [ebp+var_114], eax

loc_46D7B3:                             ; CODE XREF: sub_46D750+53↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbDye   ; "tb_Dye"
                mov     edx, [ebp+var_114]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46D7E8
; ---------------------------------------------------------------------------

loc_46D7DF:                             ; CODE XREF: sub_46D750+180↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46D7E8:                             ; CODE XREF: sub_46D750+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46D8D5
                lea     eax, [ebp+var_7E]
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_118], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_82]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_81]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_7E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_84]
                push    ecx
                mov     ecx, [ebp+var_110]
                add     ecx, 440h
                call    sub_491D40
                mov     ecx, eax
                call    sub_46D960
                mov     byte ptr [ebp+var_4], 0
                lea     edx, [ebp+var_7E]
                mov     [ebp+var_10C], edx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_10C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_46D7DF
; ---------------------------------------------------------------------------

loc_46D8D5:                             ; CODE XREF: sub_46D750+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_110]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46D750      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46D910      proc near               ; CODE XREF: sub_46D750+B065A9↓j
                                        ; sub_491D40+AE481B↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 6
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46D910      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46D960      proc near               ; CODE XREF: sub_46D750+157↑p

var_38          = dword ptr -38h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 38h
                mov     [ebp+var_38], ecx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2]
                mov     [eax+2], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+3]
                mov     [eax+3], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+5]
                mov     [eax+5], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 6
                push    ecx
                mov     ecx, [ebp+var_38]
                add     ecx, 6
                call    sub_4A0090
                mov     eax, [ebp+var_38]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46D960      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46D9D0      proc near               ; CODE XREF: sub_45E870+5F7↑p

var_EC          = dword ptr -0ECh
var_E8          = dword ptr -0E8h
var_BC          = dword ptr -0BCh
var_B5          = byte ptr -0B5h
var_B4          = byte ptr -0B4h
var_B2          = byte ptr -0B2h
var_AE          = byte ptr -0AEh
var_AA          = byte ptr -0AAh
var_A8          = byte ptr -0A8h
var_A6          = byte ptr -0A6h
var_A4          = byte ptr -0A4h
var_A2          = byte ptr -0A2h
var_A0          = byte ptr -0A0h
var_9E          = byte ptr -9Eh
var_9C          = byte ptr -9Ch
var_9A          = byte ptr -9Ah
var_98          = byte ptr -98h
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_91          = byte ptr -91h
var_8F          = byte ptr -8Fh
var_8D          = byte ptr -8Dh
var_8B          = byte ptr -8Bh
var_89          = byte ptr -89h
var_87          = byte ptr -87h
var_85          = byte ptr -85h
var_83          = byte ptr -83h
var_81          = byte ptr -81h
var_7F          = byte ptr -7Fh
var_7D          = byte ptr -7Dh
var_7B          = byte ptr -7Bh
var_79          = byte ptr -79h
var_77          = byte ptr -77h
var_75          = byte ptr -75h
var_73          = byte ptr -73h
var_71          = byte ptr -71h
var_6F          = byte ptr -6Fh
var_6D          = byte ptr -6Dh
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E0h
                push    esi
                push    edi
                mov     [ebp+var_E8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_BC], eax
                mov     ecx, [ebp+var_E8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46DA27
                mov     [ebp+var_EC], offset byte_110A50C
                jmp     short loc_46DA35
; ---------------------------------------------------------------------------

loc_46DA27:                             ; CODE XREF: sub_46D9D0+49↑j
                mov     edx, [ebp+var_E8]
                mov     eax, [edx]
                mov     [ebp+var_EC], eax

loc_46DA35:                             ; CODE XREF: sub_46D9D0+55↑j
                push    0
                mov     ecx, [ebp+var_BC]
                push    ecx
                push    offset aTbDyeInfo ; "tb_Dye_Info"
                mov     edx, [ebp+var_EC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46DA6A
; ---------------------------------------------------------------------------

loc_46DA61:                             ; CODE XREF: sub_46D9D0+2BC↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46DA6A:                             ; CODE XREF: sub_46D9D0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46DC91
                lea     eax, [ebp+var_B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_B2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_AA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_A8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_A2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_9E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_9A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_96]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_92]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_91]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_8F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_8D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_8B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_89]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_87]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_85]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_81]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_79]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_77]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_75]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_71]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_B4]
                push    edx
                mov     ecx, [ebp+var_E8]
                add     ecx, 450h
                call    sub_491F80
                mov     ecx, 12h
                lea     esi, [ebp+var_B4]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_46DA61
; ---------------------------------------------------------------------------

loc_46DC91:                             ; CODE XREF: sub_46D9D0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_E8]
                call    read_and_verify_checksum
                mov     [ebp+var_B5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_B5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_46D9D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46DCD0      proc near               ; CODE XREF: sub_45E870+60D↑p

var_190         = dword ptr -190h
var_18C         = dword ptr -18Ch
var_B4          = dword ptr -0B4h
var_AD          = byte ptr -0ADh
var_AC          = byte ptr -0ACh
var_AB          = byte ptr -0ABh
var_A9          = byte ptr -0A9h
var_A7          = byte ptr -0A7h
var_8B          = byte ptr -8Bh
var_6F          = byte ptr -6Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73D20 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46DCD0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 184h
                mov     [ebp+var_18C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_B4], eax
                mov     ecx, [ebp+var_18C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46DD25
                mov     [ebp+var_190], offset byte_110A50C
                jmp     short loc_46DD33
; ---------------------------------------------------------------------------

loc_46DD25:                             ; CODE XREF: sub_46DCD0+47↑j
                mov     edx, [ebp+var_18C]
                mov     eax, [edx]
                mov     [ebp+var_190], eax

loc_46DD33:                             ; CODE XREF: sub_46DCD0+53↑j
                push    0
                mov     ecx, [ebp+var_B4]
                push    ecx
                push    offset aTbEchelon ; "tb_Echelon"
                mov     edx, [ebp+var_190]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46DD68
; ---------------------------------------------------------------------------

loc_46DD5F:                             ; CODE XREF: sub_46DCD0+149↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46DD68:                             ; CODE XREF: sub_46DCD0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46DE1E
                lea     ecx, [ebp+var_AC]
                call    sub_46DE60
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_AB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     eax, [ebp+var_A7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_8B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_AC]
                push    ecx
                mov     ecx, [ebp+var_18C]
                add     ecx, 460h
                call    sub_492080
                mov     ecx, eax
                call    sub_46DF70
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_AC]
                call    sub_46DEF0
                jmp     loc_46DD5F
; ---------------------------------------------------------------------------

loc_46DE1E:                             ; CODE XREF: sub_46DCD0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_18C]
                call    read_and_verify_checksum
                mov     [ebp+var_AD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_AD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46DCD0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46DE60      proc near               ; CODE XREF: sub_46DCD0+AA↑p
                                        ; sub_492080+A6↓p ...

var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_31          = byte ptr -31h
var_30          = dword ptr -30h
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73D40 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46DE60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 44h
                mov     [ebp+var_48], ecx
                mov     eax, [ebp+var_48]
                add     eax, 5
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_4C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_48]
                add     eax, 21h
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_31]
                mov     [ebp+var_30], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_50], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46DE60      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46DEF0      proc near               ; CODE XREF: sub_46DCD0+144↑p
                                        ; sub_492080+124↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73D70 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46DEF0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 21h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 5
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46DEF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46DF70      proc near               ; CODE XREF: sub_46DCD0+135↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1]
                mov     [eax+1], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+3]
                mov     [eax+3], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 5
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 5
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 21h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 21h
                call    sub_4A0090
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+3Dh]
                mov     [ecx+3Dh], eax
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46DF70      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46DFF0      proc near               ; CODE XREF: sub_45E870+623↑p

var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C8h
                mov     [ebp+var_D0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_D0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46E042
                mov     [ebp+var_D4], offset byte_110A50C
                jmp     short loc_46E050
; ---------------------------------------------------------------------------

loc_46E042:                             ; CODE XREF: sub_46DFF0+44↑j
                mov     edx, [ebp+var_D0]
                mov     eax, [edx]
                mov     [ebp+var_D4], eax

loc_46E050:                             ; CODE XREF: sub_46DFF0+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbEventConditi ; "tb_Event_Condition"
                mov     edx, [ebp+var_D4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46E082
; ---------------------------------------------------------------------------

loc_46E079:                             ; CODE XREF: sub_46DFF0+10E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46E082:                             ; CODE XREF: sub_46DFF0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_46E103
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C+3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_70]
                push    eax
                mov     ecx, [ebp+var_D0]
                add     ecx, 470h
                call    sub_492280
                mov     ecx, [ebp+var_70]
                mov     [eax], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_68]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+0Ch], edx
                jmp     loc_46E079
; ---------------------------------------------------------------------------

loc_46E103:                             ; CODE XREF: sub_46DFF0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_D0]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46DFF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46E140      proc near               ; CODE XREF: sub_45E870+639↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46E192
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_46E1A0
; ---------------------------------------------------------------------------

loc_46E192:                             ; CODE XREF: sub_46E140+44↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_46E1A0:                             ; CODE XREF: sub_46E140+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbFaction ; "tb_Faction"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46E1D2
; ---------------------------------------------------------------------------

loc_46E1C9:                             ; CODE XREF: sub_46E140+F2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46E1D2:                             ; CODE XREF: sub_46E140+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_46E234
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_64+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_62]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_68]
                push    ecx
                mov     ecx, [ebp+var_AC]
                add     ecx, 480h
                call    sub_492340
                mov     edx, [ebp+var_68]
                mov     [eax], edx
                mov     cx, [ebp+var_64]
                mov     [eax+4], cx
                mov     dl, [ebp+var_62]
                mov     [eax+6], dl
                jmp     short loc_46E1C9
; ---------------------------------------------------------------------------

loc_46E234:                             ; CODE XREF: sub_46E140+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46E140      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46E270      proc near               ; CODE XREF: sub_45E870+64F↑p

var_F4          = dword ptr -0F4h
var_F0          = dword ptr -0F0h
var_C4          = dword ptr -0C4h
var_BD          = byte ptr -0BDh
var_BC          = byte ptr -0BCh
var_B8          = byte ptr -0B8h
var_B4          = byte ptr -0B4h
var_B0          = byte ptr -0B0h
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E8h
                push    esi
                push    edi
                mov     [ebp+var_F0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_C4], eax
                mov     ecx, [ebp+var_F0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46E2C7
                mov     [ebp+var_F4], offset byte_110A50C
                jmp     short loc_46E2D5
; ---------------------------------------------------------------------------

loc_46E2C7:                             ; CODE XREF: sub_46E270+49↑j
                mov     edx, [ebp+var_F0]
                mov     eax, [edx]
                mov     [ebp+var_F4], eax

loc_46E2D5:                             ; CODE XREF: sub_46E270+55↑j
                push    0
                mov     ecx, [ebp+var_C4]
                push    ecx
                push    offset aTbFragmentExch ; "tb_Fragment_Exchange"
                mov     edx, [ebp+var_F4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46E30A
; ---------------------------------------------------------------------------

loc_46E301:                             ; CODE XREF: sub_46E270+202↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46E30A:                             ; CODE XREF: sub_46E270+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46E477
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_BC]
                push    ecx
                mov     ecx, [ebp+var_F0]
                add     ecx, 490h
                call    sub_492400
                mov     ecx, 16h
                lea     esi, [ebp+var_BC]
                mov     edi, eax
                rep movsd
                jmp     loc_46E301
; ---------------------------------------------------------------------------

loc_46E477:                             ; CODE XREF: sub_46E270+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_F0]
                call    read_and_verify_checksum
                mov     [ebp+var_BD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_BD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_46E270      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46E4C0      proc near               ; CODE XREF: sub_45E870+665↑p

var_10C         = dword ptr -10Ch
var_108         = dword ptr -108h
var_DC          = dword ptr -0DCh
var_D5          = byte ptr -0D5h
var_D4          = byte ptr -0D4h
var_D0          = byte ptr -0D0h
var_CC          = byte ptr -0CCh
var_C8          = byte ptr -0C8h
var_C4          = byte ptr -0C4h
var_C0          = byte ptr -0C0h
var_BC          = byte ptr -0BCh
var_BA          = byte ptr -0BAh
var_B8          = byte ptr -0B8h
var_B6          = byte ptr -0B6h
var_B4          = byte ptr -0B4h
var_B2          = byte ptr -0B2h
var_AE          = byte ptr -0AEh
var_AA          = byte ptr -0AAh
var_A6          = byte ptr -0A6h
var_A2          = byte ptr -0A2h
var_9E          = byte ptr -9Eh
var_9A          = byte ptr -9Ah
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_6C          = byte ptr -6Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 100h
                push    esi
                push    edi
                mov     [ebp+var_108], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_DC], eax
                mov     ecx, [ebp+var_108]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46E517
                mov     [ebp+var_10C], offset byte_110A50C
                jmp     short loc_46E525
; ---------------------------------------------------------------------------

loc_46E517:                             ; CODE XREF: sub_46E4C0+49↑j
                mov     edx, [ebp+var_108]
                mov     eax, [edx]
                mov     [ebp+var_10C], eax

loc_46E525:                             ; CODE XREF: sub_46E4C0+55↑j
                push    0
                mov     ecx, [ebp+var_DC]
                push    ecx
                push    offset aTbFragmentExtr ; "tb_Fragment_Extraction"
                mov     edx, [ebp+var_10C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46E55A
; ---------------------------------------------------------------------------

loc_46E551:                             ; CODE XREF: sub_46E4C0+289↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46E55A:                             ; CODE XREF: sub_46E4C0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46E74E
                lea     eax, [ebp+var_D4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_BA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_B6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_B4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_B2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_AE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_96]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_92]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_71]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D4]
                push    ecx
                mov     ecx, [ebp+var_108]
                add     ecx, 4A0h
                call    sub_497EA0
                mov     ecx, 1Bh
                lea     esi, [ebp+var_D4]
                mov     edi, eax
                rep movsd
                jmp     loc_46E551
; ---------------------------------------------------------------------------

loc_46E74E:                             ; CODE XREF: sub_46E4C0+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_108]
                call    read_and_verify_checksum
                mov     [ebp+var_D5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_D5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_46E4C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46E790      proc near               ; CODE XREF: sub_45E870+67B↑p

var_12C         = dword ptr -12Ch
var_128         = dword ptr -128h
var_124         = dword ptr -124h
var_120         = dword ptr -120h
var_114         = dword ptr -114h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_63          = byte ptr -63h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73DA0 SIZE 00000026 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46E790
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 120h
                mov     [ebp+var_124], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_124]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46E7E5
                mov     [ebp+var_128], offset byte_110A50C
                jmp     short loc_46E7F3
; ---------------------------------------------------------------------------

loc_46E7E5:                             ; CODE XREF: sub_46E790+47↑j
                mov     edx, [ebp+var_124]
                mov     eax, [edx]
                mov     [ebp+var_128], eax

loc_46E7F3:                             ; CODE XREF: sub_46E790+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbFxBattlemate ; "tb_FX_BattleMaterial_Link"
                mov     edx, [ebp+var_128]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46E828
; ---------------------------------------------------------------------------

loc_46E81F:                             ; CODE XREF: sub_46E790+192↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46E828:                             ; CODE XREF: sub_46E790+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46E927
                lea     eax, [ebp+var_7F]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_12C], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_63]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_62]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_80]
                push    ecx
                mov     ecx, [ebp+var_124]
                add     ecx, 4B0h
                call    sub_492630
                mov     [ebp+var_114], eax
                mov     edx, [ebp+var_114]
                mov     al, [ebp+var_80]
                mov     [edx], al
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                lea     edx, [ebp+var_7F]
                push    edx
                mov     ecx, [ebp+var_114]
                add     ecx, 1
                call    sub_4A0090
                mov     eax, [ebp+var_114]
                mov     cl, [ebp+var_63]
                mov     [eax+1Dh], cl
                mov     edx, [ebp+var_114]
                mov     al, [ebp+var_62]
                mov     [edx+1Eh], al
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7F]
                mov     [ebp+var_120], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_120]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_46E81F
; ---------------------------------------------------------------------------

loc_46E927:                             ; CODE XREF: sub_46E790+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_124]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46E790      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46E960      proc near               ; CODE XREF: sub_45E870+691↑p

var_128         = dword ptr -128h
var_124         = dword ptr -124h
var_104         = dword ptr -104h
var_FD          = byte ptr -0FDh
var_FC          = byte ptr -0FCh
var_FA          = byte ptr -0FAh
var_F9          = byte ptr -0F9h
var_F8          = byte ptr -0F8h
var_F7          = byte ptr -0F7h
var_F3          = byte ptr -0F3h
var_F1          = byte ptr -0F1h
var_ED          = byte ptr -0EDh
var_D1          = byte ptr -0D1h
var_D0          = byte ptr -0D0h
var_CC          = byte ptr -0CCh
var_C8          = byte ptr -0C8h
var_C4          = byte ptr -0C4h
var_C0          = byte ptr -0C0h
var_A4          = byte ptr -0A4h
var_88          = byte ptr -88h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73DD0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46E960
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 11Ch
                mov     [ebp+var_124], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_104], eax
                mov     ecx, [ebp+var_124]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46E9B5
                mov     [ebp+var_128], offset byte_110A50C
                jmp     short loc_46E9C3
; ---------------------------------------------------------------------------

loc_46E9B5:                             ; CODE XREF: sub_46E960+47↑j
                mov     edx, [ebp+var_124]
                mov     eax, [edx]
                mov     [ebp+var_128], eax

loc_46E9C3:                             ; CODE XREF: sub_46E960+53↑j
                push    0
                mov     ecx, [ebp+var_104]
                push    ecx
                push    offset aTbGesture ; "tb_Gesture"
                mov     edx, [ebp+var_128]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46E9F8
; ---------------------------------------------------------------------------

loc_46E9EF:                             ; CODE XREF: sub_46E960+210↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46E9F8:                             ; CODE XREF: sub_46E960+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46EB75
                lea     ecx, [ebp+var_FC]
                call    sub_46EBB0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_FA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_F9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_F8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_F3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_ED]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_D1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_D0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_CC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_C0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_A4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_66]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_FC]
                push    ecx
                lea     edx, [ebp+var_FC]
                push    edx
                mov     ecx, [ebp+var_124]
                add     ecx, 4C0h
                call    sub_492890
                mov     ecx, eax
                call    sub_46ED80
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_FC]
                call    sub_46ECC0
                jmp     loc_46E9EF
; ---------------------------------------------------------------------------

loc_46EB75:                             ; CODE XREF: sub_46E960+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_124]
                call    read_and_verify_checksum
                mov     [ebp+var_FD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_FD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46E960      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46EBB0      proc near               ; CODE XREF: sub_46E960+AA↑p
                                        ; sub_492890+A6↓p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73DF0 SIZE 0000004D BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46EBB0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 0Fh
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 3Ch
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 58h
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 74h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46EBB0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46ECC0      proc near               ; CODE XREF: sub_46E960+20B↑p
                                        ; sub_492890+132↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_2C          = dword ptr -2Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73E50 SIZE 00000041 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46ECC0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 74h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 58h
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 3Ch
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 0Fh
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46ECC0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46ED80      proc near               ; CODE XREF: sub_46E960+1FC↑p

var_78          = dword ptr -78h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 78h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2]
                mov     [eax+2], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+3]
                mov     [eax+3], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+5]
                mov     [eax+5], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+9]
                mov     [eax+9], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Bh]
                mov     [eax+0Bh], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0Fh
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 0Fh
                call    sub_4A0090
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+2Bh]
                mov     [edx+2Bh], cl
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2Ch]
                mov     [edx+2Ch], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+30h]
                mov     [edx+30h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+34h]
                mov     [edx+34h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+38h]
                mov     [edx+38h], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 3Ch
                push    eax
                mov     ecx, [ebp+var_78]
                add     ecx, 3Ch
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 58h
                push    edx
                mov     ecx, [ebp+var_78]
                add     ecx, 58h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 74h
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 74h
                call    sub_4A0090
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+90h]
                mov     [edx+90h], ecx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+94h]
                mov     [edx+94h], cx
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+96h]
                mov     [edx+96h], cx
                mov     eax, [ebp+var_78]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46ED80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46EED0      proc near               ; CODE XREF: sub_45E870+6A7↑p

var_150         = dword ptr -150h
var_14C         = dword ptr -14Ch
var_148         = dword ptr -148h
var_144         = dword ptr -144h
var_A8          = dword ptr -0A8h
var_A1          = byte ptr -0A1h
var_A0          = dword ptr -0A0h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_8A          = byte ptr -8Ah
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73EA0 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46EED0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 144h
                mov     [ebp+var_148], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_98], eax
                mov     ecx, [ebp+var_148]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46EF25
                mov     [ebp+var_14C], offset byte_110A50C
                jmp     short loc_46EF33
; ---------------------------------------------------------------------------

loc_46EF25:                             ; CODE XREF: sub_46EED0+47↑j
                mov     edx, [ebp+var_148]
                mov     eax, [edx]
                mov     [ebp+var_14C], eax

loc_46EF33:                             ; CODE XREF: sub_46EED0+53↑j
                push    0
                mov     ecx, [ebp+var_98]
                push    ecx
                push    offset aTbHelp  ; "tb_Help"
                mov     edx, [ebp+var_14C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46EF68
; ---------------------------------------------------------------------------

loc_46EF5F:                             ; CODE XREF: sub_46EED0+192↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46EF68:                             ; CODE XREF: sub_46EED0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46F067
                lea     eax, [ebp+var_80]
                mov     [ebp+var_A8], eax
                lea     ecx, [ebp+var_A1]
                mov     [ebp+var_A0], ecx
                mov     edx, [ebp+var_A8]
                mov     [ebp+var_150], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_A8]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_90]
                push    ecx
                lea     edx, [ebp+var_90]
                push    edx
                mov     ecx, [ebp+var_148]
                add     ecx, 4D0h
                call    sub_492A90
                mov     ecx, eax
                call    sub_46F0A0
                mov     byte ptr [ebp+var_4], 0
                lea     eax, [ebp+var_80]
                mov     [ebp+var_144], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_144]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_46EF5F
; ---------------------------------------------------------------------------

loc_46F067:                             ; CODE XREF: sub_46EED0+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_148]
                call    read_and_verify_checksum
                mov     [ebp+var_91], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_91]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46EED0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F0A0      proc near               ; CODE XREF: sub_46EED0+169↑p

var_38          = dword ptr -38h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 38h
                mov     [ebp+var_38], ecx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+4]
                mov     [eax+4], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+6]
                mov     [eax+6], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+8]
                mov     [eax+8], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 10h
                push    ecx
                mov     ecx, [ebp+var_38]
                add     ecx, 10h
                call    sub_4A0090
                mov     edx, [ebp+var_38]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2Ch]
                mov     [edx+2Ch], ecx
                mov     eax, [ebp+var_38]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46F0A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F120      proc near               ; CODE XREF: sub_45E870+6BD↑p

var_1A0         = dword ptr -1A0h
var_19C         = dword ptr -19Ch
var_B4          = dword ptr -0B4h
var_AD          = byte ptr -0ADh
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_80          = byte ptr -80h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73EE0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46F120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 194h
                mov     [ebp+var_19C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_B4], eax
                mov     ecx, [ebp+var_19C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46F175
                mov     [ebp+var_1A0], offset byte_110A50C
                jmp     short loc_46F183
; ---------------------------------------------------------------------------

loc_46F175:                             ; CODE XREF: sub_46F120+47↑j
                mov     edx, [ebp+var_19C]
                mov     eax, [edx]
                mov     [ebp+var_1A0], eax

loc_46F183:                             ; CODE XREF: sub_46F120+53↑j
                push    0
                mov     ecx, [ebp+var_B4]
                push    ecx
                push    offset aTbHelpPopup ; "tb_Help_PopUp"
                mov     edx, [ebp+var_1A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46F1B8
; ---------------------------------------------------------------------------

loc_46F1AF:                             ; CODE XREF: sub_46F120+149↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46F1B8:                             ; CODE XREF: sub_46F120+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46F26E
                lea     ecx, [ebp+var_AC]
                call    sub_46F2B0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_AC]
                push    ecx
                mov     ecx, [ebp+var_19C]
                add     ecx, 4E0h
                call    sub_492CE0
                mov     ecx, eax
                call    sub_46F3C0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_AC]
                call    sub_46F340
                jmp     loc_46F1AF
; ---------------------------------------------------------------------------

loc_46F26E:                             ; CODE XREF: sub_46F120+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_19C]
                call    read_and_verify_checksum
                mov     [ebp+var_AD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_AD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46F120      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F2B0      proc near               ; CODE XREF: sub_46F120+AA↑p
                                        ; sub_492CE0+A1↓p

var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_31          = byte ptr -31h
var_30          = dword ptr -30h
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73F00 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46F2B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 44h
                mov     [ebp+var_48], ecx
                mov     eax, [ebp+var_48]
                add     eax, 10h
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_4C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_48]
                add     eax, 2Ch
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_31]
                mov     [ebp+var_30], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_50], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46F2B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F340      proc near               ; CODE XREF: sub_46F120+144↑p
                                        ; sub_492CE0+11F↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73F30 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46F340
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 2Ch
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 10h
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46F340      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F3C0      proc near               ; CODE XREF: sub_46F120+135↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+8]
                mov     [eax+8], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 10h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 10h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 2Ch
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 2Ch
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46F3C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F440      proc near               ; CODE XREF: sub_45E870+6D3↑p

var_194         = dword ptr -194h
var_190         = dword ptr -190h
var_A8          = dword ptr -0A8h
var_A1          = byte ptr -0A1h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_9B          = byte ptr -9Bh
var_99          = byte ptr -99h
var_7D          = byte ptr -7Dh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73F60 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46F440
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 188h
                mov     [ebp+var_190], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A8], eax
                mov     ecx, [ebp+var_190]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46F495
                mov     [ebp+var_194], offset byte_110A50C
                jmp     short loc_46F4A3
; ---------------------------------------------------------------------------

loc_46F495:                             ; CODE XREF: sub_46F440+47↑j
                mov     edx, [ebp+var_190]
                mov     eax, [edx]
                mov     [ebp+var_194], eax

loc_46F4A3:                             ; CODE XREF: sub_46F440+53↑j
                push    0
                mov     ecx, [ebp+var_A8]
                push    ecx
                push    offset aTbHelper ; "tb_Helper"
                mov     edx, [ebp+var_194]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46F4D8
; ---------------------------------------------------------------------------

loc_46F4CF:                             ; CODE XREF: sub_46F440+13A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46F4D8:                             ; CODE XREF: sub_46F440+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46F57F
                lea     ecx, [ebp+var_A0]
                call    sub_46F5C0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_A0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_9B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     eax, [ebp+var_99]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_7D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_A0]
                push    edx
                lea     eax, [ebp+var_A0]
                push    eax
                mov     ecx, [ebp+var_190]
                add     ecx, 4F0h
                call    sub_492ED0
                mov     ecx, eax
                call    sub_46F6D0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_A0]
                call    sub_46F650
                jmp     loc_46F4CF
; ---------------------------------------------------------------------------

loc_46F57F:                             ; CODE XREF: sub_46F440+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_190]
                call    read_and_verify_checksum
                mov     [ebp+var_A1], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_A1]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46F440      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F5C0      proc near               ; CODE XREF: sub_46F440+AA↑p
                                        ; sub_492ED0+A1↓p

var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_31          = byte ptr -31h
var_30          = dword ptr -30h
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73F80 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46F5C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 44h
                mov     [ebp+var_48], ecx
                mov     eax, [ebp+var_48]
                add     eax, 7
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_4C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_48]
                add     eax, 23h
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_31]
                mov     [ebp+var_30], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_50], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46F5C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F650      proc near               ; CODE XREF: sub_46F440+135↑p
                                        ; sub_492ED0+11F↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73FB0 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46F650
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 23h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 7
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46F650      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F6D0      proc near               ; CODE XREF: sub_46F440+126↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5]
                mov     [eax+5], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 7
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 7
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 23h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 23h
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46F6D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F740      proc near               ; CODE XREF: sub_45E870+6E9↑p

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 90h
                mov     [ebp+var_98], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_7C], eax
                mov     ecx, [ebp+var_98]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46F792
                mov     [ebp+var_9C], offset byte_110A50C
                jmp     short loc_46F7A0
; ---------------------------------------------------------------------------

loc_46F792:                             ; CODE XREF: sub_46F740+44↑j
                mov     edx, [ebp+var_98]
                mov     eax, [edx]
                mov     [ebp+var_9C], eax

loc_46F7A0:                             ; CODE XREF: sub_46F740+50↑j
                push    0
                mov     ecx, [ebp+var_7C]
                push    ecx
                push    offset aTbHelperReward ; "tb_Helper_Reward"
                mov     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46F7D2
; ---------------------------------------------------------------------------

loc_46F7C9:                             ; CODE XREF: sub_46F740+144↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46F7D2:                             ; CODE XREF: sub_46F740+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46F889
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_74+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_74+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_64+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_62]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_74]
                push    eax
                mov     ecx, [ebp+var_98]
                add     ecx, 500h
                call    sub_4930C0
                mov     ecx, [ebp+var_74]
                mov     [eax], ecx
                mov     edx, [ebp+var_70]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+0Ch], edx
                mov     cx, [ebp+var_64]
                mov     [eax+10h], cx
                mov     dl, [ebp+var_62]
                mov     [eax+12h], dl
                jmp     loc_46F7C9
; ---------------------------------------------------------------------------

loc_46F889:                             ; CODE XREF: sub_46F740+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_98]
                call    read_and_verify_checksum
                mov     [ebp+var_75], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_75]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46F740      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46F8C0      proc near               ; CODE XREF: sub_45E870+6FF↑p

var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B4h
                push    esi
                push    edi
                mov     [ebp+var_BC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_BC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46F917
                mov     [ebp+var_C0], offset byte_110A50C
                jmp     short loc_46F925
; ---------------------------------------------------------------------------

loc_46F917:                             ; CODE XREF: sub_46F8C0+49↑j
                mov     edx, [ebp+var_BC]
                mov     eax, [edx]
                mov     [ebp+var_C0], eax

loc_46F925:                             ; CODE XREF: sub_46F8C0+55↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbHiddenEvent ; "tb_Hidden_Event"
                mov     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46F95A
; ---------------------------------------------------------------------------

loc_46F951:                             ; CODE XREF: sub_46F8C0+173↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46F95A:                             ; CODE XREF: sub_46F8C0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46FA38
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_88]
                push    ecx
                mov     ecx, [ebp+var_BC]
                add     ecx, 510h
                call    sub_48FEC0
                mov     ecx, 9
                lea     esi, [ebp+var_88]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_46F951
; ---------------------------------------------------------------------------

loc_46FA38:                             ; CODE XREF: sub_46F8C0+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_BC]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_46F8C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46FA80      proc near               ; CODE XREF: sub_45E870+715↑p

var_16C         = dword ptr -16Ch
var_168         = dword ptr -168h
var_144         = dword ptr -144h
var_13D         = byte ptr -13Dh
var_13C         = byte ptr -13Ch
var_13A         = byte ptr -13Ah
var_138         = byte ptr -138h
var_136         = byte ptr -136h
var_134         = byte ptr -134h
var_132         = byte ptr -132h
var_130         = byte ptr -130h
var_12E         = byte ptr -12Eh
var_12C         = byte ptr -12Ch
var_110         = byte ptr -110h
var_F4          = byte ptr -0F4h
var_D8          = byte ptr -0D8h
var_BC          = byte ptr -0BCh
var_A0          = byte ptr -0A0h
var_84          = byte ptr -84h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F73FE0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46FA80
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 160h
                mov     [ebp+var_168], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_144], eax
                mov     ecx, [ebp+var_168]
                cmp     dword ptr [ecx], 0
                jnz     short loc_46FAD5
                mov     [ebp+var_16C], offset byte_110A50C
                jmp     short loc_46FAE3
; ---------------------------------------------------------------------------

loc_46FAD5:                             ; CODE XREF: sub_46FA80+47↑j
                mov     edx, [ebp+var_168]
                mov     eax, [edx]
                mov     [ebp+var_16C], eax

loc_46FAE3:                             ; CODE XREF: sub_46FA80+53↑j
                push    0
                mov     ecx, [ebp+var_144]
                push    ecx
                push    offset aTbHitvfx ; "tb_HitVFX"
                mov     edx, [ebp+var_16C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_46FB18
; ---------------------------------------------------------------------------

loc_46FB0F:                             ; CODE XREF: sub_46FA80+1EC↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_46FB18:                             ; CODE XREF: sub_46FA80+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_46FC71
                lea     ecx, [ebp+var_13C]
                call    sub_46FCB0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_13C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_13A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_138]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_136]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_134]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_132]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_130]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_12E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_12C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_110]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_F4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_D8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_13C]
                push    eax
                lea     ecx, [ebp+var_13C]
                push    ecx
                mov     ecx, [ebp+var_168]
                add     ecx, 520h
                call    sub_4931A0
                mov     ecx, eax
                call    sub_46FF90
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_13C]
                call    sub_46FE60
                jmp     loc_46FB0F
; ---------------------------------------------------------------------------

loc_46FC71:                             ; CODE XREF: sub_46FA80+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_168]
                call    read_and_verify_checksum
                mov     [ebp+var_13D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_13D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46FA80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46FCB0      proc near               ; CODE XREF: sub_46FA80+AA↑p
                                        ; sub_4931A0+A6↓p

var_AC          = dword ptr -0ACh
var_A8          = dword ptr -0A8h
var_A4          = dword ptr -0A4h
var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_7C          = dword ptr -7Ch
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_64          = dword ptr -64h
var_5D          = byte ptr -5Dh
var_5C          = dword ptr -5Ch
var_54          = dword ptr -54h
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74000 SIZE 00000095 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46FCB0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A0h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 10h
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 2Ch
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 48h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 64h
                mov     [ebp+var_54], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_54]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_90]
                add     eax, 80h
                mov     [ebp+var_64], eax
                lea     ecx, [ebp+var_5D]
                mov     [ebp+var_5C], ecx
                mov     edx, [ebp+var_64]
                mov     [ebp+var_A4], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_64]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_90]
                add     eax, 9Ch
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_6D]
                mov     [ebp+var_6C], ecx
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_A8], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_7C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_90]
                add     eax, 0B8h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_84], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_AC], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46FCB0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46FE60      proc near               ; CODE XREF: sub_46FA80+1E7↑p
                                        ; sub_4931A0+132↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_2C          = dword ptr -2Ch
var_20          = dword ptr -20h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F740A0 SIZE 00000080 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_46FE60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 5
                mov     eax, [ebp+var_4C]
                add     eax, 0B8h
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_4C]
                add     ecx, 9Ch
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     edx, [ebp+var_4C]
                add     edx, 80h
                mov     [ebp+var_20], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     eax, [ebp+var_4C]
                add     eax, 64h
                mov     [ebp+var_2C], eax
                mov     byte ptr [ebp+var_4], 9
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_4C]
                add     ecx, 48h
                mov     [ebp+var_38], ecx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    1
                mov     ecx, [ebp+var_38]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_4C]
                add     edx, 2Ch
                mov     [ebp+var_3C], edx
                mov     byte ptr [ebp+var_4], 0Bh
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_4C]
                add     eax, 10h
                mov     [ebp+var_48], eax
                mov     [ebp+var_4], 0Ch
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_46FE60      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_46FF90      proc near               ; CODE XREF: sub_46FA80+1D8↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2]
                mov     [eax+2], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+4]
                mov     [eax+4], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+6]
                mov     [eax+6], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+8]
                mov     [eax+8], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Ah]
                mov     [eax+0Ah], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Ch]
                mov     [eax+0Ch], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]

loc_47001D:                             ; DATA XREF: ___:0105B904↓o
                                        ; ___:0105B944↓o
                mov     dx, [ecx+0Eh]
                mov     [eax+0Eh], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 10h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 10h
                call    sub_4A0090

loc_470042:                             ; DATA XREF: ___:0106D4C8↓o
                                        ; ___:0106D510↓o ...
                mov     edx, dword_102FCC8
                push    edx

loc_470049:                             ; DATA XREF: ___:010432F8↓o
                                        ; ___:01043384↓o
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 2Ch
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 2Ch

loc_47005B:                             ; DATA XREF: ___:01043968↓o
                                        ; ___:off_10523FC↓o
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx

loc_470067:                             ; DATA XREF: ___:0108F268↓o
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 48h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 48h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 64h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 64h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 80h
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 80h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 9Ch
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 9Ch
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0B8h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 0B8h
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_46FF90      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_470120      proc near               ; CODE XREF: sub_45E870+72B↑p

var_104         = dword ptr -104h
var_100         = dword ptr -100h
var_D4          = dword ptr -0D4h
var_CD          = byte ptr -0CDh
var_CC          = byte ptr -0CCh
var_CA          = byte ptr -0CAh
var_C8          = byte ptr -0C8h
var_AC          = byte ptr -0ACh
var_AA          = byte ptr -0AAh
var_A8          = byte ptr -0A8h
var_A6          = byte ptr -0A6h
var_A4          = byte ptr -0A4h
var_A2          = byte ptr -0A2h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_8B          = byte ptr -8Bh
var_8A          = byte ptr -8Ah
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_71          = byte ptr -71h
var_6F          = byte ptr -6Fh
var_6D          = byte ptr -6Dh
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74130 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_470120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0F8h
                mov     [ebp+var_100], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_D4], eax
                mov     ecx, [ebp+var_100]
                cmp     dword ptr [ecx], 0
                jnz     short loc_470175
                mov     [ebp+var_104], offset byte_110A50C
                jmp     short loc_470183
; ---------------------------------------------------------------------------

loc_470175:                             ; CODE XREF: sub_470120+47↑j
                mov     edx, [ebp+var_100]
                mov     eax, [edx]
                mov     [ebp+var_104], eax

loc_470183:                             ; CODE XREF: sub_470120+53↑j
                push    0
                mov     ecx, [ebp+var_D4]
                push    ecx
                push    offset aTbInfiniteTowe ; "tb_Infinite_Tower"
                mov     edx, [ebp+var_104]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4701B8
; ---------------------------------------------------------------------------

loc_4701AF:                             ; CODE XREF: sub_470120+288↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4701B8:                             ; CODE XREF: sub_470120+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4703AD
                lea     ecx, [ebp+var_C8]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_CC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_CA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_C8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_AA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_A6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_A4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_A0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_98]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_90]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_8A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_89]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_87]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_77]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_71]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_CC]
                push    edx
                lea     eax, [ebp+var_CC]
                push    eax
                mov     ecx, [ebp+var_100]
                add     ecx, 530h
                call    sub_4933A0
                mov     ecx, eax
                call    sub_4703F0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_C8]
                call    sub_93E020
                jmp     loc_4701AF
; ---------------------------------------------------------------------------

loc_4703AD:                             ; CODE XREF: sub_470120+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_100]
                call    read_and_verify_checksum
                mov     [ebp+var_CD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_CD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_470120      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4703F0      proc near               ; CODE XREF: sub_470120+274↑p

var_4C          = dword ptr -4Ch
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 4Ch
                push    esi
                mov     [ebp+var_4C], ecx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2]
                mov     [eax+2], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 4
                push    ecx
                mov     ecx, [ebp+var_4C]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+20h]
                mov     [edx+20h], cx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+22h]
                mov     [edx+22h], cx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+24h]
                mov     [edx+24h], cx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+26h]
                mov     [edx+26h], cx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+28h]
                mov     [edx+28h], cx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+2Ah]
                mov     [edx+2Ah], cx
                mov     [ebp+var_4], 0
                jmp     short loc_470494
; ---------------------------------------------------------------------------

loc_47048B:                             ; CODE XREF: sub_4703F0+C0↓j
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_470494:                             ; CODE XREF: sub_4703F0+99↑j
                cmp     [ebp+var_4], 5
                jnb     short loc_4704B2
                mov     eax, [ebp+var_4]
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     dx, [esi+edx*2+22h]
                mov     [ecx+eax*2+22h], dx
                jmp     short loc_47048B
; ---------------------------------------------------------------------------

loc_4704B2:                             ; CODE XREF: sub_4703F0+A8↑j
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2Ch]
                mov     [eax+2Ch], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+30h]
                mov     [eax+30h], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+34h]
                mov     [eax+34h], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+38h]
                mov     [eax+38h], edx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+3Ch]
                mov     [eax+3Ch], edx
                mov     [ebp+var_8], 0
                jmp     short loc_470500
; ---------------------------------------------------------------------------

loc_4704F7:                             ; CODE XREF: sub_4703F0+12A↓j
                mov     eax, [ebp+var_8]
                add     eax, 1
                mov     [ebp+var_8], eax

loc_470500:                             ; CODE XREF: sub_4703F0+105↑j
                cmp     [ebp+var_8], 5
                jnb     short loc_47051C
                mov     ecx, [ebp+var_8]
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+2Ch]
                mov     [edx+ecx*4+2Ch], eax
                jmp     short loc_4704F7
; ---------------------------------------------------------------------------

loc_47051C:                             ; CODE XREF: sub_4703F0+114↑j
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+40h]
                mov     [ecx+40h], al
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+41h]
                mov     [ecx+41h], al
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+42h]
                mov     [ecx+42h], al
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+43h]
                mov     [ecx+43h], al
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+44h]
                mov     [ecx+44h], al
                mov     [ebp+var_C], 0
                jmp     short loc_47056A
; ---------------------------------------------------------------------------

loc_470561:                             ; CODE XREF: sub_4703F0+192↓j
                mov     ecx, [ebp+var_C]
                add     ecx, 1
                mov     [ebp+var_C], ecx

loc_47056A:                             ; CODE XREF: sub_4703F0+16F↑j
                cmp     [ebp+var_C], 5
                jnb     short loc_470584
                mov     edx, [ebp+var_4C]
                add     edx, [ebp+var_C]
                mov     eax, [ebp+arg_0]
                add     eax, [ebp+var_C]
                mov     cl, [eax+40h]
                mov     [edx+40h], cl
                jmp     short loc_470561
; ---------------------------------------------------------------------------

loc_470584:                             ; CODE XREF: sub_4703F0+17E↑j
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+45h]
                mov     [edx+45h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+49h]
                mov     [edx+49h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+4Dh]
                mov     [edx+4Dh], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+51h]
                mov     [edx+51h], ecx
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+55h]
                mov     [edx+55h], ecx
                mov     [ebp+var_10], 0
                jmp     short loc_4705D2
; ---------------------------------------------------------------------------

loc_4705C9:                             ; CODE XREF: sub_4703F0+1FC↓j
                mov     edx, [ebp+var_10]
                add     edx, 1
                mov     [ebp+var_10], edx

loc_4705D2:                             ; CODE XREF: sub_4703F0+1D7↑j
                cmp     [ebp+var_10], 5
                jnb     short loc_4705EE
                mov     eax, [ebp+var_10]
                mov     ecx, [ebp+var_4C]
                mov     edx, [ebp+var_10]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+45h]
                mov     [ecx+eax*4+45h], edx
                jmp     short loc_4705C9
; ---------------------------------------------------------------------------

loc_4705EE:                             ; CODE XREF: sub_4703F0+1E6↑j
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+59h]
                mov     [eax+59h], dx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Bh]
                mov     [eax+5Bh], dx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Dh]
                mov     [eax+5Dh], dx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Fh]
                mov     [eax+5Fh], dx
                mov     eax, [ebp+var_4C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+61h]
                mov     [eax+61h], dx
                mov     [ebp+var_14], 0
                jmp     short loc_470646
; ---------------------------------------------------------------------------

loc_47063D:                             ; CODE XREF: sub_4703F0+272↓j
                mov     eax, [ebp+var_14]
                add     eax, 1
                mov     [ebp+var_14], eax

loc_470646:                             ; CODE XREF: sub_4703F0+24B↑j
                cmp     [ebp+var_14], 5
                jnb     short loc_470664
                mov     ecx, [ebp+var_14]
                mov     edx, [ebp+var_4C]
                mov     eax, [ebp+var_14]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+59h]
                mov     [edx+ecx*2+59h], ax
                jmp     short loc_47063D
; ---------------------------------------------------------------------------

loc_470664:                             ; CODE XREF: sub_4703F0+25A↑j
                mov     eax, [ebp+var_4C]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_4703F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_470670      proc near               ; CODE XREF: sub_45E870+741↑p

var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_AC          = dword ptr -0ACh
var_A5          = byte ptr -0A5h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D0h
                push    esi
                push    edi
                mov     [ebp+var_D8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_AC], eax
                mov     ecx, [ebp+var_D8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4706C7
                mov     [ebp+var_DC], offset byte_110A50C
                jmp     short loc_4706D5
; ---------------------------------------------------------------------------

loc_4706C7:                             ; CODE XREF: sub_470670+49↑j
                mov     edx, [ebp+var_D8]
                mov     eax, [edx]
                mov     [ebp+var_DC], eax

loc_4706D5:                             ; CODE XREF: sub_470670+55↑j
                push    0
                mov     ecx, [ebp+var_AC]
                push    ecx
                push    offset aTbInfiniteTowe_0 ; "tb_Infinite_Tower_Monster"
                mov     edx, [ebp+var_DC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47070A
; ---------------------------------------------------------------------------

loc_470701:                             ; CODE XREF: sub_470670+1E4↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47070A:                             ; CODE XREF: sub_470670+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_470859
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_66]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_A4]
                push    eax
                mov     ecx, [ebp+var_D8]
                add     ecx, 540h
                call    sub_495280
                mov     ecx, 10h
                lea     esi, [ebp+var_A4]
                mov     edi, eax
                rep movsd
                jmp     loc_470701
; ---------------------------------------------------------------------------

loc_470859:                             ; CODE XREF: sub_470670+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_D8]
                call    read_and_verify_checksum
                mov     [ebp+var_A5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_A5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_470670      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4708A0      proc near               ; CODE XREF: sub_45E870+757↑p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_9C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_6C], eax
                mov     ecx, [ebp+var_9C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4708F2
                mov     [ebp+var_A0], offset byte_110A50C
                jmp     short loc_470900
; ---------------------------------------------------------------------------

loc_4708F2:                             ; CODE XREF: sub_4708A0+44↑j
                mov     edx, [ebp+var_9C]
                mov     eax, [edx]
                mov     [ebp+var_A0], eax

loc_470900:                             ; CODE XREF: sub_4708A0+50↑j
                push    0
                mov     ecx, [ebp+var_6C]
                push    ecx
                push    offset aTbInteractionI ; "tb_Interaction_Item"
                mov     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_470932
; ---------------------------------------------------------------------------

loc_470929:                             ; CODE XREF: sub_4708A0+C0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_470932:                             ; CODE XREF: sub_4708A0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_470962
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                mov     ecx, [ebp+var_9C]
                add     ecx, 550h
                call    sub_493610
                mov     edx, [ebp+var_64]
                mov     [eax], edx
                jmp     short loc_470929
; ---------------------------------------------------------------------------

loc_470962:                             ; CODE XREF: sub_4708A0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_9C]
                call    read_and_verify_checksum
                mov     [ebp+var_65], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_65]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4708A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4709A0      proc near               ; CODE XREF: sub_45E870+76D↑p

var_23C         = dword ptr -23Ch
var_238         = dword ptr -238h
var_21C         = dword ptr -21Ch
var_215         = byte ptr -215h
var_214         = byte ptr -214h
var_210         = byte ptr -210h
var_20F         = byte ptr -20Fh
var_1F3         = byte ptr -1F3h
var_1F2         = byte ptr -1F2h
var_1EE         = byte ptr -1EEh
var_1ED         = byte ptr -1EDh
var_1EC         = byte ptr -1ECh
var_1EB         = byte ptr -1EBh
var_1CF         = byte ptr -1CFh
var_1CE         = byte ptr -1CEh
var_1CD         = byte ptr -1CDh
var_1CC         = byte ptr -1CCh
var_1C8         = byte ptr -1C8h
var_1C4         = byte ptr -1C4h
var_1C0         = byte ptr -1C0h
var_1BC         = byte ptr -1BCh
var_1B8         = byte ptr -1B8h
var_1B4         = byte ptr -1B4h
var_1B0         = byte ptr -1B0h
var_1AE         = byte ptr -1AEh
var_1AC         = byte ptr -1ACh
var_1A8         = byte ptr -1A8h
var_1A4         = byte ptr -1A4h
var_1A3         = byte ptr -1A3h
var_19F         = byte ptr -19Fh
var_19B         = byte ptr -19Bh
var_197         = byte ptr -197h
var_193         = byte ptr -193h
var_18F         = byte ptr -18Fh
var_18E         = byte ptr -18Eh
var_172         = byte ptr -172h
var_156         = byte ptr -156h
var_13A         = byte ptr -13Ah
var_11E         = byte ptr -11Eh
var_102         = byte ptr -102h
var_E6          = byte ptr -0E6h
var_CA          = byte ptr -0CAh
var_AE          = byte ptr -0AEh
var_92          = byte ptr -92h
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74150 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4709A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 230h
                mov     [ebp+var_238], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_21C], eax
                mov     ecx, [ebp+var_238]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4709F5
                mov     [ebp+var_23C], offset byte_110A50C
                jmp     short loc_470A03
; ---------------------------------------------------------------------------

loc_4709F5:                             ; CODE XREF: sub_4709A0+47↑j
                mov     edx, [ebp+var_238]
                mov     eax, [edx]
                mov     [ebp+var_23C], eax

loc_470A03:                             ; CODE XREF: sub_4709A0+53↑j
                push    0
                mov     ecx, [ebp+var_21C]
                push    ecx
                push    offset aTbInteractionO ; "tb_Interaction_Object"
                mov     edx, [ebp+var_23C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_470A38
; ---------------------------------------------------------------------------

loc_470A2F:                             ; CODE XREF: sub_4709A0+3D2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_470A38:                             ; CODE XREF: sub_4709A0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_470D77
                lea     ecx, [ebp+var_214]
                call    sub_470DB0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_214]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_210]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    0FFh
                lea     edx, [ebp+var_20F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_1F3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1F2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1EE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1ED]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1EC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    0FFh
                lea     edx, [ebp+var_1EB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_1CF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1CE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1CD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1CC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1C8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1C0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1BC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1B0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_1AE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_1AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1A8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1A4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1A3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_19F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_19B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_197]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_193]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_18F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    0FFh
                lea     eax, [ebp+var_18E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_172]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_156]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_13A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_11E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_102]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_E6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_CA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_AE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_92]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_76]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_214]
                push    edx
                lea     eax, [ebp+var_214]
                push    eax
                mov     ecx, [ebp+var_238]
                add     ecx, 560h
                call    sub_4936C0
                mov     ecx, eax
                call    sub_471270
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_214]
                call    sub_471090
                jmp     loc_470A2F
; ---------------------------------------------------------------------------

loc_470D77:                             ; CODE XREF: sub_4709A0+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_238]
                call    read_and_verify_checksum
                mov     [ebp+var_215], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_215]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4709A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_470DB0      proc near               ; CODE XREF: sub_4709A0+AA↑p
                                        ; sub_4936C0+A1↓p

var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_F8          = dword ptr -0F8h
var_F4          = dword ptr -0F4h
var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_E8          = dword ptr -0E8h
var_E4          = dword ptr -0E4h
var_E0          = dword ptr -0E0h
var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_C5          = byte ptr -0C5h
var_C4          = dword ptr -0C4h
var_BC          = dword ptr -0BCh
var_B5          = byte ptr -0B5h
var_B4          = dword ptr -0B4h
var_AC          = dword ptr -0ACh
var_A5          = byte ptr -0A5h
var_A4          = dword ptr -0A4h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74170 SIZE 00000124 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_470DB0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0F4h
                mov     [ebp+var_D0], ecx
                mov     eax, [ebp+var_D0]
                add     eax, 5
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_D4], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_D0]
                add     eax, 29h
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_D8], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_D0]
                add     eax, 86h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_DC], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_D0]
                add     eax, 0A2h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_E0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_D0]
                add     eax, 0BEh
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_E4], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_D0]
                add     eax, 0DAh
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_E8], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_D0]
                add     eax, 0F6h
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_EC], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_7C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     eax, [ebp+var_D0]
                add     eax, 112h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_84], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_F0], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Fh
                mov     eax, [ebp+var_D0]
                add     eax, 12Eh
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_F4], edx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 11h
                mov     eax, [ebp+var_D0]
                add     eax, 14Ah
                mov     [ebp+var_AC], eax
                lea     ecx, [ebp+var_A5]
                mov     [ebp+var_A4], ecx
                mov     edx, [ebp+var_AC]
                mov     [ebp+var_F8], edx
                mov     byte ptr [ebp+var_4], 12h
                push    0
                push    0
                mov     ecx, [ebp+var_AC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 13h
                mov     eax, [ebp+var_D0]
                add     eax, 166h
                mov     [ebp+var_BC], eax
                lea     ecx, [ebp+var_B5]
                mov     [ebp+var_B4], ecx
                mov     edx, [ebp+var_BC]
                mov     [ebp+var_FC], edx
                mov     byte ptr [ebp+var_4], 14h
                push    0
                push    0
                mov     ecx, [ebp+var_BC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 15h
                mov     eax, [ebp+var_D0]
                add     eax, 182h
                mov     [ebp+var_CC], eax
                lea     ecx, [ebp+var_C5]
                mov     [ebp+var_C4], ecx
                mov     edx, [ebp+var_CC]
                mov     [ebp+var_100], edx
                mov     byte ptr [ebp+var_4], 16h
                push    0
                push    0
                mov     ecx, [ebp+var_CC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 15h
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_D0]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_470DB0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_471090      proc near               ; CODE XREF: sub_4709A0+3CD↑p
                                        ; sub_4936C0+12B↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F742A0 SIZE 000000F4 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_471090
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 0Ah
                mov     eax, [ebp+var_58]
                add     eax, 182h
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 0Bh
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Ah
                mov     byte ptr [ebp+var_4], 9
                mov     ecx, [ebp+var_58]
                add     ecx, 166h
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     byte ptr [ebp+var_4], 8
                mov     edx, [ebp+var_58]
                add     edx, 14Ah
                mov     [ebp+var_18], edx
                mov     byte ptr [ebp+var_4], 0Dh
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 8
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_58]
                add     eax, 12Eh
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     byte ptr [ebp+var_4], 6
                mov     ecx, [ebp+var_58]
                add     ecx, 112h
                mov     [ebp+var_20], ecx
                mov     byte ptr [ebp+var_4], 0Fh
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 6
                mov     byte ptr [ebp+var_4], 5
                mov     edx, [ebp+var_58]
                add     edx, 0F6h
                mov     [ebp+var_24], edx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     eax, [ebp+var_58]
                add     eax, 0DAh
                mov     [ebp+var_28], eax
                mov     byte ptr [ebp+var_4], 11h
                push    0
                push    1
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     ecx, [ebp+var_58]
                add     ecx, 0BEh
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 12h
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     edx, [ebp+var_58]
                add     edx, 0A2h
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 13h
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     eax, [ebp+var_58]
                add     eax, 86h
                mov     [ebp+var_3C], eax
                mov     byte ptr [ebp+var_4], 14h
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_58]
                add     ecx, 29h
                mov     [ebp+var_48], ecx
                mov     byte ptr [ebp+var_4], 15h
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_58]
                add     edx, 5
                mov     [ebp+var_54], edx
                mov     [ebp+var_4], 16h
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_471090      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_471270      proc near               ; CODE XREF: sub_4709A0+3BE↑p

var_90          = dword ptr -90h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 90h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 5
                push    ecx
                mov     ecx, [ebp+var_90]
                add     ecx, 5
                call    sub_4A0090
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+21h]
                mov     [edx+21h], cl
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+22h]
                mov     [edx+22h], ecx
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+26h]
                mov     [edx+26h], cl
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+27h]
                mov     [edx+27h], cl
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+28h]
                mov     [edx+28h], cl
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 29h
                push    eax
                mov     ecx, [ebp+var_90]
                add     ecx, 29h
                call    sub_4A0090
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+45h]
                mov     [ecx+45h], al
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+46h]
                mov     [ecx+46h], al
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+47h]
                mov     [ecx+47h], al
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+48h]
                mov     [ecx+48h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Ch]
                mov     [ecx+4Ch], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+50h]
                mov     [ecx+50h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+54h]
                mov     [ecx+54h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+58h]
                mov     [ecx+58h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+5Ch]
                mov     [ecx+5Ch], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+60h]
                mov     [ecx+60h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+64h]
                mov     [ecx+64h], ax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+66h]
                mov     [ecx+66h], ax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+68h]
                mov     [ecx+68h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+6Ch]
                mov     [ecx+6Ch], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+70h]
                mov     [ecx+70h], al
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+71h]
                mov     [ecx+71h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+75h]
                mov     [ecx+75h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+79h]
                mov     [ecx+79h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+7Dh]
                mov     [ecx+7Dh], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+81h]
                mov     [ecx+81h], eax
                mov     ecx, [ebp+var_90]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+85h]
                mov     [ecx+85h], al
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 86h
                push    edx
                mov     ecx, [ebp+var_90]
                add     ecx, 86h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0A2h
                push    ecx
                mov     ecx, [ebp+var_90]
                add     ecx, 0A2h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0BEh
                push    eax
                mov     ecx, [ebp+var_90]
                add     ecx, 0BEh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0DAh
                push    edx
                mov     ecx, [ebp+var_90]
                add     ecx, 0DAh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0F6h
                push    ecx
                mov     ecx, [ebp+var_90]
                add     ecx, 0F6h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 112h
                push    eax
                mov     ecx, [ebp+var_90]
                add     ecx, 112h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 12Eh
                push    edx
                mov     ecx, [ebp+var_90]
                add     ecx, 12Eh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 14Ah
                push    ecx
                mov     ecx, [ebp+var_90]
                add     ecx, 14Ah
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 166h
                push    eax
                mov     ecx, [ebp+var_90]
                add     ecx, 166h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 182h
                push    edx
                mov     ecx, [ebp+var_90]
                add     ecx, 182h
                call    sub_4A0090
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+arg_0]
                fld     dword ptr [ecx+19Eh]
                fstp    dword ptr [eax+19Eh]
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+1A2h]
                mov     [edx+1A2h], cx
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+1A4h]
                mov     [edx+1A4h], cx
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+1A6h]
                mov     [edx+1A6h], cx
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+1A8h]
                mov     [edx+1A8h], cx
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+1AAh]
                mov     [edx+1AAh], cx
                mov     edx, [ebp+var_90]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+1ACh]
                mov     [edx+1ACh], cx
                mov     eax, [ebp+var_90]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_471270      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_471680      proc near               ; CODE XREF: sub_45E870+783↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_87          = byte ptr -87h
var_86          = byte ptr -86h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_73          = byte ptr -73h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_6D          = byte ptr -6Dh
var_6B          = byte ptr -6Bh
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_65          = byte ptr -65h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                push    esi
                push    edi
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4716D7
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_4716E5
; ---------------------------------------------------------------------------

loc_4716D7:                             ; CODE XREF: sub_471680+49↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_4716E5:                             ; CODE XREF: sub_471680+55↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbInvenSlotExt ; "tb_Inven_Slot_Extend"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47171A
; ---------------------------------------------------------------------------

loc_471711:                             ; CODE XREF: sub_471680+1E6↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47171A:                             ; CODE XREF: sub_471680+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47186B
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_87]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_86]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_85]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_77]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_69]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_65]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_88]
                push    ecx
                mov     ecx, [ebp+var_AC]
                add     ecx, 570h
                call    sub_4938C0
                mov     ecx, 9
                lea     esi, [ebp+var_88]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_471711
; ---------------------------------------------------------------------------

loc_47186B:                             ; CODE XREF: sub_471680+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_471680      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4718B0      proc near               ; CODE XREF: sub_45E870+799↑p

var_18C         = dword ptr -18Ch
var_188         = dword ptr -188h
var_144         = dword ptr -144h
var_13D         = byte ptr -13Dh
var_13C         = dword ptr -13Ch
var_138         = byte ptr -138h
var_134         = byte ptr -134h
var_133         = byte ptr -133h
var_132         = byte ptr -132h
var_130         = byte ptr -130h
var_12C         = byte ptr -12Ch
var_128         = byte ptr -128h
var_124         = byte ptr -124h
var_120         = word ptr -120h
var_11E         = byte ptr -11Eh
var_11D         = byte ptr -11Dh
var_119         = byte ptr -119h
var_115         = byte ptr -115h
var_111         = byte ptr -111h
var_10F         = byte ptr -10Fh
var_10E         = byte ptr -10Eh
var_10D         = byte ptr -10Dh
var_10C         = byte ptr -10Ch
var_10B         = byte ptr -10Bh
var_107         = byte ptr -107h
var_EB          = byte ptr -0EBh
var_EA          = byte ptr -0EAh
var_E9          = byte ptr -0E9h
var_E5          = byte ptr -0E5h
var_E1          = byte ptr -0E1h
var_DD          = byte ptr -0DDh
var_D9          = byte ptr -0D9h
var_D5          = byte ptr -0D5h
var_D1          = byte ptr -0D1h
var_D0          = byte ptr -0D0h
var_CF          = byte ptr -0CFh
var_CE          = byte ptr -0CEh
var_CD          = byte ptr -0CDh
var_CC          = byte ptr -0CCh
var_C8          = byte ptr -0C8h
var_C4          = byte ptr -0C4h
var_C0          = byte ptr -0C0h
var_BC          = byte ptr -0BCh
var_B8          = byte ptr -0B8h
var_B4          = byte ptr -0B4h
var_B0          = byte ptr -0B0h
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_7D          = byte ptr -7Dh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_75          = byte ptr -75h
var_74          = byte ptr -74h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F743A0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4718B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 180h
                mov     [ebp+var_188], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_144], eax
                mov     ecx, [ebp+var_188]
                cmp     dword ptr [ecx], 0
                jnz     short loc_471905
                mov     [ebp+var_18C], offset byte_110A50C
                jmp     short loc_471913
; ---------------------------------------------------------------------------

loc_471905:                             ; CODE XREF: sub_4718B0+47↑j
                mov     edx, [ebp+var_188]
                mov     eax, [edx]
                mov     [ebp+var_18C], eax

loc_471913:                             ; CODE XREF: sub_4718B0+53↑j
                push    0
                mov     ecx, [ebp+var_144]
                push    ecx
                push    offset aTbItem  ; "tb_Item"
                mov     edx, [ebp+var_18C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_471948
; ---------------------------------------------------------------------------

loc_47193F:                             ; CODE XREF: sub_4718B0+52C↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_471948:                             ; CODE XREF: sub_4718B0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_471DE1
                lea     ecx, [ebp+var_107]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_13C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_138]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_133]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_132]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_130]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_12C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_128]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_124]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_120]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                movzx   ecx, [ebp+var_120]
                cmp     ecx, 1
                jz      short loc_471A2C
                movzx   edx, [ebp+var_120]
                cmp     edx, 270Fh
                jz      short loc_471A2C
                cmp     [ebp+var_13C], 26272A93h
                jz      short loc_471A2C
                mov     eax, 3E7h
                mov     [ebp+var_120], ax

loc_471A2C:                             ; CODE XREF: sub_4718B0+153↑j
                                        ; sub_4718B0+162↑j ...
                cmp     [ebp+var_13C], 2710h
                jnz     short loc_471A44
                mov     ecx, 190h
                mov     [ebp+var_120], cx

loc_471A44:                             ; CODE XREF: sub_4718B0+186↑j
                cmp     [ebp+var_13C], 2714h
                jnz     short loc_471A5C
                mov     edx, 0FAh
                mov     [ebp+var_120], dx

loc_471A5C:                             ; CODE XREF: sub_4718B0+19E↑j
                lea     eax, [ebp+var_11E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_11D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_119]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_115]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_111]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_10F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_10E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                cmp     [ebp+var_13C], 3B2FFA63h
                jnz     short loc_471AD8
                mov     [ebp+var_10E], 0

loc_471AD8:                             ; CODE XREF: sub_4718B0+21F↑j
                lea     ecx, [ebp+var_10D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_10C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_10B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_107]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_EB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_EA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_E9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_E5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_E1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_DD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_D9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_D5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_D0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_CF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_CE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_CD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_CC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_BC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_B0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_AC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_A8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_A4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_96]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_92]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_7D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_75]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_69]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_13C]
                push    eax
                lea     ecx, [ebp+var_13C]
                push    ecx
                mov     ecx, [ebp+var_188]
                add     ecx, 580h
                call    sub_493A40
                mov     ecx, eax
                call    sub_471E70
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_107]
                call    sub_93E020
                jmp     loc_47193F
; ---------------------------------------------------------------------------

loc_471DE1:                             ; CODE XREF: sub_4718B0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_188]
                call    read_and_verify_checksum
                mov     [ebp+var_13D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_13D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4718B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_471E20      proc near               ; CODE XREF: sub_4718B0+B02AFE↓j
                                        ; sub_493A40+AE2CE1↓j ...

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 35h
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_471E20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_471E70      proc near               ; CODE XREF: sub_4718B0+518↑p

var_50          = dword ptr -50h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 50h
                push    esi
                mov     [ebp+var_50], ecx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+8]
                mov     [eax+8], dl
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+9]
                mov     [eax+9], dl
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Ah]
                mov     [eax+0Ah], dx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                mov     [eax+10h], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+14h]
                mov     [eax+14h], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+18h]
                mov     [eax+18h], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1Ch]
                mov     [eax+1Ch], dx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1Eh]
                mov     [eax+1Eh], dl
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Fh]
                mov     [eax+1Fh], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+23h]
                mov     [eax+23h], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+27h]
                mov     [eax+27h], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2Bh]
                mov     [eax+2Bh], dx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2Dh]
                mov     [eax+2Dh], dl
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2Eh]
                mov     [eax+2Eh], dl
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2Fh]
                mov     [eax+2Fh], dl
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+30h]
                mov     [eax+30h], dl
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+31h]
                mov     [eax+31h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 35h
                push    ecx
                mov     ecx, [ebp+var_50]
                add     ecx, 35h
                call    sub_4A0090
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+51h]
                mov     [edx+51h], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+52h]
                mov     [edx+52h], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+53h]
                mov     [edx+53h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+57h]
                mov     [edx+57h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+5Bh]
                mov     [edx+5Bh], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+5Fh]
                mov     [edx+5Fh], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+63h]
                mov     [edx+63h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+67h]
                mov     [edx+67h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+6Bh]
                mov     [edx+6Bh], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+6Ch]
                mov     [edx+6Ch], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+6Dh]
                mov     [edx+6Dh], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+6Eh]
                mov     [edx+6Eh], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+6Fh]
                mov     [edx+6Fh], cl
                mov     [ebp+var_4], 0
                jmp     short loc_472036
; ---------------------------------------------------------------------------

loc_47202D:                             ; CODE XREF: sub_471E70+1DE↓j
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_472036:                             ; CODE XREF: sub_471E70+1BB↑j
                cmp     [ebp+var_4], 5
                jnb     short loc_472050
                mov     eax, [ebp+var_50]
                add     eax, [ebp+var_4]
                mov     ecx, [ebp+arg_0]
                add     ecx, [ebp+var_4]
                mov     dl, [ecx+6Bh]
                mov     [eax+6Bh], dl
                jmp     short loc_47202D
; ---------------------------------------------------------------------------

loc_472050:                             ; CODE XREF: sub_471E70+1CA↑j
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+70h]
                mov     [eax+70h], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+74h]
                mov     [eax+74h], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+78h]
                mov     [eax+78h], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+7Ch]
                mov     [eax+7Ch], edx
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+80h]
                mov     [eax+80h], edx
                mov     [ebp+var_8], 0
                jmp     short loc_4720A4
; ---------------------------------------------------------------------------

loc_47209B:                             ; CODE XREF: sub_471E70+24E↓j
                mov     eax, [ebp+var_8]
                add     eax, 1
                mov     [ebp+var_8], eax

loc_4720A4:                             ; CODE XREF: sub_471E70+229↑j
                cmp     [ebp+var_8], 5
                jnb     short loc_4720C0
                mov     ecx, [ebp+var_8]
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+70h]
                mov     [edx+ecx*4+70h], eax
                jmp     short loc_47209B
; ---------------------------------------------------------------------------

loc_4720C0:                             ; CODE XREF: sub_471E70+238↑j
                mov     ecx, [ebp+var_50]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+84h]
                mov     [ecx+84h], eax
                mov     ecx, [ebp+var_50]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+88h]
                mov     [ecx+88h], eax
                mov     ecx, [ebp+var_50]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+8Ch]
                mov     [ecx+8Ch], eax
                mov     ecx, [ebp+var_50]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+90h]
                mov     [ecx+90h], eax
                mov     ecx, [ebp+var_50]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+94h]
                mov     [ecx+94h], eax
                mov     [ebp+var_C], 0
                jmp     short loc_47212C
; ---------------------------------------------------------------------------

loc_472123:                             ; CODE XREF: sub_471E70+2DC↓j
                mov     ecx, [ebp+var_C]
                add     ecx, 1
                mov     [ebp+var_C], ecx

loc_47212C:                             ; CODE XREF: sub_471E70+2B1↑j
                cmp     [ebp+var_C], 5
                jnb     short loc_47214E
                mov     edx, [ebp+var_C]
                mov     eax, [ebp+var_50]
                mov     ecx, [ebp+var_C]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+84h]
                mov     [eax+edx*4+84h], ecx
                jmp     short loc_472123
; ---------------------------------------------------------------------------

loc_47214E:                             ; CODE XREF: sub_471E70+2C0↑j
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+98h]
                mov     [edx+98h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+9Ch]
                mov     [edx+9Ch], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0A0h]
                mov     [edx+0A0h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0A4h]
                mov     [edx+0A4h], cx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0A6h]
                mov     [edx+0A6h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0AAh]
                mov     [edx+0AAh], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0AEh]
                mov     [edx+0AEh], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0B2h]
                mov     [edx+0B2h], cx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0B4h]
                mov     [edx+0B4h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0B8h]
                mov     [edx+0B8h], cx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0BAh]
                mov     [edx+0BAh], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0BEh]
                mov     [edx+0BEh], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0BFh]
                mov     [edx+0BFh], cx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C1h]
                mov     [edx+0C1h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0C5h]
                mov     [edx+0C5h], cx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0C7h]
                mov     [edx+0C7h], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0C8h]
                mov     [edx+0C8h], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C9h]
                mov     [edx+0C9h], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0CDh]
                mov     [edx+0CDh], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0CEh]
                mov     [edx+0CEh], ecx
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0D2h]
                mov     [edx+0D2h], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0D3h]
                mov     [edx+0D3h], cl
                mov     edx, [ebp+var_50]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0D4h]
                mov     [edx+0D4h], ecx
                mov     eax, [ebp+var_50]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_471E70      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_472300      proc near               ; CODE XREF: sub_45E870+7AF↑p

var_128         = dword ptr -128h
var_124         = dword ptr -124h
var_FC          = dword ptr -0FCh
var_F5          = byte ptr -0F5h
var_F4          = byte ptr -0F4h
var_F0          = byte ptr -0F0h
var_EF          = byte ptr -0EFh
var_ED          = byte ptr -0EDh
var_EC          = byte ptr -0ECh
var_EA          = byte ptr -0EAh
var_E9          = byte ptr -0E9h
var_E7          = byte ptr -0E7h
var_E6          = byte ptr -0E6h
var_E4          = byte ptr -0E4h
var_E3          = byte ptr -0E3h
var_E2          = byte ptr -0E2h
var_E1          = byte ptr -0E1h
var_E0          = byte ptr -0E0h
var_DF          = byte ptr -0DFh
var_DE          = byte ptr -0DEh
var_DC          = byte ptr -0DCh
var_DA          = byte ptr -0DAh
var_D8          = byte ptr -0D8h
var_BC          = byte ptr -0BCh
var_A0          = byte ptr -0A0h
var_84          = byte ptr -84h
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F743C0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_472300
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 11Ch
                mov     [ebp+var_124], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_FC], eax
                mov     ecx, [ebp+var_124]
                cmp     dword ptr [ecx], 0
                jnz     short loc_472355
                mov     [ebp+var_128], offset byte_110A50C
                jmp     short loc_472363
; ---------------------------------------------------------------------------

loc_472355:                             ; CODE XREF: sub_472300+47↑j
                mov     edx, [ebp+var_124]
                mov     eax, [edx]
                mov     [ebp+var_128], eax

loc_472363:                             ; CODE XREF: sub_472300+53↑j
                push    0
                mov     ecx, [ebp+var_FC]
                push    ecx
                push    offset aTbItemClassify ; "tb_Item_Classify"
                mov     edx, [ebp+var_128]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_472398
; ---------------------------------------------------------------------------

loc_47238F:                             ; CODE XREF: sub_472300+252↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_472398:                             ; CODE XREF: sub_472300+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_472557
                lea     ecx, [ebp+var_F4]
                call    sub_472590
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_F4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_F0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_EF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_ED]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_EC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_EA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_E9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_E7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_E6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_E4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_E3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_E2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_E1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_E0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_DF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_DE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_DC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_DA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     eax, [ebp+var_D8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_BC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_F4]
                push    edx
                lea     eax, [ebp+var_F4]
                push    eax
                mov     ecx, [ebp+var_124]
                add     ecx, 590h
                call    sub_493CB0
                mov     ecx, eax
                call    sub_472760
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_F4]
                call    sub_4726A0
                jmp     loc_47238F
; ---------------------------------------------------------------------------

loc_472557:                             ; CODE XREF: sub_472300+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_124]
                call    read_and_verify_checksum
                mov     [ebp+var_F5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_F5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_472300      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_472590      proc near               ; CODE XREF: sub_472300+AA↑p
                                        ; sub_493CB0+A1↓p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_472590
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 1Ch
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 38h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 54h
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 70h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_472590      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4726A0      proc near               ; CODE XREF: sub_472300+24D↑p
                                        ; sub_493CB0+12B↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_2C          = dword ptr -2Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4726A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 70h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 54h
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 38h
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 1Ch
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4726A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_472760      proc near               ; CODE XREF: sub_472300+23E↑p

var_78          = dword ptr -78h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 78h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5]
                mov     [eax+5], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+7]
                mov     [eax+7], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+8]
                mov     [eax+8], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Ah]
                mov     [eax+0Ah], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Bh]
                mov     [eax+0Bh], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Dh]
                mov     [eax+0Dh], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Eh]
                mov     [eax+0Eh], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+10h]
                mov     [eax+10h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+11h]
                mov     [eax+11h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+12h]
                mov     [eax+12h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+13h]
                mov     [eax+13h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+14h]
                mov     [eax+14h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+15h]
                mov     [eax+15h], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+16h]
                mov     [eax+16h], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+18h]
                mov     [eax+18h], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1Ah]
                mov     [eax+1Ah], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 1Ch
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 1Ch
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 38h
                push    eax
                mov     ecx, [ebp+var_78]
                add     ecx, 38h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 54h
                push    edx
                mov     ecx, [ebp+var_78]
                add     ecx, 54h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 70h
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 70h
                call    sub_4A0090
                mov     edx, [ebp+var_78]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+8Ch]
                mov     [edx+8Ch], cx
                mov     eax, [ebp+var_78]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_472760      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4728E0      proc near               ; CODE XREF: sub_45E870+7C5↑p

var_108         = dword ptr -108h
var_104         = dword ptr -104h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0FCh
                push    esi
                push    edi
                mov     [ebp+var_104], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_104]
                cmp     dword ptr [ecx], 0
                jnz     short loc_472937
                mov     [ebp+var_108], offset byte_110A50C
                jmp     short loc_472945
; ---------------------------------------------------------------------------

loc_472937:                             ; CODE XREF: sub_4728E0+49↑j
                mov     edx, [ebp+var_104]
                mov     eax, [edx]
                mov     [ebp+var_108], eax

loc_472945:                             ; CODE XREF: sub_4728E0+55↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbItemClassrew ; "tb_Item_Classreward_Link"
                mov     edx, [ebp+var_108]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47297A
; ---------------------------------------------------------------------------

loc_472971:                             ; CODE XREF: sub_4728E0+129↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47297A:                             ; CODE XREF: sub_4728E0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_472A0E
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_72]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_66]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_104]
                add     ecx, 5A0h
                call    sub_493EB0
                mov     ecx, 7
                lea     esi, [ebp+var_80]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_472971
; ---------------------------------------------------------------------------

loc_472A0E:                             ; CODE XREF: sub_4728E0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_104]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4728E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_472A50      proc near               ; CODE XREF: sub_45E870+7DB↑p

var_C8          = dword ptr -0C8h
var_C4          = dword ptr -0C4h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_65          = byte ptr -65h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0BCh
                push    esi
                push    edi
                mov     [ebp+var_C4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_98], eax
                mov     ecx, [ebp+var_C4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_472AA7
                mov     [ebp+var_C8], offset byte_110A50C
                jmp     short loc_472AB5
; ---------------------------------------------------------------------------

loc_472AA7:                             ; CODE XREF: sub_472A50+49↑j
                mov     edx, [ebp+var_C4]
                mov     eax, [edx]
                mov     [ebp+var_C8], eax

loc_472AB5:                             ; CODE XREF: sub_472A50+55↑j
                push    0
                mov     ecx, [ebp+var_98]
                push    ecx
                push    offset aTbItemCostumes ; "tb_Item_CostumeSet"
                mov     edx, [ebp+var_C8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_472AEA
; ---------------------------------------------------------------------------

loc_472AE1:                             ; CODE XREF: sub_472A50+190↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_472AEA:                             ; CODE XREF: sub_472A50+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_472BE5
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_77]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_73]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_69]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_65]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_90]
                push    eax
                mov     ecx, [ebp+var_C4]
                add     ecx, 5B0h
                call    sub_493F80
                mov     ecx, 0Ch
                lea     esi, [ebp+var_90]
                mov     edi, eax
                rep movsd
                jmp     loc_472AE1
; ---------------------------------------------------------------------------

loc_472BE5:                             ; CODE XREF: sub_472A50+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_C4]
                call    read_and_verify_checksum
                mov     [ebp+var_91], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_91]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_472A50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_472C20      proc near               ; CODE XREF: sub_45E870+7F1↑p

var_E4          = dword ptr -0E4h
var_E0          = dword ptr -0E0h
var_B4          = dword ptr -0B4h
var_AD          = byte ptr -0ADh
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A7          = byte ptr -0A7h
var_A5          = byte ptr -0A5h
var_A3          = byte ptr -0A3h
var_A1          = byte ptr -0A1h
var_9F          = byte ptr -9Fh
var_9D          = byte ptr -9Dh
var_9B          = byte ptr -9Bh
var_99          = byte ptr -99h
var_97          = byte ptr -97h
var_95          = byte ptr -95h
var_93          = byte ptr -93h
var_91          = byte ptr -91h
var_8F          = byte ptr -8Fh
var_8D          = byte ptr -8Dh
var_8B          = byte ptr -8Bh
var_89          = byte ptr -89h
var_87          = byte ptr -87h
var_85          = byte ptr -85h
var_83          = byte ptr -83h
var_81          = byte ptr -81h
var_7F          = byte ptr -7Fh
var_7D          = byte ptr -7Dh
var_7B          = byte ptr -7Bh
var_79          = byte ptr -79h
var_77          = byte ptr -77h
var_75          = byte ptr -75h
var_73          = byte ptr -73h
var_71          = byte ptr -71h
var_6F          = byte ptr -6Fh
var_6D          = byte ptr -6Dh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D8h
                push    esi
                push    edi
                mov     [ebp+var_E0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_B4], eax
                mov     ecx, [ebp+var_E0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_472C77
                mov     [ebp+var_E4], offset byte_110A50C
                jmp     short loc_472C85
; ---------------------------------------------------------------------------

loc_472C77:                             ; CODE XREF: sub_472C20+49↑j
                mov     edx, [ebp+var_E0]
                mov     eax, [edx]
                mov     [ebp+var_E4], eax

loc_472C85:                             ; CODE XREF: sub_472C20+55↑j
                push    0
                mov     ecx, [ebp+var_B4]
                push    ecx
                push    offset aTbItemCountbox ; "tb_Item_CountBox"
                mov     edx, [ebp+var_E4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_472CBA
; ---------------------------------------------------------------------------

loc_472CB1:                             ; CODE XREF: sub_472C20+290↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_472CBA:                             ; CODE XREF: sub_472C20+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_472EB5
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_A5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_A3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_9F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_9D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_9B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_99]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_97]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_95]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_93]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_91]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_8F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_8D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_8B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_89]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_85]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_81]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_79]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_77]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_75]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_71]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_AC]
                push    edx
                mov     ecx, [ebp+var_E0]
                add     ecx, 5C0h
                call    sub_494050
                mov     ecx, 10h
                lea     esi, [ebp+var_AC]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_472CB1
; ---------------------------------------------------------------------------

loc_472EB5:                             ; CODE XREF: sub_472C20+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_E0]
                call    read_and_verify_checksum
                mov     [ebp+var_AD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_AD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_472C20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_472EF0      proc near               ; CODE XREF: sub_45E870+807↑p

var_EC          = dword ptr -0ECh
var_E8          = dword ptr -0E8h
var_BC          = dword ptr -0BCh
var_B5          = byte ptr -0B5h
var_B4          = byte ptr -0B4h
var_B0          = byte ptr -0B0h
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_73          = byte ptr -73h
var_72          = byte ptr -72h
var_71          = byte ptr -71h
var_70          = byte ptr -70h
var_6F          = byte ptr -6Fh
var_6E          = byte ptr -6Eh
var_6D          = byte ptr -6Dh
var_6C          = byte ptr -6Ch
var_6B          = byte ptr -6Bh
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_68          = byte ptr -68h
var_67          = byte ptr -67h
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E0h
                push    esi
                push    edi
                mov     [ebp+var_E8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_BC], eax
                mov     ecx, [ebp+var_E8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_472F47
                mov     [ebp+var_EC], offset byte_110A50C
                jmp     short loc_472F55
; ---------------------------------------------------------------------------

loc_472F47:                             ; CODE XREF: sub_472EF0+49↑j
                mov     edx, [ebp+var_E8]
                mov     eax, [edx]
                mov     [ebp+var_EC], eax

loc_472F55:                             ; CODE XREF: sub_472EF0+55↑j
                push    0
                mov     ecx, [ebp+var_BC]
                push    ecx
                push    offset aTbItemCountbox_0 ; "tb_Item_CountBox_Group"
                mov     edx, [ebp+var_EC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_472F8A
; ---------------------------------------------------------------------------

loc_472F81:                             ; CODE XREF: sub_472EF0+26B↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_472F8A:                             ; CODE XREF: sub_472EF0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_473160
                lea     eax, [ebp+var_B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_94]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_73]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_71]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_70]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_69]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_67]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_66]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_B4]
                push    ecx
                mov     ecx, [ebp+var_E8]
                add     ecx, 5D0h
                call    sub_494140
                mov     ecx, 13h
                lea     esi, [ebp+var_B4]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_472F81
; ---------------------------------------------------------------------------

loc_473160:                             ; CODE XREF: sub_472EF0+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_E8]
                call    read_and_verify_checksum
                mov     [ebp+var_B5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_B5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_472EF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4731A0      proc near               ; CODE XREF: sub_45E870+81D↑p

var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_A8          = dword ptr -0A8h
var_A1          = byte ptr -0A1h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_9B          = byte ptr -9Bh
var_99          = byte ptr -99h
var_95          = byte ptr -95h
var_91          = byte ptr -91h
var_8D          = byte ptr -8Dh
var_89          = byte ptr -89h
var_85          = byte ptr -85h
var_81          = byte ptr -81h
var_7D          = byte ptr -7Dh
var_79          = byte ptr -79h
var_75          = byte ptr -75h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_6B          = byte ptr -6Bh
var_69          = byte ptr -69h
var_67          = byte ptr -67h
var_65          = byte ptr -65h
var_63          = byte ptr -63h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0CCh
                push    esi
                push    edi
                mov     [ebp+var_D4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A8], eax
                mov     ecx, [ebp+var_D4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4731F7
                mov     [ebp+var_D8], offset byte_110A50C
                jmp     short loc_473205
; ---------------------------------------------------------------------------

loc_4731F7:                             ; CODE XREF: sub_4731A0+49↑j
                mov     edx, [ebp+var_D4]
                mov     eax, [edx]
                mov     [ebp+var_D8], eax

loc_473205:                             ; CODE XREF: sub_4731A0+55↑j
                push    0
                mov     ecx, [ebp+var_A8]
                push    ecx
                push    offset aTbItemEvolutio ; "tb_Item_Evolution"
                mov     edx, [ebp+var_D8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47323A
; ---------------------------------------------------------------------------

loc_473231:                             ; CODE XREF: sub_4731A0+1DE↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47323A:                             ; CODE XREF: sub_4731A0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_473383
                lea     eax, [ebp+var_A0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_9B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_99]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_95]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_91]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_89]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_85]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_81]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_79]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_75]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_71]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_69]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_67]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_65]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_63]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A0]
                push    edx
                mov     ecx, [ebp+var_D4]
                add     ecx, 5E0h
                call    sub_494240
                mov     ecx, 0Fh
                lea     esi, [ebp+var_A0]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_473231
; ---------------------------------------------------------------------------

loc_473383:                             ; CODE XREF: sub_4731A0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_D4]
                call    read_and_verify_checksum
                mov     [ebp+var_A1], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_A1]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4731A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4733C0      proc near               ; CODE XREF: sub_45E870+833↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_473412
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_473420
; ---------------------------------------------------------------------------

loc_473412:                             ; CODE XREF: sub_4733C0+44↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_473420:                             ; CODE XREF: sub_4733C0+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbItemExtracti ; "tb_item_extraction"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_473452
; ---------------------------------------------------------------------------

loc_473449:                             ; CODE XREF: sub_4733C0+D2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_473452:                             ; CODE XREF: sub_4733C0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_473494
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                mov     ecx, [ebp+var_AC]
                add     ecx, 5F0h
                call    sub_494340
                mov     ecx, [ebp+var_68]
                mov     [eax], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+4], edx
                jmp     short loc_473449
; ---------------------------------------------------------------------------

loc_473494:                             ; CODE XREF: sub_4733C0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4733C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4734D0      proc near               ; CODE XREF: sub_45E870+849↑p

var_144         = dword ptr -144h
var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_124         = dword ptr -124h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_80          = byte ptr -80h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4897D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 138h
                mov     [ebp+var_13C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_13C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_473525
                mov     [ebp+var_140], offset byte_110A50C
                jmp     short loc_473533
; ---------------------------------------------------------------------------

loc_473525:                             ; CODE XREF: sub_4734D0+47↑j
                mov     edx, [ebp+var_13C]
                mov     eax, [edx]
                mov     [ebp+var_140], eax

loc_473533:                             ; CODE XREF: sub_4734D0+53↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbItemInformat ; "tb_item_information"
                mov     edx, [ebp+var_140]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_473568
; ---------------------------------------------------------------------------

loc_47355F:                             ; CODE XREF: sub_4734D0+184↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_473568:                             ; CODE XREF: sub_4734D0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_473659
                lea     eax, [ebp+var_80]
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_144], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_84]
                push    eax
                mov     ecx, [ebp+var_13C]
                add     ecx, 600h
                call    sub_4943F0
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_124]
                mov     edx, [ebp+var_84]
                mov     [ecx], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                lea     ecx, [ebp+var_80]
                push    ecx
                mov     ecx, [ebp+var_124]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, [ebp+var_124]
                mov     ax, [ebp+var_64]
                mov     [edx+20h], ax
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_80]
                mov     [ebp+var_138], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_138]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_47355F
; ---------------------------------------------------------------------------

loc_473659:                             ; CODE XREF: sub_4734D0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_13C]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4734D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4736A0      proc near               ; CODE XREF: sub_470120+B0401E↓j
                                        ; sub_4654F0+B0F816↓j ...

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F751C0 SIZE 00000008 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 4
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4736A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4736F0      proc near               ; CODE XREF: sub_45E870+85F↑p

var_230         = dword ptr -230h
var_22C         = dword ptr -22Ch
var_EC          = dword ptr -0ECh
var_E5          = byte ptr -0E5h
var_E4          = byte ptr -0E4h
var_E0          = byte ptr -0E0h
var_C4          = byte ptr -0C4h
var_A8          = byte ptr -0A8h
var_8C          = byte ptr -8Ch
var_8A          = byte ptr -8Ah
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_84          = byte ptr -84h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74430 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4736F0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 224h
                mov     [ebp+var_22C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_EC], eax
                mov     ecx, [ebp+var_22C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_473745
                mov     [ebp+var_230], offset byte_110A50C
                jmp     short loc_473753
; ---------------------------------------------------------------------------

loc_473745:                             ; CODE XREF: sub_4736F0+47↑j
                mov     edx, [ebp+var_22C]
                mov     eax, [edx]
                mov     [ebp+var_230], eax

loc_473753:                             ; CODE XREF: sub_4736F0+53↑j
                push    0
                mov     ecx, [ebp+var_EC]
                push    ecx
                push    offset aTbItemModel ; "tb_item_model"
                mov     edx, [ebp+var_230]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_473788
; ---------------------------------------------------------------------------

loc_47377F:                             ; CODE XREF: sub_4736F0+183↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_473788:                             ; CODE XREF: sub_4736F0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_473878
                lea     ecx, [ebp+var_E4]
                call    sub_4738B0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_E4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_E0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_A8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_E4]
                push    eax
                lea     ecx, [ebp+var_E4]
                push    ecx
                mov     ecx, [ebp+var_22C]
                add     ecx, 610h
                call    sub_4945C0
                mov     ecx, eax
                call    sub_473A80
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_E4]
                call    sub_4739C0
                jmp     loc_47377F
; ---------------------------------------------------------------------------

loc_473878:                             ; CODE XREF: sub_4736F0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_22C]
                call    read_and_verify_checksum
                mov     [ebp+var_E5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_E5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4736F0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4738B0      proc near               ; CODE XREF: sub_4736F0+AA↑p
                                        ; sub_4945C0+A1↓p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74450 SIZE 0000004D BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4738B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 4
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 20h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 3Ch
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 60h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4738B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4739C0      proc near               ; CODE XREF: sub_4736F0+17E↑p
                                        ; sub_4945C0+12B↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_2C          = dword ptr -2Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F744B0 SIZE 00000041 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4739C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 60h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 3Ch
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 20h
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 4
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4739C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_473A80      proc near               ; CODE XREF: sub_4736F0+16F↑p

var_7C          = dword ptr -7Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 7Ch
                push    esi
                mov     [ebp+var_7C], ecx
                mov     eax, [ebp+var_7C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 4
                push    ecx
                mov     ecx, [ebp+var_7C]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 20h
                push    eax
                mov     ecx, [ebp+var_7C]
                add     ecx, 20h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ch
                push    edx
                mov     ecx, [ebp+var_7C]
                add     ecx, 3Ch
                call    sub_4A0090
                mov     eax, [ebp+var_7C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+58h]
                mov     [eax+58h], dx
                mov     eax, [ebp+var_7C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Ah]
                mov     [eax+5Ah], dx
                mov     eax, [ebp+var_7C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Ch]
                mov     [eax+5Ch], dx
                mov     eax, [ebp+var_7C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Eh]
                mov     [eax+5Eh], dx
                mov     [ebp+var_4], 0
                jmp     short loc_473B2E
; ---------------------------------------------------------------------------

loc_473B25:                             ; CODE XREF: sub_473A80+CA↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_473B2E:                             ; CODE XREF: sub_473A80+A3↑j
                cmp     [ebp+var_4], 3
                jnb     short loc_473B4C
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_7C]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+5Ah]
                mov     [edx+ecx*2+5Ah], ax
                jmp     short loc_473B25
; ---------------------------------------------------------------------------

loc_473B4C:                             ; CODE XREF: sub_473A80+B2↑j
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 60h
                push    edx
                mov     ecx, [ebp+var_7C]
                add     ecx, 60h
                call    sub_4A0090
                mov     eax, [ebp+var_7C]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_473A80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_473B80      proc near               ; CODE XREF: sub_45E870+875↑p

var_124         = dword ptr -124h
var_120         = dword ptr -120h
var_F4          = dword ptr -0F4h
var_ED          = byte ptr -0EDh
var_EC          = byte ptr -0ECh
var_E8          = byte ptr -0E8h
var_E4          = byte ptr -0E4h
var_E0          = byte ptr -0E0h
var_DC          = byte ptr -0DCh
var_D8          = byte ptr -0D8h
var_D4          = byte ptr -0D4h
var_D0          = byte ptr -0D0h
var_CC          = byte ptr -0CCh
var_C8          = byte ptr -0C8h
var_C4          = byte ptr -0C4h
var_C0          = byte ptr -0C0h
var_BC          = byte ptr -0BCh
var_B8          = byte ptr -0B8h
var_B4          = byte ptr -0B4h
var_B0          = byte ptr -0B0h
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 118h
                push    esi
                push    edi
                mov     [ebp+var_120], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_F4], eax
                mov     ecx, [ebp+var_120]
                cmp     dword ptr [ecx], 0
                jnz     short loc_473BD7
                mov     [ebp+var_124], offset byte_110A50C
                jmp     short loc_473BE5
; ---------------------------------------------------------------------------

loc_473BD7:                             ; CODE XREF: sub_473B80+49↑j
                mov     edx, [ebp+var_120]
                mov     eax, [edx]
                mov     [ebp+var_124], eax

loc_473BE5:                             ; CODE XREF: sub_473B80+55↑j
                push    0
                mov     ecx, [ebp+var_F4]
                push    ecx
                push    offset aTbItemPackage ; "tb_Item_Package"
                mov     edx, [ebp+var_124]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_473C1A
; ---------------------------------------------------------------------------

loc_473C11:                             ; CODE XREF: sub_473B80+2B6↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_473C1A:                             ; CODE XREF: sub_473B80+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_473E3B
                lea     eax, [ebp+var_EC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_E8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_E4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_E0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_DC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_D8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_D4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_EC]
                push    ecx
                mov     ecx, [ebp+var_120]
                add     ecx, 620h
                call    sub_4947C0
                mov     ecx, 22h
                lea     esi, [ebp+var_EC]
                mov     edi, eax
                rep movsd
                jmp     loc_473C11
; ---------------------------------------------------------------------------

loc_473E3B:                             ; CODE XREF: sub_473B80+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_120]
                call    read_and_verify_checksum
                mov     [ebp+var_ED], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_ED]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_473B80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_473E80      proc near               ; CODE XREF: sub_45E870+88B↑p

var_164         = dword ptr -164h
var_160         = dword ptr -160h
var_124         = dword ptr -124h
var_11D         = byte ptr -11Dh
var_11C         = byte ptr -11Ch
var_118         = byte ptr -118h
var_117         = byte ptr -117h
var_113         = byte ptr -113h
var_10F         = byte ptr -10Fh
var_10D         = byte ptr -10Dh
var_10B         = byte ptr -10Bh
var_109         = byte ptr -109h
var_107         = byte ptr -107h
var_105         = byte ptr -105h
var_103         = byte ptr -103h
var_101         = byte ptr -101h
var_FF          = byte ptr -0FFh
var_FD          = byte ptr -0FDh
var_FB          = byte ptr -0FBh
var_F9          = byte ptr -0F9h
var_F7          = byte ptr -0F7h
var_F5          = byte ptr -0F5h
var_F3          = byte ptr -0F3h
var_F1          = byte ptr -0F1h
var_EF          = byte ptr -0EFh
var_ED          = byte ptr -0EDh
var_EB          = byte ptr -0EBh
var_E7          = byte ptr -0E7h
var_E3          = byte ptr -0E3h
var_DF          = byte ptr -0DFh
var_DB          = byte ptr -0DBh
var_D7          = byte ptr -0D7h
var_D3          = byte ptr -0D3h
var_CF          = byte ptr -0CFh
var_CB          = byte ptr -0CBh
var_C7          = byte ptr -0C7h
var_C3          = byte ptr -0C3h
var_BF          = byte ptr -0BFh
var_BB          = byte ptr -0BBh
var_B7          = byte ptr -0B7h
var_B3          = byte ptr -0B3h
var_AF          = byte ptr -0AFh
var_AB          = byte ptr -0ABh
var_A7          = byte ptr -0A7h
var_A3          = byte ptr -0A3h
var_9F          = byte ptr -9Fh
var_9B          = byte ptr -9Bh
var_97          = byte ptr -97h
var_93          = byte ptr -93h
var_8F          = byte ptr -8Fh
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 158h
                push    esi
                push    edi
                mov     [ebp+var_160], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_160]
                cmp     dword ptr [ecx], 0
                jnz     short loc_473ED7
                mov     [ebp+var_164], offset byte_110A50C
                jmp     short loc_473EE5
; ---------------------------------------------------------------------------

loc_473ED7:                             ; CODE XREF: sub_473E80+49↑j
                mov     edx, [ebp+var_160]
                mov     eax, [edx]
                mov     [ebp+var_164], eax

loc_473EE5:                             ; CODE XREF: sub_473E80+55↑j
                push    0
                mov     ecx, [ebp+var_124]
                push    ecx
                push    offset aTbItemRandombo ; "tb_Item_RandomBox"
                mov     edx, [ebp+var_164]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_473F1A
; ---------------------------------------------------------------------------

loc_473F11:                             ; CODE XREF: sub_473E80+3E9↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_473F1A:                             ; CODE XREF: sub_473E80+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47426E
                lea     eax, [ebp+var_11C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_118]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_117]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_113]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_10F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_10D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_10B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_109]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_107]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_105]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_103]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_101]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_FF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_FD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_FB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_F5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_F1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_EF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_ED]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_EB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_E7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_E3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_DB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_D7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_CF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_CB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_BB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_97]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_93]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_87]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_83]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_11C]
                push    eax
                mov     ecx, [ebp+var_160]
                add     ecx, 630h
                call    sub_494960
                mov     ecx, 2Ch
                lea     esi, [ebp+var_11C]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_473F11
; ---------------------------------------------------------------------------

loc_47426E:                             ; CODE XREF: sub_473E80+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_160]
                call    read_and_verify_checksum
                mov     [ebp+var_11D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_11D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_473E80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4742B0      proc near               ; CODE XREF: sub_45E870+8A1↑p

var_EC          = dword ptr -0ECh
var_E8          = dword ptr -0E8h
var_BC          = dword ptr -0BCh
var_B5          = byte ptr -0B5h
var_B4          = byte ptr -0B4h
var_B0          = byte ptr -0B0h
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E0h
                push    esi
                push    edi
                mov     [ebp+var_E8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_BC], eax
                mov     ecx, [ebp+var_E8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_474307
                mov     [ebp+var_EC], offset byte_110A50C
                jmp     short loc_474315
; ---------------------------------------------------------------------------

loc_474307:                             ; CODE XREF: sub_4742B0+49↑j
                mov     edx, [ebp+var_E8]
                mov     eax, [edx]
                mov     [ebp+var_EC], eax

loc_474315:                             ; CODE XREF: sub_4742B0+55↑j
                push    0
                mov     ecx, [ebp+var_BC]
                push    ecx
                push    offset aTbItemRepair ; "tb_Item_Repair"
                mov     edx, [ebp+var_EC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47434A
; ---------------------------------------------------------------------------

loc_474341:                             ; CODE XREF: sub_4742B0+20A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47434A:                             ; CODE XREF: sub_4742B0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4744BF
                lea     eax, [ebp+var_B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_AC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_A8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_A4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_94]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_70]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_B4]
                push    edx
                mov     ecx, [ebp+var_E8]
                add     ecx, 640h
                call    sub_494B00
                mov     ecx, 14h
                lea     esi, [ebp+var_B4]
                mov     edi, eax
                rep movsd
                jmp     loc_474341
; ---------------------------------------------------------------------------

loc_4744BF:                             ; CODE XREF: sub_4742B0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_E8]
                call    read_and_verify_checksum
                mov     [ebp+var_B5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_B5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4742B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_474500      proc near               ; CODE XREF: sub_45E870+8B7↑p

var_374         = dword ptr -374h
var_370         = dword ptr -370h
var_15C         = dword ptr -15Ch
var_155         = byte ptr -155h
var_154         = byte ptr -154h
var_150         = byte ptr -150h
var_134         = byte ptr -134h
var_118         = byte ptr -118h
var_FC          = byte ptr -0FCh
var_E0          = byte ptr -0E0h
var_C4          = byte ptr -0C4h
var_A8          = byte ptr -0A8h
var_A7          = byte ptr -0A7h
var_A6          = byte ptr -0A6h
var_A5          = byte ptr -0A5h
var_A4          = byte ptr -0A4h
var_A3          = byte ptr -0A3h
var_87          = byte ptr -87h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74500 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_474500
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 368h
                mov     [ebp+var_370], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_15C], eax
                mov     ecx, [ebp+var_370]
                cmp     dword ptr [ecx], 0
                jnz     short loc_474555
                mov     [ebp+var_374], offset byte_110A50C
                jmp     short loc_474563
; ---------------------------------------------------------------------------

loc_474555:                             ; CODE XREF: sub_474500+47↑j
                mov     edx, [ebp+var_370]
                mov     eax, [edx]
                mov     [ebp+var_374], eax

loc_474563:                             ; CODE XREF: sub_474500+53↑j
                push    0
                mov     ecx, [ebp+var_15C]
                push    ecx
                push    offset aTbItemScript ; "tb_item_script"
                mov     edx, [ebp+var_374]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_474598
; ---------------------------------------------------------------------------

loc_47458F:                             ; CODE XREF: sub_474500+1E2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_474598:                             ; CODE XREF: sub_474500+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4746E7
                lea     ecx, [ebp+var_154]
                call    sub_474720
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_154]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_150]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_118]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_FC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_E0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_C4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_A8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_A3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_87]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_154]
                push    edx
                lea     eax, [ebp+var_154]
                push    eax
                mov     ecx, [ebp+var_370]
                add     ecx, 650h
                call    sub_494C90
                mov     ecx, eax
                call    sub_4748C0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_154]
                call    sub_474800
                jmp     loc_47458F
; ---------------------------------------------------------------------------

loc_4746E7:                             ; CODE XREF: sub_474500+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_370]
                call    read_and_verify_checksum
                mov     [ebp+var_155], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_155]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_474500      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_474720      proc near               ; CODE XREF: sub_474500+AA↑p
                                        ; sub_494C90+A1↓p

var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_4D          = byte ptr -4Dh
var_4C          = dword ptr -4Ch
var_44          = dword ptr -44h
var_31          = byte ptr -31h
var_30          = dword ptr -30h
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74520 SIZE 00000047 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_474720
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 64h
                mov     [ebp+var_64], ecx
                mov     eax, [ebp+var_64]
                add     eax, 4
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_68], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                push    offset sub_93E020
                push    offset sub_48C660
                push    5
                push    1Ch
                mov     eax, [ebp+var_64]
                add     eax, 20h
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_64]
                add     ecx, 0B1h
                mov     [ebp+var_44], ecx
                lea     edx, [ebp+var_31]
                mov     [ebp+var_30], edx
                mov     eax, [ebp+var_44]
                mov     [ebp+var_6C], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_64]
                add     ecx, 0CDh
                mov     [ebp+var_60], ecx
                lea     edx, [ebp+var_4D]
                mov     [ebp+var_4C], edx
                mov     eax, [ebp+var_60]
                mov     [ebp+var_70], eax
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    0
                mov     ecx, [ebp+var_60]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_64]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_474720      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_474800      proc near               ; CODE XREF: sub_474500+1DD↑p
                                        ; sub_494C90+12B↓p ...

var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_30          = dword ptr -30h
var_20          = dword ptr -20h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74580 SIZE 00000047 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_474800
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 38h
                mov     [ebp+var_44], ecx
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_44]
                add     eax, 0CDh
                mov     [ebp+var_20], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_44]
                add     ecx, 0B1h
                mov     [ebp+var_30], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    5
                push    1Ch
                mov     edx, [ebp+var_44]
                add     edx, 20h
                push    edx
                call    sub_ED9E2A
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_44]
                add     eax, 4
                mov     [ebp+var_40], eax
                mov     [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_474800      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4748C0      proc near               ; CODE XREF: sub_474500+1CE↑p

var_80          = dword ptr -80h
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 80h
                mov     [ebp+var_80], ecx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 4
                push    ecx
                mov     ecx, [ebp+var_80]
                add     ecx, 4
                call    sub_4A0090
                mov     [ebp+var_4], 0
                jmp     short loc_474902
; ---------------------------------------------------------------------------

loc_4748F9:                             ; CODE XREF: sub_4748C0+70↓j
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_474902:                             ; CODE XREF: sub_4748C0+37↑j
                cmp     [ebp+var_4], 5
                jnb     short loc_474932
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+var_4]
                imul    ecx, 1Ch
                mov     edx, [ebp+arg_0]
                lea     eax, [edx+ecx+20h]
                push    eax
                mov     ecx, [ebp+var_4]
                imul    ecx, 1Ch
                mov     edx, [ebp+var_80]
                lea     ecx, [edx+ecx+20h]
                call    sub_4A0090
                jmp     short loc_4748F9
; ---------------------------------------------------------------------------

loc_474932:                             ; CODE XREF: sub_4748C0+46↑j
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0ACh]
                mov     [eax+0ACh], dl
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0ADh]
                mov     [eax+0ADh], dl
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0AEh]
                mov     [eax+0AEh], dl
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0AFh]
                mov     [eax+0AFh], dl
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0B0h]
                mov     [eax+0B0h], dl
                mov     [ebp+var_8], 0
                jmp     short loc_47499E
; ---------------------------------------------------------------------------

loc_474995:                             ; CODE XREF: sub_4748C0+FC↓j
                mov     eax, [ebp+var_8]
                add     eax, 1
                mov     [ebp+var_8], eax

loc_47499E:                             ; CODE XREF: sub_4748C0+D3↑j
                cmp     [ebp+var_8], 5
                jnb     short loc_4749BE
                mov     ecx, [ebp+var_80]
                add     ecx, [ebp+var_8]
                mov     edx, [ebp+arg_0]
                add     edx, [ebp+var_8]
                mov     al, [edx+0ACh]
                mov     [ecx+0ACh], al
                jmp     short loc_474995
; ---------------------------------------------------------------------------

loc_4749BE:                             ; CODE XREF: sub_4748C0+E2↑j
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0B1h
                push    edx
                mov     ecx, [ebp+var_80]
                add     ecx, 0B1h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0CDh
                push    ecx
                mov     ecx, [ebp+var_80]
                add     ecx, 0CDh
                call    sub_4A0090
                mov     eax, [ebp+var_80]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_4748C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_474A10      proc near               ; CODE XREF: sub_45E870+8CD↑p

var_154         = dword ptr -154h
var_150         = dword ptr -150h
var_11C         = dword ptr -11Ch
var_115         = byte ptr -115h
var_114         = byte ptr -114h
var_110         = byte ptr -110h
var_10E         = byte ptr -10Eh
var_10D         = byte ptr -10Dh
var_109         = byte ptr -109h
var_105         = byte ptr -105h
var_101         = byte ptr -101h
var_FD          = byte ptr -0FDh
var_F9          = byte ptr -0F9h
var_F5          = byte ptr -0F5h
var_F4          = byte ptr -0F4h
var_F3          = byte ptr -0F3h
var_F2          = byte ptr -0F2h
var_F1          = byte ptr -0F1h
var_F0          = byte ptr -0F0h
var_EF          = byte ptr -0EFh
var_EE          = byte ptr -0EEh
var_ED          = byte ptr -0EDh
var_EC          = byte ptr -0ECh
var_EB          = byte ptr -0EBh
var_E9          = byte ptr -0E9h
var_E7          = byte ptr -0E7h
var_E5          = byte ptr -0E5h
var_E3          = byte ptr -0E3h
var_E1          = byte ptr -0E1h
var_DD          = byte ptr -0DDh
var_D9          = byte ptr -0D9h
var_D5          = byte ptr -0D5h
var_D1          = byte ptr -0D1h
var_CD          = byte ptr -0CDh
var_CC          = byte ptr -0CCh
var_CB          = byte ptr -0CBh
var_CA          = byte ptr -0CAh
var_C9          = byte ptr -0C9h
var_C8          = byte ptr -0C8h
var_C6          = byte ptr -0C6h
var_C4          = byte ptr -0C4h
var_C2          = byte ptr -0C2h
var_C0          = byte ptr -0C0h
var_BE          = byte ptr -0BEh
var_BA          = byte ptr -0BAh
var_B6          = byte ptr -0B6h
var_B2          = byte ptr -0B2h
var_AE          = byte ptr -0AEh
var_AA          = byte ptr -0AAh
var_A9          = byte ptr -0A9h
var_A8          = byte ptr -0A8h
var_A7          = byte ptr -0A7h
var_A6          = byte ptr -0A6h
var_A5          = byte ptr -0A5h
var_A3          = byte ptr -0A3h
var_A1          = byte ptr -0A1h
var_9F          = byte ptr -9Fh
var_9D          = byte ptr -9Dh
var_9B          = byte ptr -9Bh
var_97          = byte ptr -97h
var_93          = byte ptr -93h
var_8F          = byte ptr -8Fh
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_86          = byte ptr -86h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_82          = byte ptr -82h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7C          = byte ptr -7Ch
var_7A          = byte ptr -7Ah
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 148h
                push    esi
                push    edi
                mov     [ebp+var_150], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_11C], eax
                mov     ecx, [ebp+var_150]
                cmp     dword ptr [ecx], 0
                jnz     short loc_474A67
                mov     [ebp+var_154], offset byte_110A50C
                jmp     short loc_474A75
; ---------------------------------------------------------------------------

loc_474A67:                             ; CODE XREF: sub_474A10+49↑j
                mov     edx, [ebp+var_150]
                mov     eax, [edx]
                mov     [ebp+var_154], eax

loc_474A75:                             ; CODE XREF: sub_474A10+55↑j
                push    0
                mov     ecx, [ebp+var_11C]
                push    ecx
                push    offset aTbItemSetitem ; "tb_Item_SetItem"
                mov     edx, [ebp+var_154]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_474AAA
; ---------------------------------------------------------------------------

loc_474AA1:                             ; CODE XREF: sub_474A10+530↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_474AAA:                             ; CODE XREF: sub_474A10+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_474F45
                lea     eax, [ebp+var_114]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_110]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_10E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_10D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_109]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_105]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_101]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_FD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_F9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_F5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_F4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_F3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_F2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_F1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_EF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_EE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_ED]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_EC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_EB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_E9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_E7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_E5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_E3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_E1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_DD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_D9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_D5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_D1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_CD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_CC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_CB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_CA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_C9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_C8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_C6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_C4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_C2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_BE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_BA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_B6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_B2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_AE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_AA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_A1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_9F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_9D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_9B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_97]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_93]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_8F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_8B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_87]
                push    edx

loc_474E50:                             ; DATA XREF: ___:0109C8C4↓o
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_86]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_85]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_83]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_82]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_70]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_114]
                push    edx
                mov     ecx, [ebp+var_150]
                add     ecx, 660h
                call    sub_494E90
                mov     ecx, 2Ch
                lea     esi, [ebp+var_114]
                mov     edi, eax
                rep movsd
                jmp     loc_474AA1
; ---------------------------------------------------------------------------

loc_474F45:                             ; CODE XREF: sub_474A10+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_150]
                call    read_and_verify_checksum
                mov     [ebp+var_115], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_115]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_474A10      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_474F80      proc near               ; CODE XREF: sub_45E870+8E3↑p

var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_80          = dword ptr -80h
var_79          = byte ptr -79h
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E4h
                mov     [ebp+var_EC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_EC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_474FD2
                mov     [ebp+var_F0], offset byte_110A50C
                jmp     short loc_474FE0
; ---------------------------------------------------------------------------

loc_474FD2:                             ; CODE XREF: sub_474F80+44↑j
                mov     edx, [ebp+var_EC]
                mov     eax, [edx]
                mov     [ebp+var_F0], eax

loc_474FE0:                             ; CODE XREF: sub_474F80+50↑j
                push    0
                mov     ecx, [ebp+var_80]
                push    ecx
                push    offset aTbItemSimilarg ; "tb_item_SimilarGroup"
                mov     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_475012
; ---------------------------------------------------------------------------

loc_475009:                             ; CODE XREF: sub_474F80+11E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_475012:                             ; CODE XREF: sub_474F80+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4750A3
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_70]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_78]
                push    eax
                mov     ecx, [ebp+var_EC]
                add     ecx, 670h
                call    sub_495030
                mov     ecx, [ebp+var_78]
                mov     [eax], ecx
                mov     edx, [ebp+var_74]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_70]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp+var_68]
                mov     [eax+10h], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+14h], edx
                jmp     loc_475009
; ---------------------------------------------------------------------------

loc_4750A3:                             ; CODE XREF: sub_474F80+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_EC]
                call    read_and_verify_checksum
                mov     [ebp+var_79], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_79]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_474F80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4750E0      proc near               ; CODE XREF: sub_45E870+8F9↑p

var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_80          = dword ptr -80h
var_79          = byte ptr -79h
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E4h
                mov     [ebp+var_EC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_EC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_475132
                mov     [ebp+var_F0], offset byte_110A50C
                jmp     short loc_475140
; ---------------------------------------------------------------------------

loc_475132:                             ; CODE XREF: sub_4750E0+44↑j
                mov     edx, [ebp+var_EC]
                mov     eax, [edx]
                mov     [ebp+var_F0], eax

loc_475140:                             ; CODE XREF: sub_4750E0+50↑j
                push    0
                mov     ecx, [ebp+var_80]
                push    ecx
                push    offset aTbItemSubmodel ; "tb_Item_SubModel"
                mov     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_475172
; ---------------------------------------------------------------------------

loc_475169:                             ; CODE XREF: sub_4750E0+11E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_475172:                             ; CODE XREF: sub_4750E0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_475203
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_70]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_78]
                push    eax
                mov     ecx, [ebp+var_EC]
                add     ecx, 680h
                call    sub_495030
                mov     ecx, [ebp+var_78]
                mov     [eax], ecx
                mov     edx, [ebp+var_74]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_70]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp+var_68]
                mov     [eax+10h], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+14h], edx
                jmp     loc_475169
; ---------------------------------------------------------------------------

loc_475203:                             ; CODE XREF: sub_4750E0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_EC]
                call    read_and_verify_checksum
                mov     [ebp+var_79], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_79]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4750E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_475240      proc near               ; CODE XREF: sub_45E870+90F↑p

var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_AC          = dword ptr -0ACh
var_A5          = byte ptr -0A5h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D0h
                push    esi
                push    edi
                mov     [ebp+var_D8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_AC], eax
                mov     ecx, [ebp+var_D8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_475297
                mov     [ebp+var_DC], offset byte_110A50C
                jmp     short loc_4752A5
; ---------------------------------------------------------------------------

loc_475297:                             ; CODE XREF: sub_475240+49↑j
                mov     edx, [ebp+var_D8]
                mov     eax, [edx]
                mov     [ebp+var_DC], eax

loc_4752A5:                             ; CODE XREF: sub_475240+55↑j
                push    0
                mov     ecx, [ebp+var_AC]
                push    ecx
                push    offset aTbItemTitle ; "tb_item_title"
                mov     edx, [ebp+var_DC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4752DA
; ---------------------------------------------------------------------------

loc_4752D1:                             ; CODE XREF: sub_475240+1E4↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4752DA:                             ; CODE XREF: sub_475240+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_475429
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_66]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_A4]
                push    eax
                mov     ecx, [ebp+var_D8]
                add     ecx, 690h
                call    sub_495280
                mov     ecx, 10h
                lea     esi, [ebp+var_A4]
                mov     edi, eax
                rep movsd
                jmp     loc_4752D1
; ---------------------------------------------------------------------------

loc_475429:                             ; CODE XREF: sub_475240+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_D8]
                call    read_and_verify_checksum
                mov     [ebp+var_A5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_A5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_475240      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_475470      proc near               ; CODE XREF: sub_45E870+925↑p

var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_66          = byte ptr -66h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C4h
                mov     [ebp+var_CC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_CC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4754C2
                mov     [ebp+var_D0], offset byte_110A50C
                jmp     short loc_4754D0
; ---------------------------------------------------------------------------

loc_4754C2:                             ; CODE XREF: sub_475470+44↑j
                mov     edx, [ebp+var_CC]
                mov     eax, [edx]
                mov     [ebp+var_D0], eax

loc_4754D0:                             ; CODE XREF: sub_475470+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbItemTitleCha ; "tb_Item_Title_Change"
                mov     edx, [ebp+var_D0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_475502
; ---------------------------------------------------------------------------

loc_4754F9:                             ; CODE XREF: sub_475470+104↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_475502:                             ; CODE XREF: sub_475470+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_475576
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6C+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_66]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_70]
                push    edx
                mov     ecx, [ebp+var_CC]
                add     ecx, 6A0h
                call    sub_4951B0
                mov     ecx, [ebp+var_70]
                mov     [eax], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+4], edx
                mov     ecx, [ebp-68h]
                mov     [eax+8], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+0Ch], dx
                jmp     short loc_4754F9
; ---------------------------------------------------------------------------

loc_475576:                             ; CODE XREF: sub_475470+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_CC]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_475470      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4755B0      proc near               ; CODE XREF: sub_45E870+93B↑p

var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_AC          = dword ptr -0ACh
var_A5          = byte ptr -0A5h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D0h
                push    esi
                push    edi
                mov     [ebp+var_D8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_AC], eax
                mov     ecx, [ebp+var_D8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_475607
                mov     [ebp+var_DC], offset byte_110A50C
                jmp     short loc_475615
; ---------------------------------------------------------------------------

loc_475607:                             ; CODE XREF: sub_4755B0+49↑j
                mov     edx, [ebp+var_D8]
                mov     eax, [edx]
                mov     [ebp+var_DC], eax

loc_475615:                             ; CODE XREF: sub_4755B0+55↑j
                push    0
                mov     ecx, [ebp+var_AC]
                push    ecx
                push    offset aTbItemTitleGro ; "tb_item_Title_Group"
                mov     edx, [ebp+var_DC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47564A
; ---------------------------------------------------------------------------

loc_475641:                             ; CODE XREF: sub_4755B0+1E4↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47564A:                             ; CODE XREF: sub_4755B0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_475799
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_66]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_A4]
                push    eax
                mov     ecx, [ebp+var_D8]
                add     ecx, 6B0h
                call    sub_495280
                mov     ecx, 10h
                lea     esi, [ebp+var_A4]
                mov     edi, eax
                rep movsd
                jmp     loc_475641
; ---------------------------------------------------------------------------

loc_475799:                             ; CODE XREF: sub_4755B0+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_D8]
                call    read_and_verify_checksum
                mov     [ebp+var_A5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_A5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4755B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4757E0      proc near               ; CODE XREF: sub_45E870+951↑p

var_AC          = dword ptr -0ACh
var_A8          = dword ptr -0A8h
var_84          = dword ptr -84h
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_75          = byte ptr -75h
var_74          = byte ptr -74h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_67          = byte ptr -67h
var_65          = byte ptr -65h
var_63          = byte ptr -63h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A0h
                push    esi
                push    edi
                mov     [ebp+var_A8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_84], eax
                mov     ecx, [ebp+var_A8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_475837
                mov     [ebp+var_AC], offset byte_110A50C
                jmp     short loc_475845
; ---------------------------------------------------------------------------

loc_475837:                             ; CODE XREF: sub_4757E0+49↑j
                mov     edx, [ebp+var_A8]
                mov     eax, [edx]
                mov     [ebp+var_AC], eax

loc_475845:                             ; CODE XREF: sub_4757E0+55↑j
                push    0
                mov     ecx, [ebp+var_84]
                push    ecx
                push    offset aTbItemTitleVal ; "tb_item_Title_Value"
                mov     edx, [ebp+var_AC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47587A
; ---------------------------------------------------------------------------

loc_475871:                             ; CODE XREF: sub_4757E0+14E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47587A:                             ; CODE XREF: sub_4757E0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_475933
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_75]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_73]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_67]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_65]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_63]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_7C]
                push    edx
                mov     ecx, [ebp+var_A8]
                add     ecx, 6C0h
                call    sub_495410
                mov     ecx, 6
                lea     esi, [ebp+var_7C]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_475871
; ---------------------------------------------------------------------------

loc_475933:                             ; CODE XREF: sub_4757E0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_A8]
                call    read_and_verify_checksum
                mov     [ebp+var_7D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_7D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4757E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_475970      proc near               ; CODE XREF: sub_45E870+967↑p

var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_84          = dword ptr -84h
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0F4h
                push    esi
                push    edi
                mov     [ebp+var_FC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_84], eax
                mov     ecx, [ebp+var_FC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4759C7
                mov     [ebp+var_100], offset byte_110A50C
                jmp     short loc_4759D5
; ---------------------------------------------------------------------------

loc_4759C7:                             ; CODE XREF: sub_475970+49↑j
                mov     edx, [ebp+var_FC]
                mov     eax, [edx]
                mov     [ebp+var_100], eax

loc_4759D5:                             ; CODE XREF: sub_475970+55↑j
                push    0
                mov     ecx, [ebp+var_84]
                push    ecx
                push    offset aTbLeagueInfo ; "tb_League_Info"
                mov     edx, [ebp+var_100]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_475A0A
; ---------------------------------------------------------------------------

loc_475A01:                             ; CODE XREF: sub_475970+117↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_475A0A:                             ; CODE XREF: sub_475970+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_475A8C
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                mov     ecx, [ebp+var_FC]
                add     ecx, 6D0h
                call    sub_4954E0
                mov     ecx, 7
                lea     esi, [ebp+var_7C]
                mov     edi, eax
                rep movsd
                jmp     loc_475A01
; ---------------------------------------------------------------------------

loc_475A8C:                             ; CODE XREF: sub_475970+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_FC]
                call    read_and_verify_checksum
                mov     [ebp+var_7D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_7D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_475970      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_475AC0      proc near               ; CODE XREF: sub_45E870+97D↑p

var_144         = dword ptr -144h
var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_124         = dword ptr -124h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F745E0 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_475AC0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 138h
                mov     [ebp+var_13C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_13C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_475B15
                mov     [ebp+var_140], offset byte_110A50C
                jmp     short loc_475B23
; ---------------------------------------------------------------------------

loc_475B15:                             ; CODE XREF: sub_475AC0+47↑j
                mov     edx, [ebp+var_13C]
                mov     eax, [edx]
                mov     [ebp+var_140], eax

loc_475B23:                             ; CODE XREF: sub_475AC0+53↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbLeagueMark ; "tb_League_Mark"
                mov     edx, [ebp+var_140]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_475B58
; ---------------------------------------------------------------------------

loc_475B4F:                             ; CODE XREF: sub_475AC0+183↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_475B58:                             ; CODE XREF: sub_475AC0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_475C48
                lea     eax, [ebp+var_7C]
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_144], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_84]
                push    eax
                mov     ecx, [ebp+var_13C]
                add     ecx, 6E0h
                call    sub_495640
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_124]
                mov     edx, [ebp+var_84]
                mov     [ecx], edx
                mov     eax, [ebp+var_124]
                mov     ecx, [ebp+var_80]
                mov     [eax+4], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_124]
                add     ecx, 8
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                mov     [ebp+var_138], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_138]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_475B4F
; ---------------------------------------------------------------------------

loc_475C48:                             ; CODE XREF: sub_475AC0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_13C]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_475AC0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_475C80      proc near               ; CODE XREF: sub_475AC0+AFEB39↓j
                                        ; sub_495640+AE11CE↓j ...

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 8
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_475C80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_475CD0      proc near               ; CODE XREF: sub_45E870+993↑p

var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C0h
                push    esi
                push    edi
                mov     [ebp+var_C8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_9C], eax
                mov     ecx, [ebp+var_C8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_475D27
                mov     [ebp+var_CC], offset byte_110A50C
                jmp     short loc_475D35
; ---------------------------------------------------------------------------

loc_475D27:                             ; CODE XREF: sub_475CD0+49↑j
                mov     edx, [ebp+var_C8]
                mov     eax, [edx]
                mov     [ebp+var_CC], eax

loc_475D35:                             ; CODE XREF: sub_475CD0+55↑j
                push    0
                mov     ecx, [ebp+var_9C]
                push    ecx
                push    offset aTbLeagueSkill ; "tb_League_Skill"
                mov     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_475D6A
; ---------------------------------------------------------------------------

loc_475D61:                             ; CODE XREF: sub_475CD0+178↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_475D6A:                             ; CODE XREF: sub_475CD0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_475E4D
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_90]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                mov     ecx, [ebp+var_C8]
                add     ecx, 6F0h
                call    sub_4958B0
                mov     ecx, 0Dh
                lea     esi, [ebp+var_94]
                mov     edi, eax
                rep movsd
                jmp     loc_475D61
; ---------------------------------------------------------------------------

loc_475E4D:                             ; CODE XREF: sub_475CD0+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_C8]
                call    read_and_verify_checksum
                mov     [ebp+var_95], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_95]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_475CD0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_475E90      proc near               ; CODE XREF: sub_45E870+9A9↑p

var_294         = dword ptr -294h
var_290         = dword ptr -290h
var_FC          = dword ptr -0FCh
var_F5          = byte ptr -0F5h
var_F4          = byte ptr -0F4h
var_F2          = byte ptr -0F2h
var_D6          = byte ptr -0D6h
var_BA          = byte ptr -0BAh
var_9E          = byte ptr -9Eh
var_82          = byte ptr -82h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74620 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_475E90
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 288h
                mov     [ebp+var_290], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_FC], eax
                mov     ecx, [ebp+var_290]
                cmp     dword ptr [ecx], 0
                jnz     short loc_475EE5
                mov     [ebp+var_294], offset byte_110A50C
                jmp     short loc_475EF3
; ---------------------------------------------------------------------------

loc_475EE5:                             ; CODE XREF: sub_475E90+47↑j
                mov     edx, [ebp+var_290]
                mov     eax, [edx]
                mov     [ebp+var_294], eax

loc_475EF3:                             ; CODE XREF: sub_475E90+53↑j
                push    0
                mov     ecx, [ebp+var_FC]
                push    ecx
                push    offset aTbLeagueskillS ; "tb_LeagueSkill_Script"
                mov     edx, [ebp+var_294]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_475F28
; ---------------------------------------------------------------------------

loc_475F1F:                             ; CODE XREF: sub_475E90+15B↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_475F28:                             ; CODE XREF: sub_475E90+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_475FF0
                lea     ecx, [ebp+var_F4]
                call    sub_47B8F0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_F4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_F2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_D6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_BA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_9E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_F4]
                push    eax
                lea     ecx, [ebp+var_F4]
                push    ecx
                mov     ecx, [ebp+var_290]
                add     ecx, 700h
                call    sub_495A30
                mov     ecx, eax
                call    sub_476030
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_F4]
                call    sub_47BA10
                jmp     loc_475F1F
; ---------------------------------------------------------------------------

loc_475FF0:                             ; CODE XREF: sub_475E90+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_290]
                call    read_and_verify_checksum
                mov     [ebp+var_F5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_F5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_475E90      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_476030      proc near               ; CODE XREF: sub_475E90+147↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Eh
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ah
                push    edx
                mov     ecx, [ebp+var_70]
                add     ecx, 3Ah
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 56h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 56h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 72h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 72h
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_476030      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4760E0      proc near               ; CODE XREF: sub_45E870+9BF↑p

var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_63          = byte ptr -63h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0ACh
                mov     [ebp+var_B4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_B4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_476132
                mov     [ebp+var_B8], offset byte_110A50C
                jmp     short loc_476140
; ---------------------------------------------------------------------------

loc_476132:                             ; CODE XREF: sub_4760E0+44↑j
                mov     edx, [ebp+var_B4]
                mov     eax, [edx]
                mov     [ebp+var_B8], eax

loc_476140:                             ; CODE XREF: sub_4760E0+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbLevelupPoint ; "tb_Levelup_Point"
                mov     edx, [ebp+var_B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_476172
; ---------------------------------------------------------------------------

loc_476169:                             ; CODE XREF: sub_4760E0+EA↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_476172:                             ; CODE XREF: sub_4760E0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_4761CC
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_68+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_63]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_62]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68]
                push    ecx
                mov     ecx, [ebp+var_B4]
                add     ecx, 710h
                call    sub_495C30
                mov     edx, [ebp+var_68]
                mov     [eax], edx
                mov     ecx, [ebp-64h]
                mov     [eax+4], ecx
                jmp     short loc_476169
; ---------------------------------------------------------------------------

loc_4761CC:                             ; CODE XREF: sub_4760E0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_B4]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4760E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_476200      proc near               ; CODE XREF: sub_45E870+9D5↑p

var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B8h
                mov     [ebp+var_C0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_C0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_476252
                mov     [ebp+var_C4], offset byte_110A50C
                jmp     short loc_476260
; ---------------------------------------------------------------------------

loc_476252:                             ; CODE XREF: sub_476200+44↑j
                mov     edx, [ebp+var_C0]
                mov     eax, [edx]
                mov     [ebp+var_C4], eax

loc_476260:                             ; CODE XREF: sub_476200+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbLoading ; "tb_Loading"
                mov     edx, [ebp+var_C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_476292
; ---------------------------------------------------------------------------

loc_476289:                             ; CODE XREF: sub_476200+FC↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_476292:                             ; CODE XREF: sub_476200+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_4762FE
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6C+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C]
                push    edx
                mov     ecx, [ebp+var_C0]
                add     ecx, 720h
                call    sub_495D90
                mov     ecx, [ebp+var_6C]
                mov     [eax], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+4], edx
                mov     cl, [ebp+var_64]
                mov     [eax+8], cl
                jmp     short loc_476289
; ---------------------------------------------------------------------------

loc_4762FE:                             ; CODE XREF: sub_476200+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_C0]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_476200      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_476330      proc near               ; CODE XREF: sub_45E870+9EB↑p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_118         = dword ptr -118h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = word ptr -80h
var_7E          = word ptr -7Eh
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488190
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 12Ch
                mov     [ebp+var_130], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_130]
                cmp     dword ptr [ecx], 0
                jnz     short loc_476385
                mov     [ebp+var_134], offset byte_110A50C
                jmp     short loc_476393
; ---------------------------------------------------------------------------

loc_476385:                             ; CODE XREF: sub_476330+47↑j
                mov     edx, [ebp+var_130]
                mov     eax, [edx]
                mov     [ebp+var_134], eax

loc_476393:                             ; CODE XREF: sub_476330+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbLoadingImg ; "tb_Loading_Img"
                mov     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4763C8
; ---------------------------------------------------------------------------

loc_4763BF:                             ; CODE XREF: sub_476330+17E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4763C8:                             ; CODE XREF: sub_476330+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4764B3
                lea     eax, [ebp+var_7C]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_138], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_80]
                push    eax
                mov     ecx, [ebp+var_130]
                add     ecx, 730h
                call    sub_495EF0
                mov     [ebp+var_118], eax
                mov     ecx, [ebp+var_118]
                mov     dx, [ebp+var_80]
                mov     [ecx], dx
                mov     eax, [ebp+var_118]
                mov     cx, [ebp+var_7E]
                mov     [eax+2], cx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_118]
                add     ecx, 4
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                mov     [ebp+var_12C], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_12C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_4763BF
; ---------------------------------------------------------------------------

loc_4764B3:                             ; CODE XREF: sub_476330+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_130]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_476330      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4764F0      proc near               ; CODE XREF: sub_45E870+A01↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_476542
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_476550
; ---------------------------------------------------------------------------

loc_476542:                             ; CODE XREF: sub_4764F0+44↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_476550:                             ; CODE XREF: sub_4764F0+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbLoadingStrin ; "tb_Loading_String"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_476582
; ---------------------------------------------------------------------------

loc_476579:                             ; CODE XREF: sub_4764F0+E0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_476582:                             ; CODE XREF: sub_4764F0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_4765D2
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_68]
                push    eax
                mov     ecx, [ebp+var_AC]
                add     ecx, 740h
                call    sub_48E560
                mov     ecx, [ebp+var_68]
                mov     [eax], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+4], dx
                jmp     short loc_476579
; ---------------------------------------------------------------------------

loc_4765D2:                             ; CODE XREF: sub_4764F0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4764F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_476610      proc near               ; CODE XREF: sub_45E870+A17↑p

var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_AC          = dword ptr -0ACh
var_A5          = byte ptr -0A5h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_67          = byte ptr -67h
var_65          = byte ptr -65h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D0h
                push    esi
                push    edi
                mov     [ebp+var_D8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_AC], eax
                mov     ecx, [ebp+var_D8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_476667
                mov     [ebp+var_DC], offset byte_110A50C
                jmp     short loc_476675
; ---------------------------------------------------------------------------

loc_476667:                             ; CODE XREF: sub_476610+49↑j
                mov     edx, [ebp+var_D8]
                mov     eax, [edx]
                mov     [ebp+var_DC], eax

loc_476675:                             ; CODE XREF: sub_476610+55↑j
                push    0
                mov     ecx, [ebp+var_AC]
                push    ecx
                push    offset aTbMake  ; "tb_Make"
                mov     edx, [ebp+var_DC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4766AA
; ---------------------------------------------------------------------------

loc_4766A1:                             ; CODE XREF: sub_476610+1E4↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4766AA:                             ; CODE XREF: sub_476610+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4767F9
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_67]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_65]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A4]
                push    eax
                mov     ecx, [ebp+var_D8]
                add     ecx, 750h
                call    sub_495280
                mov     ecx, 10h
                lea     esi, [ebp+var_A4]
                mov     edi, eax
                rep movsd
                jmp     loc_4766A1
; ---------------------------------------------------------------------------

loc_4767F9:                             ; CODE XREF: sub_476610+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_D8]
                call    read_and_verify_checksum
                mov     [ebp+var_A5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_A5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_476610      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_476840      proc near               ; CODE XREF: sub_45E870+A2D↑p

var_1D8         = dword ptr -1D8h
var_1D4         = dword ptr -1D4h
var_1B4         = dword ptr -1B4h
var_1AD         = byte ptr -1ADh
var_1AC         = byte ptr -1ACh
var_1AA         = byte ptr -1AAh
var_1A9         = byte ptr -1A9h
var_1A7         = byte ptr -1A7h
var_1A6         = byte ptr -1A6h
var_1A5         = byte ptr -1A5h
var_1A4         = byte ptr -1A4h
var_1A2         = byte ptr -1A2h
var_1A0         = byte ptr -1A0h
var_19F         = byte ptr -19Fh
var_19E         = byte ptr -19Eh
var_19D         = byte ptr -19Dh
var_199         = byte ptr -199h
var_198         = byte ptr -198h
var_197         = byte ptr -197h
var_196         = byte ptr -196h
var_195         = byte ptr -195h
var_194         = byte ptr -194h
var_190         = byte ptr -190h
var_18E         = byte ptr -18Eh
var_18C         = byte ptr -18Ch
var_170         = byte ptr -170h
var_154         = byte ptr -154h
var_138         = byte ptr -138h
var_11C         = byte ptr -11Ch
var_100         = byte ptr -100h
var_E4          = byte ptr -0E4h
var_E2          = byte ptr -0E2h
var_E0          = byte ptr -0E0h
var_DF          = byte ptr -0DFh
var_DD          = byte ptr -0DDh
var_C1          = byte ptr -0C1h
var_A5          = byte ptr -0A5h
var_A3          = byte ptr -0A3h
var_A1          = byte ptr -0A1h
var_9D          = byte ptr -9Dh
var_99          = byte ptr -99h
var_95          = byte ptr -95h
var_91          = byte ptr -91h
var_8D          = byte ptr -8Dh
var_89          = byte ptr -89h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_67          = byte ptr -67h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74640 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_476840
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1CCh
                mov     [ebp+var_1D4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_1B4], eax
                mov     ecx, [ebp+var_1D4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_476895
                mov     [ebp+var_1D8], offset byte_110A50C
                jmp     short loc_4768A3
; ---------------------------------------------------------------------------

loc_476895:                             ; CODE XREF: sub_476840+47↑j
                mov     edx, [ebp+var_1D4]
                mov     eax, [edx]
                mov     [ebp+var_1D8], eax

loc_4768A3:                             ; CODE XREF: sub_476840+53↑j
                push    0
                mov     ecx, [ebp+var_1B4]
                push    ecx
                push    offset aTbMazeInfo ; "tb_Maze_Info"
                mov     edx, [ebp+var_1D8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4768D8
; ---------------------------------------------------------------------------

loc_4768CF:                             ; CODE XREF: sub_476840+3B5↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4768D8:                             ; CODE XREF: sub_476840+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_476BFA
                lea     ecx, [ebp+var_1AC]
                call    sub_476C40
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_1AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_1AA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1A9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_1A7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1A6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1A5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_1A2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_1A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_19F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_19E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_19D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_199]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_198]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_197]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_196]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_195]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_194]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_190]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_18E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_18C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_170]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_154]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_138]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_11C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_100]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_E4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_E2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_E0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_DF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     eax, [ebp+var_DD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_C1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_A5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_A3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_A1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_99]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_95]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_91]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_89]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_85]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_67]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1AC]
                push    eax
                lea     ecx, [ebp+var_1AC]
                push    ecx
                mov     ecx, [ebp+var_1D4]
                add     ecx, 760h
                call    sub_496150
                mov     ecx, eax
                call    sub_476FD0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_1AC]
                call    sub_476E60
                jmp     loc_4768CF
; ---------------------------------------------------------------------------

loc_476BFA:                             ; CODE XREF: sub_476840+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_1D4]
                call    read_and_verify_checksum
                mov     [ebp+var_1AD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_1AD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_476840      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_476C40      proc near               ; CODE XREF: sub_476840+AA↑p
                                        ; sub_496150+A6↓p

var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_A8          = dword ptr -0A8h
var_A4          = dword ptr -0A4h
var_9D          = byte ptr -9Dh
var_9C          = dword ptr -9Ch
var_94          = dword ptr -94h
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74660 SIZE 000000CA BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_476C40
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C0h
                mov     [ebp+var_A8], ecx
                mov     eax, [ebp+var_A8]
                add     eax, 20h
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_AC], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_A8]
                add     eax, 3Ch
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_B0], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_A8]
                add     eax, 58h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_B4], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_A8]
                add     eax, 74h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_B8], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_A8]
                add     eax, 90h
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_BC], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_A8]
                add     eax, 0ACh
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_C0], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_A8]
                add     eax, 0CFh
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_C4], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_7C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     eax, [ebp+var_A8]
                add     eax, 0EBh
                mov     [ebp+var_94], eax
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_84], ecx
                mov     edx, [ebp+var_94]
                mov     [ebp+var_C8], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    0
                mov     ecx, [ebp+var_94]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Fh
                mov     eax, [ebp+var_A8]
                add     eax, 129h
                mov     [ebp+var_A4], eax
                lea     ecx, [ebp+var_9D]
                mov     [ebp+var_9C], ecx
                mov     edx, [ebp+var_A4]
                mov     [ebp+var_CC], edx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    0
                mov     ecx, [ebp+var_A4]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Fh
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_A8]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_476C40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_476E60      proc near               ; CODE XREF: sub_476840+3B0↑p
                                        ; sub_496150+132↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_38          = dword ptr -38h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74740 SIZE 000000AC BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_476E60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 7
                mov     eax, [ebp+var_4C]
                add     eax, 129h
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     byte ptr [ebp+var_4], 6
                mov     ecx, [ebp+var_4C]
                add     ecx, 0EBh
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 9
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 6
                mov     byte ptr [ebp+var_4], 5
                mov     edx, [ebp+var_4C]
                add     edx, 0CFh
                mov     [ebp+var_18], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     eax, [ebp+var_4C]
                add     eax, 0ACh
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 0Bh
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     ecx, [ebp+var_4C]
                add     ecx, 90h
                mov     [ebp+var_28], ecx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    1
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     edx, [ebp+var_4C]
                add     edx, 74h
                mov     [ebp+var_2C], edx
                mov     byte ptr [ebp+var_4], 0Dh
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     eax, [ebp+var_4C]
                add     eax, 58h
                mov     [ebp+var_38], eax
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    1
                mov     ecx, [ebp+var_38]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_4C]
                add     ecx, 3Ch
                mov     [ebp+var_44], ecx
                mov     byte ptr [ebp+var_4], 0Fh
                push    0
                push    1
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_4C]
                add     edx, 20h
                mov     [ebp+var_48], edx
                mov     [ebp+var_4], 10h
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_476E60      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_476FD0      proc near               ; CODE XREF: sub_476840+3A1↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2]
                mov     [eax+2], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+3]
                mov     [eax+3], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+5]
                mov     [eax+5], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+6]
                mov     [eax+6], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+7]
                mov     [eax+7], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+8]
                mov     [eax+8], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Ah]
                mov     [eax+0Ah], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Ch]
                mov     [eax+0Ch], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Dh]
                mov     [eax+0Dh], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Eh]
                mov     [eax+0Eh], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Fh]
                mov     [eax+0Fh], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+13h]
                mov     [eax+13h], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+14h]
                mov     [eax+14h], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+15h]
                mov     [eax+15h], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+16h]
                mov     [eax+16h], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+17h]
                mov     [eax+17h], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+18h]
                mov     [eax+18h], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1Ch]
                mov     [eax+1Ch], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1Eh]
                mov     [eax+1Eh], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 20h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 20h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 3Ch
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 3Ch
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 58h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 58h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 74h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 74h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 90h
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 90h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0ACh
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 0ACh
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0C8h]
                mov     [eax+0C8h], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0CAh]
                mov     [eax+0CAh], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0CCh]
                mov     [eax+0CCh], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0CDh]
                mov     [eax+0CDh], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0CFh
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 0CFh
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0EBh
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 0EBh
                call    sub_4A0090
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+107h]
                mov     [ecx+107h], ax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+109h]
                mov     [ecx+109h], ax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+10Bh]
                mov     [ecx+10Bh], eax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+10Fh]
                mov     [ecx+10Fh], eax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+113h]
                mov     [ecx+113h], eax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+117h]
                mov     [ecx+117h], eax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+11Bh]
                mov     [ecx+11Bh], eax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+11Fh]
                mov     [ecx+11Fh], eax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+123h]
                mov     [ecx+123h], eax
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+127h]
                mov     [ecx+127h], al
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+128h]
                mov     [ecx+128h], al
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 129h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 129h
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+145h]
                mov     [eax+145h], dl
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_476FD0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4773B0      proc near               ; CODE XREF: sub_45E870+A43↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_80          = dword ptr -80h
var_79          = byte ptr -79h
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_477402
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_477410
; ---------------------------------------------------------------------------

loc_477402:                             ; CODE XREF: sub_4773B0+44↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_477410:                             ; CODE XREF: sub_4773B0+50↑j
                push    0
                mov     ecx, [ebp+var_80]
                push    ecx
                push    offset aTbMazeOpenGrou ; "tb_Maze_Open_Group"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_477442
; ---------------------------------------------------------------------------

loc_477439:                             ; CODE XREF: sub_4773B0+166↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_477442:                             ; CODE XREF: sub_4773B0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47751B
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_78+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_74+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_70+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6C+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_68+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_64+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_78]
                push    eax
                mov     ecx, [ebp+var_AC]
                add     ecx, 770h
                call    sub_496350
                mov     ecx, [ebp+var_78]
                mov     [eax], ecx
                mov     edx, [ebp+var_74]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_70]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp+var_68]
                mov     [eax+10h], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+14h], edx
                jmp     loc_477439
; ---------------------------------------------------------------------------

loc_47751B:                             ; CODE XREF: sub_4773B0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_79], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_79]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4773B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477550      proc near               ; CODE XREF: sub_45E870+A59↑p

var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_128         = dword ptr -128h
var_A0          = dword ptr -0A0h
var_99          = byte ptr -99h
var_98          = dword ptr -98h
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_81          = byte ptr -81h
var_7F          = byte ptr -7Fh
var_7D          = byte ptr -7Dh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74800 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_477550
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 128h
                mov     [ebp+var_12C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_12C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4775A5
                mov     [ebp+var_130], offset byte_110A50C
                jmp     short loc_4775B3
; ---------------------------------------------------------------------------

loc_4775A5:                             ; CODE XREF: sub_477550+47↑j
                mov     edx, [ebp+var_12C]
                mov     eax, [edx]
                mov     [ebp+var_130], eax

loc_4775B3:                             ; CODE XREF: sub_477550+53↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbMazeOpencont ; "tb_Maze_OpenControl"
                mov     edx, [ebp+var_130]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4775E8
; ---------------------------------------------------------------------------

loc_4775DF:                             ; CODE XREF: sub_477550+183↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4775E8:                             ; CODE XREF: sub_477550+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4776D8
                lea     eax, [ebp+var_7D]
                mov     [ebp+var_A0], eax
                lea     ecx, [ebp+var_99]
                mov     [ebp+var_98], ecx
                mov     edx, [ebp+var_A0]
                mov     [ebp+var_134], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_A0]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_81]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_88]
                push    ecx
                mov     ecx, [ebp+var_12C]
                add     ecx, 780h
                call    sub_4964D0
                mov     ecx, eax
                call    sub_477760
                mov     byte ptr [ebp+var_4], 0
                lea     edx, [ebp+var_7D]
                mov     [ebp+var_128], edx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_128]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_4775DF
; ---------------------------------------------------------------------------

loc_4776D8:                             ; CODE XREF: sub_477550+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_12C]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_477550      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477710      proc near               ; CODE XREF: sub_477550+AFD2C9↓j
                                        ; sub_4964D0+AE041E↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 0Bh
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_477710      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477760      proc near               ; CODE XREF: sub_477550+15A↑p

var_38          = dword ptr -38h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 38h
                mov     [ebp+var_38], ecx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5]
                mov     [eax+5], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+7]
                mov     [eax+7], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+9]
                mov     [eax+9], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0Bh
                push    ecx
                mov     ecx, [ebp+var_38]
                add     ecx, 0Bh
                call    sub_4A0090
                mov     eax, [ebp+var_38]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_477760      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4777D0      proc near               ; CODE XREF: sub_45E870+A6F↑p

var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_A0          = dword ptr -0A0h
var_99          = byte ptr -99h
var_98          = byte ptr -98h
var_96          = byte ptr -96h
var_95          = byte ptr -95h
var_93          = byte ptr -93h
var_91          = byte ptr -91h
var_8F          = byte ptr -8Fh
var_8D          = byte ptr -8Dh
var_8B          = byte ptr -8Bh
var_89          = byte ptr -89h
var_87          = byte ptr -87h
var_85          = byte ptr -85h
var_83          = byte ptr -83h
var_81          = byte ptr -81h
var_7F          = byte ptr -7Fh
var_7D          = byte ptr -7Dh
var_7B          = byte ptr -7Bh
var_79          = byte ptr -79h
var_77          = byte ptr -77h
var_75          = byte ptr -75h
var_73          = byte ptr -73h
var_71          = byte ptr -71h
var_6F          = byte ptr -6Fh
var_6D          = byte ptr -6Dh
var_6B          = byte ptr -6Bh
var_69          = byte ptr -69h
var_67          = byte ptr -67h
var_65          = byte ptr -65h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C4h
                push    esi
                push    edi
                mov     [ebp+var_CC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A0], eax
                mov     ecx, [ebp+var_CC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_477827
                mov     [ebp+var_D0], offset byte_110A50C
                jmp     short loc_477835
; ---------------------------------------------------------------------------

loc_477827:                             ; CODE XREF: sub_4777D0+49↑j
                mov     edx, [ebp+var_CC]
                mov     eax, [edx]
                mov     [ebp+var_D0], eax

loc_477835:                             ; CODE XREF: sub_4777D0+55↑j
                push    0
                mov     ecx, [ebp+var_A0]
                push    ecx
                push    offset aTbMazePortal ; "tb_Maze_Portal"
                mov     edx, [ebp+var_D0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47786A
; ---------------------------------------------------------------------------

loc_477861:                             ; CODE XREF: sub_4777D0+239↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47786A:                             ; CODE XREF: sub_4777D0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_477A0E
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_96]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_95]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_93]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_91]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_8F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_8D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_8B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_89]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_85]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_81]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_79]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_77]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_75]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_71]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_69]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_67]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_65]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_98]
                push    eax
                mov     ecx, [ebp+var_CC]
                add     ecx, 790h
                call    sub_496710
                mov     ecx, 0Dh
                lea     esi, [ebp+var_98]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_477861
; ---------------------------------------------------------------------------

loc_477A0E:                             ; CODE XREF: sub_4777D0+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_CC]
                call    read_and_verify_checksum
                mov     [ebp+var_99], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_99]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4777D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477A50      proc near               ; CODE XREF: sub_45E870+A85↑p

var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_68          = dword ptr -68h
var_62          = byte ptr -62h
var_61          = byte ptr -61h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 88h
                mov     [ebp+var_90], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_68], eax
                mov     ecx, [ebp+var_90]
                cmp     dword ptr [ecx], 0
                jnz     short loc_477AA2
                mov     [ebp+var_94], offset byte_110A50C
                jmp     short loc_477AB0
; ---------------------------------------------------------------------------

loc_477AA2:                             ; CODE XREF: sub_477A50+44↑j
                mov     edx, [ebp+var_90]
                mov     eax, [edx]
                mov     [ebp+var_94], eax

loc_477AB0:                             ; CODE XREF: sub_477A50+50↑j
                push    0
                mov     ecx, [ebp+var_68]
                push    ecx
                push    offset aTbMazerewardDi ; "tb_MazeReward_Difficulty"
                mov     edx, [ebp+var_94]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_477AE2
; ---------------------------------------------------------------------------

loc_477AD9:                             ; CODE XREF: sub_477A50+C0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_477AE2:                             ; CODE XREF: sub_477A50+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_477B12
                lea     eax, [ebp+var_61]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_61]
                push    ecx
                mov     ecx, [ebp+var_90]
                add     ecx, 7A0h
                call    sub_496A30
                mov     dl, [ebp+var_61]
                mov     [eax], dl
                jmp     short loc_477AD9
; ---------------------------------------------------------------------------

loc_477B12:                             ; CODE XREF: sub_477A50+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_90]
                call    read_and_verify_checksum
                mov     [ebp+var_62], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_62]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_477A50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477B50      proc near               ; CODE XREF: sub_45E870+A9B↑p

var_22C         = dword ptr -22Ch
var_228         = dword ptr -228h
var_EC          = dword ptr -0ECh
var_E5          = byte ptr -0E5h
var_E4          = byte ptr -0E4h
var_E0          = byte ptr -0E0h
var_DC          = byte ptr -0DCh
var_D8          = byte ptr -0D8h
var_D4          = byte ptr -0D4h
var_B8          = byte ptr -0B8h
var_9C          = byte ptr -9Ch
var_80          = byte ptr -80h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74840 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_477B50
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 220h
                mov     [ebp+var_228], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_EC], eax
                mov     ecx, [ebp+var_228]
                cmp     dword ptr [ecx], 0
                jnz     short loc_477BA5
                mov     [ebp+var_22C], offset byte_110A50C
                jmp     short loc_477BB3
; ---------------------------------------------------------------------------

loc_477BA5:                             ; CODE XREF: sub_477B50+47↑j
                mov     edx, [ebp+var_228]
                mov     eax, [edx]
                mov     [ebp+var_22C], eax

loc_477BB3:                             ; CODE XREF: sub_477B50+53↑j
                push    0
                mov     ecx, [ebp+var_EC]
                push    ecx
                push    offset aTbMazerewardGo ; "tb_MazeReward_GoldDirect"
                mov     edx, [ebp+var_22C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_477BE8
; ---------------------------------------------------------------------------

loc_477BDF:                             ; CODE XREF: sub_477B50+18A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_477BE8:                             ; CODE XREF: sub_477B50+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_477CDF
                push    offset sub_93E020
                push    offset sub_48C660
                push    4
                push    1Ch
                lea     eax, [ebp+var_D4]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_E4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_E0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_DC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_D4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_B8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_E4]
                push    eax
                lea     ecx, [ebp+var_E4]
                push    ecx
                mov     ecx, [ebp+var_228]
                add     ecx, 7B0h
                call    sub_496800
                mov     ecx, eax
                call    sub_477D40
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    4
                push    1Ch
                lea     edx, [ebp+var_D4]
                push    edx
                call    sub_ED9E2A
                jmp     loc_477BDF
; ---------------------------------------------------------------------------

loc_477CDF:                             ; CODE XREF: sub_477B50+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_228]
                call    read_and_verify_checksum
                mov     [ebp+var_E5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_E5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_477B50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477D20      proc near               ; CODE XREF: sub_477B50+AFCCFE↓j
                                        ; sub_496800+AE0126↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    4
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 10h
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_477D20      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477D40      proc near               ; CODE XREF: sub_477B50+16C↑p

var_3C          = dword ptr -3Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 3Ch
                mov     [ebp+var_3C], ecx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+8]
                mov     [eax+8], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     [ebp+var_4], 0
                jmp     short loc_477D89
; ---------------------------------------------------------------------------

loc_477D80:                             ; CODE XREF: sub_477D40+78↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_477D89:                             ; CODE XREF: sub_477D40+3E↑j
                cmp     [ebp+var_4], 4
                jnb     short loc_477DBA
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+arg_0]
                lea     ecx, [eax+edx+10h]
                push    ecx
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+var_3C]
                lea     ecx, [eax+edx+10h]
                call    sub_4A0090
                jmp     short loc_477D80
; ---------------------------------------------------------------------------

loc_477DBA:                             ; CODE XREF: sub_477D40+4D↑j
                mov     eax, [ebp+var_3C]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_477D40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477DD0      proc near               ; CODE XREF: sub_45E870+AB1↑p

var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_68          = dword ptr -68h
var_62          = byte ptr -62h
var_61          = byte ptr -61h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 88h
                mov     [ebp+var_90], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_68], eax
                mov     ecx, [ebp+var_90]
                cmp     dword ptr [ecx], 0
                jnz     short loc_477E22
                mov     [ebp+var_94], offset byte_110A50C
                jmp     short loc_477E30
; ---------------------------------------------------------------------------

loc_477E22:                             ; CODE XREF: sub_477DD0+44↑j
                mov     edx, [ebp+var_90]
                mov     eax, [edx]
                mov     [ebp+var_94], eax

loc_477E30:                             ; CODE XREF: sub_477DD0+50↑j
                push    0
                mov     ecx, [ebp+var_68]
                push    ecx
                push    offset aTbMazerewardLe ; "tb_MazeReward_Level"
                mov     edx, [ebp+var_94]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_477E62
; ---------------------------------------------------------------------------

loc_477E59:                             ; CODE XREF: sub_477DD0+C0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_477E62:                             ; CODE XREF: sub_477DD0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_477E92
                lea     eax, [ebp+var_61]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_61]
                push    ecx
                mov     ecx, [ebp+var_90]
                add     ecx, 7C0h
                call    sub_496A30
                mov     dl, [ebp+var_61]
                mov     [eax], dl
                jmp     short loc_477E59
; ---------------------------------------------------------------------------

loc_477E92:                             ; CODE XREF: sub_477DD0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_90]
                call    read_and_verify_checksum
                mov     [ebp+var_62], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_62]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_477DD0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477ED0      proc near               ; CODE XREF: sub_45E870+AC7↑p

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 90h
                mov     [ebp+var_98], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_6C], eax
                mov     ecx, [ebp+var_98]
                cmp     dword ptr [ecx], 0
                jnz     short loc_477F22
                mov     [ebp+var_9C], offset byte_110A50C
                jmp     short loc_477F30
; ---------------------------------------------------------------------------

loc_477F22:                             ; CODE XREF: sub_477ED0+44↑j
                mov     edx, [ebp+var_98]
                mov     eax, [edx]
                mov     [ebp+var_9C], eax

loc_477F30:                             ; CODE XREF: sub_477ED0+50↑j
                push    0
                mov     ecx, [ebp+var_6C]
                push    ecx
                push    offset aTbMazerewardNo ; "tb_MazeReward_Normal"
                mov     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_477F62
; ---------------------------------------------------------------------------

loc_477F59:                             ; CODE XREF: sub_477ED0+C2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_477F62:                             ; CODE XREF: sub_477ED0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_477F94
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_64]
                push    ecx
                mov     ecx, [ebp+var_98]
                add     ecx, 7D0h
                call    sub_496B80
                mov     dx, [ebp+var_64]
                mov     [eax], dx
                jmp     short loc_477F59
; ---------------------------------------------------------------------------

loc_477F94:                             ; CODE XREF: sub_477ED0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_98]
                call    read_and_verify_checksum
                mov     [ebp+var_65], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_65]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_477ED0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_477FD0      proc near               ; CODE XREF: sub_45E870+ADD↑p

var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_68          = dword ptr -68h
var_62          = byte ptr -62h
var_61          = byte ptr -61h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 88h
                mov     [ebp+var_90], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_68], eax
                mov     ecx, [ebp+var_90]
                cmp     dword ptr [ecx], 0
                jnz     short loc_478022
                mov     [ebp+var_94], offset byte_110A50C
                jmp     short loc_478030
; ---------------------------------------------------------------------------

loc_478022:                             ; CODE XREF: sub_477FD0+44↑j
                mov     edx, [ebp+var_90]
                mov     eax, [edx]
                mov     [ebp+var_94], eax

loc_478030:                             ; CODE XREF: sub_477FD0+50↑j
                push    0
                mov     ecx, [ebp+var_68]
                push    ecx
                push    offset aTbMazerewardPa ; "tb_MazeReward_PartyValue"
                mov     edx, [ebp+var_94]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_478062
; ---------------------------------------------------------------------------

loc_478059:                             ; CODE XREF: sub_477FD0+C0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_478062:                             ; CODE XREF: sub_477FD0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_478092
                lea     eax, [ebp+var_61]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_61]
                push    ecx
                mov     ecx, [ebp+var_90]
                add     ecx, 7E0h
                call    sub_496A30
                mov     dl, [ebp+var_61]
                mov     [eax], dl
                jmp     short loc_478059
; ---------------------------------------------------------------------------

loc_478092:                             ; CODE XREF: sub_477FD0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_90]
                call    read_and_verify_checksum
                mov     [ebp+var_62], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_62]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_477FD0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4780D0      proc near               ; CODE XREF: sub_45E870+AF3↑p

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 90h
                mov     [ebp+var_98], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_6C], eax
                mov     ecx, [ebp+var_98]
                cmp     dword ptr [ecx], 0
                jnz     short loc_478122
                mov     [ebp+var_9C], offset byte_110A50C
                jmp     short loc_478130
; ---------------------------------------------------------------------------

loc_478122:                             ; CODE XREF: sub_4780D0+44↑j
                mov     edx, [ebp+var_98]
                mov     eax, [edx]
                mov     [ebp+var_9C], eax

loc_478130:                             ; CODE XREF: sub_4780D0+50↑j
                push    0
                mov     ecx, [ebp+var_6C]
                push    ecx
                push    offset aTbMazerewardRa ; "tb_MazeReward_Rank"
                mov     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_478162
; ---------------------------------------------------------------------------

loc_478159:                             ; CODE XREF: sub_4780D0+CE↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_478162:                             ; CODE XREF: sub_4780D0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_4781A0
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_64+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_64]
                push    edx
                mov     ecx, [ebp+var_98]
                add     ecx, 7F0h
                call    sub_496CD0
                mov     cx, [ebp+var_64]
                mov     [eax], cx
                jmp     short loc_478159
; ---------------------------------------------------------------------------

loc_4781A0:                             ; CODE XREF: sub_4780D0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_98]
                call    read_and_verify_checksum
                mov     [ebp+var_65], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_65]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4780D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4781E0      proc near               ; CODE XREF: sub_45E870+B09↑p

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 90h
                mov     [ebp+var_98], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_6C], eax
                mov     ecx, [ebp+var_98]
                cmp     dword ptr [ecx], 0
                jnz     short loc_478232
                mov     [ebp+var_9C], offset byte_110A50C
                jmp     short loc_478240
; ---------------------------------------------------------------------------

loc_478232:                             ; CODE XREF: sub_4781E0+44↑j
                mov     edx, [ebp+var_98]
                mov     eax, [edx]
                mov     [ebp+var_9C], eax

loc_478240:                             ; CODE XREF: sub_4781E0+50↑j
                push    0
                mov     ecx, [ebp+var_6C]
                push    ecx
                push    offset aTbMazerewardSo ; "tb_MazeReward_SoulVaper"
                mov     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_478272
; ---------------------------------------------------------------------------

loc_478269:                             ; CODE XREF: sub_4781E0+C2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_478272:                             ; CODE XREF: sub_4781E0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_4782A4
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_64]
                push    ecx
                mov     ecx, [ebp+var_98]
                add     ecx, 800h
                call    sub_496B80
                mov     dx, [ebp+var_64]
                mov     [eax], dx
                jmp     short loc_478269
; ---------------------------------------------------------------------------

loc_4782A4:                             ; CODE XREF: sub_4781E0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_98]
                call    read_and_verify_checksum
                mov     [ebp+var_65], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_65]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4781E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4782E0      proc near               ; CODE XREF: sub_45E870+B1F↑p

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 90h
                mov     [ebp+var_98], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_6C], eax
                mov     ecx, [ebp+var_98]
                cmp     dword ptr [ecx], 0
                jnz     short loc_478332
                mov     [ebp+var_9C], offset byte_110A50C
                jmp     short loc_478340
; ---------------------------------------------------------------------------

loc_478332:                             ; CODE XREF: sub_4782E0+44↑j
                mov     edx, [ebp+var_98]
                mov     eax, [edx]
                mov     [ebp+var_9C], eax

loc_478340:                             ; CODE XREF: sub_4782E0+50↑j
                push    0
                mov     ecx, [ebp+var_6C]
                push    ecx
                push    offset aTbMazerewardTi ; "tb_MazeReward_Time"
                mov     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_478372
; ---------------------------------------------------------------------------

loc_478369:                             ; CODE XREF: sub_4782E0+C2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_478372:                             ; CODE XREF: sub_4782E0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_4783A4
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_64]
                push    ecx
                mov     ecx, [ebp+var_98]
                add     ecx, 810h
                call    sub_496B80
                mov     dx, [ebp+var_64]
                mov     [eax], dx
                jmp     short loc_478369
; ---------------------------------------------------------------------------

loc_4783A4:                             ; CODE XREF: sub_4782E0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_98]
                call    read_and_verify_checksum
                mov     [ebp+var_65], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_65]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4782E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4783E0      proc near               ; CODE XREF: sub_45E870+B35↑p

var_E4          = dword ptr -0E4h
var_E0          = dword ptr -0E0h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D8h
                mov     [ebp+var_E0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_7C], eax
                mov     ecx, [ebp+var_E0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_478432
                mov     [ebp+var_E4], offset byte_110A50C
                jmp     short loc_478440
; ---------------------------------------------------------------------------

loc_478432:                             ; CODE XREF: sub_4783E0+44↑j
                mov     edx, [ebp+var_E0]
                mov     eax, [edx]
                mov     [ebp+var_E4], eax

loc_478440:                             ; CODE XREF: sub_4783E0+50↑j
                push    0
                mov     ecx, [ebp+var_7C]
                push    ecx
                push    offset aTbMessagenotif ; "tb_MessageNotifyer"
                mov     edx, [ebp+var_E4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_478472
; ---------------------------------------------------------------------------

loc_478469:                             ; CODE XREF: sub_4783E0+130↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_478472:                             ; CODE XREF: sub_4783E0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_478515
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_byte
                lea     edx, [ebp+var_70+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_byte
                lea     eax, [ebp+var_70+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_74]
                push    edx
                mov     ecx, [ebp+var_E0]
                add     ecx, 820h
                call    sub_496E20
                mov     ecx, [ebp+var_74]
                mov     [eax], ecx
                mov     edx, [ebp+var_70]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp+var_64]
                mov     [eax+10h], ecx
                jmp     loc_478469
; ---------------------------------------------------------------------------

loc_478515:                             ; CODE XREF: sub_4783E0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_E0]
                call    read_and_verify_checksum
                mov     [ebp+var_75], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_75]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4783E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_478550      proc near               ; CODE XREF: sub_45E870+B4B↑p

var_118         = dword ptr -118h
var_114         = dword ptr -114h
var_EC          = dword ptr -0ECh
var_E5          = byte ptr -0E5h
var_E4          = byte ptr -0E4h
var_E3          = byte ptr -0E3h
var_E1          = byte ptr -0E1h
var_DD          = byte ptr -0DDh
var_DB          = byte ptr -0DBh
var_D7          = byte ptr -0D7h
var_D5          = byte ptr -0D5h
var_D1          = byte ptr -0D1h
var_CF          = byte ptr -0CFh
var_CB          = byte ptr -0CBh
var_C9          = byte ptr -0C9h
var_C7          = byte ptr -0C7h
var_C6          = byte ptr -0C6h
var_AA          = byte ptr -0AAh
var_8E          = byte ptr -8Eh
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74860 SIZE 0000003F BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_478550
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 10Ch
                mov     [ebp+var_114], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_EC], eax
                mov     ecx, [ebp+var_114]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4785A5
                mov     [ebp+var_118], offset byte_110A50C
                jmp     short loc_4785B3
; ---------------------------------------------------------------------------

loc_4785A5:                             ; CODE XREF: sub_478550+47↑j
                mov     edx, [ebp+var_114]
                mov     eax, [edx]
                mov     [ebp+var_118], eax

loc_4785B3:                             ; CODE XREF: sub_478550+53↑j
                push    0
                mov     ecx, [ebp+var_EC]
                push    ecx
                push    offset aTbModeDistrict ; "tb_Mode_District6"
                mov     edx, [ebp+var_118]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4785E8
; ---------------------------------------------------------------------------

loc_4785DF:                             ; CODE XREF: sub_478550+244↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4785E8:                             ; CODE XREF: sub_478550+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_478799
                lea     ecx, [ebp+var_C6]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_AA]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_8E]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 3
                lea     eax, [ebp+var_E4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_E3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_E1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_DD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_DB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_D7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_D5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_CF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_CB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_C9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_C7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_C6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_AA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_8E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_E4]
                push    ecx
                lea     edx, [ebp+var_E4]
                push    edx
                mov     ecx, [ebp+var_114]
                add     ecx, 830h
                call    sub_496EF0
                mov     ecx, eax
                call    sub_478880
                mov     byte ptr [ebp+var_4], 5
                lea     ecx, [ebp+var_8E]
                call    sub_93E020
                mov     byte ptr [ebp+var_4], 4
                lea     ecx, [ebp+var_AA]
                call    sub_93E020
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_C6]
                call    sub_93E020
                jmp     loc_4785DF
; ---------------------------------------------------------------------------

loc_478799:                             ; CODE XREF: sub_478550+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_114]
                call    read_and_verify_checksum
                mov     [ebp+var_E5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_E5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_478550      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4787E0      proc near               ; CODE XREF: sub_496EF0+130↓p
                                        ; sub_496EF0+142↓p ...

var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_30          = dword ptr -30h
var_20          = dword ptr -20h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F748B0 SIZE 0000002E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4787E0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 38h
                mov     [ebp+var_44], ecx
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_44]
                add     eax, 56h
                mov     [ebp+var_20], eax
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_44]
                add     ecx, 3Ah
                mov     [ebp+var_30], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_44]
                add     edx, 1Eh
                mov     [ebp+var_40], edx
                mov     [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4787E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_478880      proc near               ; CODE XREF: sub_478550+212↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1]
                mov     [eax+1], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+3]
                mov     [eax+3], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+7]
                mov     [eax+7], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+9]
                mov     [eax+9], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Dh]
                mov     [eax+0Dh], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Fh]
                mov     [eax+0Fh], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+13h]
                mov     [eax+13h], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+15h]
                mov     [eax+15h], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+19h]
                mov     [eax+19h], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1Bh]
                mov     [eax+1Bh], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1Dh]
                mov     [eax+1Dh], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 1Eh
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 3Ah
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 3Ah
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 56h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 56h
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+72h]
                mov     [eax+72h], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+74h]
                mov     [eax+74h], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+76h]
                mov     [eax+76h], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+78h]
                mov     [eax+78h], dx
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_478880      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_478A00      proc near               ; CODE XREF: sub_45E870+B61↑p

var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = byte ptr -94h
var_93          = byte ptr -93h
var_8F          = byte ptr -8Fh
var_8D          = byte ptr -8Dh
var_8B          = byte ptr -8Bh
var_89          = byte ptr -89h
var_85          = byte ptr -85h
var_81          = byte ptr -81h
var_7D          = byte ptr -7Dh
var_79          = byte ptr -79h
var_75          = byte ptr -75h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_69          = byte ptr -69h
var_65          = byte ptr -65h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C0h
                push    esi
                push    edi
                mov     [ebp+var_C8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_9C], eax
                mov     ecx, [ebp+var_C8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_478A57
                mov     [ebp+var_CC], offset byte_110A50C
                jmp     short loc_478A65
; ---------------------------------------------------------------------------

loc_478A57:                             ; CODE XREF: sub_478A00+49↑j
                mov     edx, [ebp+var_C8]
                mov     eax, [edx]
                mov     [ebp+var_CC], eax

loc_478A65:                             ; CODE XREF: sub_478A00+55↑j
                push    0
                mov     ecx, [ebp+var_9C]
                push    ecx
                push    offset aTbModeOperatio ; "tb_Mode_Operation"
                mov     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_478A9A
; ---------------------------------------------------------------------------

loc_478A91:                             ; CODE XREF: sub_478A00+19C↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_478A9A:                             ; CODE XREF: sub_478A00+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_478BA1
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_93]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_8D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_8B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_89]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_85]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_81]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_79]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_75]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_71]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_69]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_65]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_94]
                push    eax
                mov     ecx, [ebp+var_C8]
                add     ecx, 840h
                call    sub_4971B0
                mov     ecx, 0Ch
                lea     esi, [ebp+var_94]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_478A91
; ---------------------------------------------------------------------------

loc_478BA1:                             ; CODE XREF: sub_478A00+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_C8]
                call    read_and_verify_checksum
                mov     [ebp+var_95], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_95]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_478A00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_478BE0      proc near               ; CODE XREF: sub_45E870+B77↑p

var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_D4          = dword ptr -0D4h
var_CD          = byte ptr -0CDh
var_CC          = byte ptr -0CCh
var_CB          = byte ptr -0CBh
var_CA          = byte ptr -0CAh
var_AE          = byte ptr -0AEh
var_92          = byte ptr -92h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F748F0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_478BE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0F4h
                mov     [ebp+var_FC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_D4], eax
                mov     ecx, [ebp+var_FC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_478C35
                mov     [ebp+var_100], offset byte_110A50C
                jmp     short loc_478C43
; ---------------------------------------------------------------------------

loc_478C35:                             ; CODE XREF: sub_478BE0+47↑j
                mov     edx, [ebp+var_FC]
                mov     eax, [edx]
                mov     [ebp+var_100], eax

loc_478C43:                             ; CODE XREF: sub_478BE0+53↑j
                push    0
                mov     ecx, [ebp+var_D4]
                push    ecx
                push    offset aTbModeResource ; "tb_Mode_Resources"
                mov     edx, [ebp+var_100]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_478C78
; ---------------------------------------------------------------------------

loc_478C6F:                             ; CODE XREF: sub_478BE0+1A9↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_478C78:                             ; CODE XREF: sub_478BE0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_478D8E
                push    offset sub_93E020
                push    offset sub_48C660
                push    3
                push    1Ch
                lea     eax, [ebp+var_CA]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_CC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_CB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_CA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_AE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_92]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_CC]
                push    eax
                lea     ecx, [ebp+var_CC]
                push    ecx
                mov     ecx, [ebp+var_FC]
                add     ecx, 850h
                call    sub_497290
                mov     ecx, eax
                call    sub_478DF0
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    3
                push    1Ch
                lea     edx, [ebp+var_CA]
                push    edx
                call    sub_ED9E2A
                jmp     loc_478C6F
; ---------------------------------------------------------------------------

loc_478D8E:                             ; CODE XREF: sub_478BE0+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_FC]
                call    read_and_verify_checksum
                mov     [ebp+var_CD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_CD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_478BE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_478DD0      proc near               ; CODE XREF: sub_478BE0+AFBD1E↓j
                                        ; sub_497290+ADF716↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    3
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 2
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_478DD0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_478DF0      proc near               ; CODE XREF: sub_478BE0+18B↑p

var_40          = dword ptr -40h
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 40h
                push    esi
                mov     [ebp+var_40], ecx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1]
                mov     [eax+1], dl
                mov     [ebp+var_4], 0
                jmp     short loc_478E22
; ---------------------------------------------------------------------------

loc_478E19:                             ; CODE XREF: sub_478DF0+61↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_478E22:                             ; CODE XREF: sub_478DF0+27↑j
                cmp     [ebp+var_4], 3
                jnb     short loc_478E53
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+arg_0]
                lea     ecx, [eax+edx+2]
                push    ecx
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+var_40]
                lea     ecx, [eax+edx+2]
                call    sub_4A0090
                jmp     short loc_478E19
; ---------------------------------------------------------------------------

loc_478E53:                             ; CODE XREF: sub_478DF0+36↑j
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+56h]
                mov     [ecx+56h], ax
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+58h]
                mov     [ecx+58h], ax
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+5Ah]
                mov     [ecx+5Ah], ax
                mov     [ebp+var_8], 0
                jmp     short loc_478E8F
; ---------------------------------------------------------------------------

loc_478E86:                             ; CODE XREF: sub_478DF0+BB↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_478E8F:                             ; CODE XREF: sub_478DF0+94↑j
                cmp     [ebp+var_8], 3
                jnb     short loc_478EAD
                mov     edx, [ebp+var_8]
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     cx, [esi+ecx*2+56h]
                mov     [eax+edx*2+56h], cx
                jmp     short loc_478E86
; ---------------------------------------------------------------------------

loc_478EAD:                             ; CODE XREF: sub_478DF0+A3↑j
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+arg_0]
                fld     dword ptr [eax+5Ch]
                fstp    dword ptr [edx+5Ch]
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+arg_0]
                fld     dword ptr [edx+60h]
                fstp    dword ptr [ecx+60h]
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                fld     dword ptr [ecx+64h]
                fstp    dword ptr [eax+64h]
                mov     eax, [ebp+var_40]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_478DF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_478EE0      proc near               ; CODE XREF: sub_45E870+B8D↑p

var_4B0         = dword ptr -4B0h
var_4AC         = dword ptr -4ACh
var_44C         = dword ptr -44Ch
var_445         = byte ptr -445h
var_444         = byte ptr -444h
var_440         = byte ptr -440h
var_424         = byte ptr -424h
var_420         = byte ptr -420h
var_41C         = byte ptr -41Ch
var_400         = byte ptr -400h
var_3E4         = byte ptr -3E4h
var_3E0         = byte ptr -3E0h
var_3DC         = byte ptr -3DCh
var_3D8         = byte ptr -3D8h
var_3D7         = byte ptr -3D7h
var_3D3         = byte ptr -3D3h
var_3CF         = byte ptr -3CFh
var_3CB         = byte ptr -3CBh
var_3C7         = byte ptr -3C7h
var_3C3         = byte ptr -3C3h
var_3BF         = byte ptr -3BFh
var_3BB         = byte ptr -3BBh
var_3B7         = byte ptr -3B7h
var_3B6         = byte ptr -3B6h
var_3B5         = byte ptr -3B5h
var_3B4         = byte ptr -3B4h
var_3B3         = byte ptr -3B3h
var_3B2         = byte ptr -3B2h
var_3B1         = byte ptr -3B1h
var_3B0         = byte ptr -3B0h
var_3AF         = byte ptr -3AFh
var_393         = byte ptr -393h
var_377         = byte ptr -377h
var_376         = byte ptr -376h
var_375         = byte ptr -375h
var_374         = byte ptr -374h
var_370         = byte ptr -370h
var_36F         = byte ptr -36Fh
var_36E         = byte ptr -36Eh
var_36D         = byte ptr -36Dh
var_36C         = byte ptr -36Ch
var_36B         = byte ptr -36Bh
var_36A         = byte ptr -36Ah
var_368         = byte ptr -368h
var_366         = byte ptr -366h
var_364         = byte ptr -364h
var_362         = byte ptr -362h
var_361         = byte ptr -361h
var_35D         = byte ptr -35Dh
var_35B         = byte ptr -35Bh
var_35A         = byte ptr -35Ah
var_359         = byte ptr -359h
var_33D         = byte ptr -33Dh
var_33C         = byte ptr -33Ch
var_33B         = byte ptr -33Bh
var_337         = byte ptr -337h
var_31B         = byte ptr -31Bh
var_2FF         = byte ptr -2FFh
var_2FE         = byte ptr -2FEh
var_2FC         = byte ptr -2FCh
var_2FB         = byte ptr -2FBh
var_2FA         = byte ptr -2FAh
var_2F9         = byte ptr -2F9h
var_2F7         = byte ptr -2F7h
var_2DB         = byte ptr -2DBh
var_2BF         = byte ptr -2BFh
var_2A3         = byte ptr -2A3h
var_2A2         = byte ptr -2A2h
var_2A1         = byte ptr -2A1h
var_2A0         = byte ptr -2A0h
var_284         = byte ptr -284h
var_268         = byte ptr -268h
var_24C         = byte ptr -24Ch
var_248         = byte ptr -248h
var_244         = byte ptr -244h
var_240         = byte ptr -240h
var_23F         = byte ptr -23Fh
var_23E         = byte ptr -23Eh
var_23D         = byte ptr -23Dh
var_239         = byte ptr -239h
var_235         = byte ptr -235h
var_231         = byte ptr -231h
var_230         = byte ptr -230h
var_22F         = byte ptr -22Fh
var_22E         = byte ptr -22Eh
var_212         = byte ptr -212h
var_1F6         = byte ptr -1F6h
var_1DA         = byte ptr -1DAh
var_1D8         = byte ptr -1D8h
var_1D6         = byte ptr -1D6h
var_1D2         = byte ptr -1D2h
var_1CE         = byte ptr -1CEh
var_1CA         = byte ptr -1CAh
var_1C6         = byte ptr -1C6h
var_1C2         = byte ptr -1C2h
var_1BE         = byte ptr -1BEh
var_1BA         = byte ptr -1BAh
var_1B6         = byte ptr -1B6h
var_1B2         = byte ptr -1B2h
var_1AE         = byte ptr -1AEh
var_1AA         = byte ptr -1AAh
var_1A6         = byte ptr -1A6h
var_1A2         = byte ptr -1A2h
var_19E         = byte ptr -19Eh
var_19D         = byte ptr -19Dh
var_19B         = byte ptr -19Bh
var_199         = byte ptr -199h
var_198         = byte ptr -198h
var_197         = byte ptr -197h
var_17B         = byte ptr -17Bh
var_179         = byte ptr -179h
var_177         = byte ptr -177h
var_173         = byte ptr -173h
var_171         = byte ptr -171h
var_170         = byte ptr -170h
var_16C         = byte ptr -16Ch
var_16A         = byte ptr -16Ah
var_168         = byte ptr -168h
var_167         = byte ptr -167h
var_163         = byte ptr -163h
var_15F         = byte ptr -15Fh
var_15B         = byte ptr -15Bh
var_157         = byte ptr -157h
var_153         = byte ptr -153h
var_14F         = byte ptr -14Fh
var_14B         = byte ptr -14Bh
var_147         = byte ptr -147h
var_143         = byte ptr -143h
var_13F         = byte ptr -13Fh
var_13B         = byte ptr -13Bh
var_137         = byte ptr -137h
var_133         = byte ptr -133h
var_12F         = byte ptr -12Fh
var_12B         = byte ptr -12Bh
var_127         = byte ptr -127h
var_123         = byte ptr -123h
var_11F         = byte ptr -11Fh
var_11B         = byte ptr -11Bh
var_117         = byte ptr -117h
var_113         = byte ptr -113h
var_10F         = byte ptr -10Fh
var_10B         = byte ptr -10Bh
var_107         = byte ptr -107h
var_103         = byte ptr -103h
var_FF          = byte ptr -0FFh
var_FB          = byte ptr -0FBh
var_F7          = byte ptr -0F7h
var_F3          = byte ptr -0F3h
var_EF          = byte ptr -0EFh
var_EB          = byte ptr -0EBh
var_E7          = byte ptr -0E7h
var_E3          = byte ptr -0E3h
var_DF          = byte ptr -0DFh
var_C3          = byte ptr -0C3h
var_A7          = byte ptr -0A7h
var_8B          = byte ptr -8Bh
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74910 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_478EE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4A4h
                mov     [ebp+var_4AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_44C], eax
                mov     ecx, [ebp+var_4AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_478F35
                mov     [ebp+var_4B0], offset byte_110A50C
                jmp     short loc_478F43
; ---------------------------------------------------------------------------

loc_478F35:                             ; CODE XREF: sub_478EE0+47↑j
                mov     edx, [ebp+var_4AC]
                mov     eax, [edx]
                mov     [ebp+var_4B0], eax

loc_478F43:                             ; CODE XREF: sub_478EE0+53↑j
                push    0
                mov     ecx, [ebp+var_44C]
                push    ecx
                push    offset aTbMonster ; "tb_Monster"
                mov     edx, [ebp+var_4B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_478F78
; ---------------------------------------------------------------------------

loc_478F6F:                             ; CODE XREF: sub_478EE0+A5A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_478F78:                             ; CODE XREF: sub_478EE0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47993F
                lea     ecx, [ebp+var_444]
                call    sub_479980
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_444]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_440]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_424]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_420]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_41C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_400]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_3E4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_3E0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_3DC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_3D8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_3D7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_3D3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_3CF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_3CB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_3C7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_3C3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_3BF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_3BB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_3B7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_3B6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_3B5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_3B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_3B3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_3B2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_3B1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_3B0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_3AF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_393]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_377]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_376]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_375]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_374]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_370]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_36F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_36E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_36D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_36C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_36B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_36A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_368]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_366]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_364]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_362]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_361]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_35D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_35B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_35A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_359]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_33D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_33C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_33B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_337]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_31B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_2FF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_2FE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_2FC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_2FB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_2FA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_2F9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                push    1FFh
                lea     edx, [ebp+var_2F7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_2DB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_2BF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_2A3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_2A2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_2A1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_2A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_284]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_268]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_24C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_248]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_244]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_240]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_23F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_23E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_23D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_239]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_235]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_231]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_230]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_22F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_22E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_212]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_1F6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_1DA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_1D8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_1D6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1D2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1CE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1CA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1C6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1C2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1BE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1BA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1B6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1B2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1AE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1AA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1A6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_1A2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_19E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_19D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_19B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_199]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_198]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_197]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_17B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_179]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_177]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_173]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_171]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_170]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_16C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_16A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_168]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_167]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_163]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_15F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_15B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_157]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_153]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_14F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_14B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_147]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_143]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_13F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_13B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_137]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_133]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_12F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_12B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_127]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_123]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_11F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_11B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_117]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_113]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_10F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_10B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_107]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_103]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_FF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_FB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_F3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_EF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_EB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_E7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_E3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                push    1FFh
                lea     ecx, [ebp+var_DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_C3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_A7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_8B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_444]
                push    ecx
                lea     edx, [ebp+var_444]
                push    edx
                mov     ecx, [ebp+var_4AC]
                add     ecx, 860h
                call    sub_4974B0
                mov     ecx, eax
                call    sub_479F40
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_444]
                call    sub_479CE0
                jmp     loc_478F6F
; ---------------------------------------------------------------------------

loc_47993F:                             ; CODE XREF: sub_478EE0+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_4AC]
                call    read_and_verify_checksum
                mov     [ebp+var_445], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_445]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_478EE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_479980      proc near               ; CODE XREF: sub_478EE0+AA↑p
                                        ; sub_4974B0+A1↓p

var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_F8          = dword ptr -0F8h
var_F4          = dword ptr -0F4h
var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_E8          = dword ptr -0E8h
var_E4          = dword ptr -0E4h
var_E0          = dword ptr -0E0h
var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_C5          = byte ptr -0C5h
var_C4          = dword ptr -0C4h
var_BC          = dword ptr -0BCh
var_B5          = byte ptr -0B5h
var_B4          = dword ptr -0B4h
var_AC          = dword ptr -0ACh
var_A5          = byte ptr -0A5h
var_A4          = dword ptr -0A4h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74930 SIZE 00000183 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_479980
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0F4h
                mov     [ebp+var_D0], ecx
                mov     eax, [ebp+var_D0]
                add     eax, 4
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_D4], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_D0]
                add     eax, 28h
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_D8], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_D0]
                add     eax, 44h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_DC], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_D0]
                add     eax, 95h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_E0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_D0]
                add     eax, 0B1h
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_E4], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_D0]
                add     eax, 0EBh
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_E8], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_D0]
                add     eax, 10Dh
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_EC], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_7C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     eax, [ebp+var_D0]
                add     eax, 129h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_84], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_F0], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Fh
                push    offset sub_93E020
                push    offset sub_48C660
                push    3
                push    1Ch
                mov     eax, [ebp+var_D0]
                add     eax, 14Dh
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 10h
                push    offset sub_93E020
                push    offset sub_48C660
                push    3
                push    1Ch
                mov     ecx, [ebp+var_D0]
                add     ecx, 1A4h
                push    ecx
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 11h
                push    offset sub_93E020
                push    offset sub_48C660
                push    3
                push    1Ch
                mov     edx, [ebp+var_D0]
                add     edx, 216h
                push    edx
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 12h
                mov     eax, [ebp+var_D0]
                add     eax, 2ADh
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_F4], edx
                mov     byte ptr [ebp+var_4], 13h
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 14h
                mov     eax, [ebp+var_D0]
                add     eax, 365h
                mov     [ebp+var_AC], eax
                lea     ecx, [ebp+var_A5]
                mov     [ebp+var_A4], ecx
                mov     edx, [ebp+var_AC]
                mov     [ebp+var_F8], edx
                mov     byte ptr [ebp+var_4], 15h
                push    0
                push    0
                mov     ecx, [ebp+var_AC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 16h
                mov     eax, [ebp+var_D0]
                add     eax, 381h
                mov     [ebp+var_BC], eax
                lea     ecx, [ebp+var_B5]
                mov     [ebp+var_B4], ecx
                mov     edx, [ebp+var_BC]
                mov     [ebp+var_FC], edx
                mov     byte ptr [ebp+var_4], 17h
                push    0
                push    0
                mov     ecx, [ebp+var_BC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 18h
                mov     eax, [ebp+var_D0]
                add     eax, 39Dh
                mov     [ebp+var_CC], eax
                lea     ecx, [ebp+var_C5]
                mov     [ebp+var_C4], ecx
                mov     edx, [ebp+var_CC]
                mov     [ebp+var_100], edx
                mov     byte ptr [ebp+var_4], 19h
                push    0
                push    0
                mov     ecx, [ebp+var_CC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1Ah
                mov     ecx, [ebp+var_D0]
                add     ecx, 3B9h
                call    sub_48C660
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_D0]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_479980      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_479CE0      proc near               ; CODE XREF: sub_478EE0+A55↑p
                                        ; sub_4974B0+12B↓p ...

var_54          = dword ptr -54h
var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_40          = dword ptr -40h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74AC0 SIZE 0000014F BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_479CE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 48h
                mov     [ebp+var_54], ecx
                mov     [ebp+var_4], 0Eh
                mov     eax, [ebp+var_54]
                add     eax, 3B9h
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 0Fh
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Eh
                mov     byte ptr [ebp+var_4], 0Dh
                mov     ecx, [ebp+var_54]
                add     ecx, 39Dh
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     byte ptr [ebp+var_4], 0Ch
                mov     edx, [ebp+var_54]
                add     edx, 381h
                mov     [ebp+var_18], edx
                mov     byte ptr [ebp+var_4], 11h
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Ch
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_54]
                add     eax, 365h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 12h
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     byte ptr [ebp+var_4], 0Ah
                mov     ecx, [ebp+var_54]
                add     ecx, 2ADh
                mov     [ebp+var_20], ecx
                mov     byte ptr [ebp+var_4], 13h
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Ah
                mov     byte ptr [ebp+var_4], 9
                push    offset sub_93E020
                push    3
                push    1Ch
                mov     edx, [ebp+var_54]
                add     edx, 216h
                push    edx
                call    sub_ED9E2A
                mov     byte ptr [ebp+var_4], 8
                push    offset sub_93E020
                push    3
                push    1Ch
                mov     eax, [ebp+var_54]
                add     eax, 1A4h
                push    eax
                call    sub_ED9E2A
                mov     byte ptr [ebp+var_4], 7
                push    offset sub_93E020
                push    3
                push    1Ch
                mov     ecx, [ebp+var_54]
                add     ecx, 14Dh
                push    ecx
                call    sub_ED9E2A
                mov     byte ptr [ebp+var_4], 6
                mov     edx, [ebp+var_54]
                add     edx, 129h
                mov     [ebp+var_24], edx
                mov     byte ptr [ebp+var_4], 14h
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 6
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_54]
                add     eax, 10Dh
                mov     [ebp+var_28], eax
                mov     byte ptr [ebp+var_4], 15h
                push    0
                push    1
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_54]
                add     ecx, 0EBh
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 16h
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     edx, [ebp+var_54]
                add     edx, 0B1h
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 17h
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     eax, [ebp+var_54]
                add     eax, 95h
                mov     [ebp+var_34], eax
                mov     byte ptr [ebp+var_4], 18h
                push    0
                push    1
                mov     ecx, [ebp+var_34]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_54]
                add     ecx, 44h
                mov     [ebp+var_40], ecx
                mov     byte ptr [ebp+var_4], 19h
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_54]
                add     edx, 28h
                mov     [ebp+var_4C], edx
                mov     byte ptr [ebp+var_4], 1Ah
                push    0
                push    1
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_54]
                add     eax, 4
                mov     [ebp+var_50], eax
                mov     [ebp+var_4], 1Bh
                push    0
                push    1
                mov     ecx, [ebp+var_50]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_479CE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_479F40      proc near               ; CODE XREF: sub_478EE0+A46↑p

var_224         = dword ptr -224h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 224h
                push    esi
                mov     [ebp+var_224], ecx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 4
                push    ecx
                mov     ecx, [ebp+var_224]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+20h]
                mov     [edx+20h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+24h]
                mov     [edx+24h], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 28h
                push    eax
                mov     ecx, [ebp+var_224]
                add     ecx, 28h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 44h
                push    edx
                mov     ecx, [ebp+var_224]
                add     ecx, 44h
                call    sub_4A0090
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+60h]
                mov     [eax+60h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+64h]
                mov     [eax+64h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+68h]
                mov     [eax+68h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+6Ch]
                mov     [eax+6Ch], dl
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+6Dh]
                mov     [eax+6Dh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+71h]
                mov     [eax+71h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+75h]
                mov     [eax+75h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+79h]
                mov     [eax+79h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+7Dh]
                mov     [eax+7Dh], edx
                mov     [ebp+var_4], 0
                jmp     short loc_47A06D
; ---------------------------------------------------------------------------

loc_47A064:                             ; CODE XREF: sub_479F40+14A↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_47A06D:                             ; CODE XREF: sub_479F40+122↑j
                cmp     [ebp+var_4], 5
                jnb     short loc_47A08C
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+6Dh]
                mov     [edx+ecx*4+6Dh], eax
                jmp     short loc_47A064
; ---------------------------------------------------------------------------

loc_47A08C:                             ; CODE XREF: sub_479F40+131↑j
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+81h]
                mov     [ecx+81h], eax
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+85h]
                mov     [ecx+85h], eax
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+89h]
                mov     [ecx+89h], eax
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+8Dh]
                mov     [ecx+8Dh], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+8Eh]
                mov     [ecx+8Eh], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+8Fh]
                mov     [ecx+8Fh], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+90h]
                mov     [ecx+90h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+91h]
                mov     [ecx+91h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+92h]
                mov     [ecx+92h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+93h]
                mov     [ecx+93h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+94h]
                mov     [ecx+94h], al
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 95h
                push    edx
                mov     ecx, [ebp+var_224]
                add     ecx, 95h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0B1h
                push    ecx
                mov     ecx, [ebp+var_224]
                add     ecx, 0B1h
                call    sub_4A0090
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0CDh]
                mov     [edx+0CDh], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0CEh]
                mov     [edx+0CEh], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0CFh]
                mov     [edx+0CFh], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0D0h]
                mov     [edx+0D0h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0D4h]
                mov     [edx+0D4h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0D5h]
                mov     [edx+0D5h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0D6h]
                mov     [edx+0D6h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0D7h]
                mov     [edx+0D7h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0D8h]
                mov     [edx+0D8h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0D9h]
                mov     [edx+0D9h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0DAh]
                mov     [edx+0DAh], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0DCh]
                mov     [edx+0DCh], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0DEh]
                mov     [edx+0DEh], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0E0h]
                mov     [edx+0E0h], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0E2h]
                mov     [edx+0E2h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0E3h]
                mov     [edx+0E3h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0E7h]
                mov     [edx+0E7h], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0E9h]
                mov     [edx+0E9h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0EAh]
                mov     [edx+0EAh], cl
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0EBh
                push    eax
                mov     ecx, [ebp+var_224]
                add     ecx, 0EBh
                call    sub_4A0090
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+107h]
                mov     [ecx+107h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+108h]
                mov     [ecx+108h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+109h]
                mov     [ecx+109h], eax
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 10Dh
                push    edx
                mov     ecx, [ebp+var_224]
                add     ecx, 10Dh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 129h
                push    ecx
                mov     ecx, [ebp+var_224]
                add     ecx, 129h
                call    sub_4A0090
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+145h]
                mov     [edx+145h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+146h]
                mov     [edx+146h], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+148h]
                mov     [edx+148h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+149h]
                mov     [edx+149h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+14Ah]
                mov     [edx+14Ah], cl
                mov     [ebp+var_8], 0
                jmp     short loc_47A479
; ---------------------------------------------------------------------------

loc_47A470:                             ; CODE XREF: sub_479F40+55A↓j
                mov     edx, [ebp+var_8]
                add     edx, 1
                mov     [ebp+var_8], edx

loc_47A479:                             ; CODE XREF: sub_479F40+52E↑j
                cmp     [ebp+var_8], 3
                jnb     short loc_47A49C
                mov     eax, [ebp+var_224]
                add     eax, [ebp+var_8]
                mov     ecx, [ebp+arg_0]
                add     ecx, [ebp+var_8]
                mov     dl, [ecx+148h]
                mov     [eax+148h], dl
                jmp     short loc_47A470
; ---------------------------------------------------------------------------

loc_47A49C:                             ; CODE XREF: sub_479F40+53D↑j
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+14Bh]
                mov     [eax+14Bh], dx
                mov     [ebp+var_C], 0
                jmp     short loc_47A4C5
; ---------------------------------------------------------------------------

loc_47A4BC:                             ; CODE XREF: sub_479F40+5BD↓j
                mov     eax, [ebp+var_C]
                add     eax, 1
                mov     [ebp+var_C], eax

loc_47A4C5:                             ; CODE XREF: sub_479F40+57A↑j
                cmp     [ebp+var_C], 3
                jnb     short loc_47A4FF
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+var_C]
                imul    edx, 1Ch
                mov     eax, [ebp+arg_0]
                lea     ecx, [eax+edx+14Dh]
                push    ecx
                mov     edx, [ebp+var_C]
                imul    edx, 1Ch
                mov     eax, [ebp+var_224]
                lea     ecx, [eax+edx+14Dh]
                call    sub_4A0090
                jmp     short loc_47A4BC
; ---------------------------------------------------------------------------

loc_47A4FF:                             ; CODE XREF: sub_479F40+589↑j
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+1A1h]
                mov     [ecx+1A1h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+1A2h]
                mov     [ecx+1A2h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+1A3h]
                mov     [ecx+1A3h], al
                mov     [ebp+var_10], 0
                jmp     short loc_47A550
; ---------------------------------------------------------------------------

loc_47A547:                             ; CODE XREF: sub_479F40+631↓j
                mov     ecx, [ebp+var_10]
                add     ecx, 1
                mov     [ebp+var_10], ecx

loc_47A550:                             ; CODE XREF: sub_479F40+605↑j
                cmp     [ebp+var_10], 3
                jnb     short loc_47A573
                mov     edx, [ebp+var_224]
                add     edx, [ebp+var_10]
                mov     eax, [ebp+arg_0]
                add     eax, [ebp+var_10]
                mov     cl, [eax+1A1h]
                mov     [edx+1A1h], cl
                jmp     short loc_47A547
; ---------------------------------------------------------------------------

loc_47A573:                             ; CODE XREF: sub_479F40+614↑j
                mov     [ebp+var_14], 0
                jmp     short loc_47A585
; ---------------------------------------------------------------------------

loc_47A57C:                             ; CODE XREF: sub_479F40+67C↓j
                mov     edx, [ebp+var_14]
                add     edx, 1
                mov     [ebp+var_14], edx

loc_47A585:                             ; CODE XREF: sub_479F40+63A↑j
                cmp     [ebp+var_14], 3
                jnb     short loc_47A5BE
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+var_14]
                imul    ecx, 1Ch
                mov     edx, [ebp+arg_0]
                lea     eax, [edx+ecx+1A4h]
                push    eax
                mov     ecx, [ebp+var_14]
                imul    ecx, 1Ch
                mov     edx, [ebp+var_224]
                lea     ecx, [edx+ecx+1A4h]
                call    sub_4A0090
                jmp     short loc_47A57C
; ---------------------------------------------------------------------------

loc_47A5BE:                             ; CODE XREF: sub_479F40+649↑j
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1F8h]
                mov     [eax+1F8h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1FCh]
                mov     [eax+1FCh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+200h]
                mov     [eax+200h], edx
                mov     [ebp+var_18], 0
                jmp     short loc_47A60F
; ---------------------------------------------------------------------------

loc_47A606:                             ; CODE XREF: sub_479F40+6F2↓j
                mov     eax, [ebp+var_18]
                add     eax, 1
                mov     [ebp+var_18], eax

loc_47A60F:                             ; CODE XREF: sub_479F40+6C4↑j
                cmp     [ebp+var_18], 3
                jnb     short loc_47A634
                mov     ecx, [ebp+var_18]
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+var_18]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+1F8h]
                mov     [edx+ecx*4+1F8h], eax
                jmp     short loc_47A606
; ---------------------------------------------------------------------------

loc_47A634:                             ; CODE XREF: sub_479F40+6D3↑j
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+204h]
                mov     [ecx+204h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+205h]
                mov     [ecx+205h], al
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+206h]
                mov     [ecx+206h], al
                mov     [ebp+var_1C], 0
                jmp     short loc_47A685
; ---------------------------------------------------------------------------

loc_47A67C:                             ; CODE XREF: sub_479F40+766↓j
                mov     ecx, [ebp+var_1C]
                add     ecx, 1
                mov     [ebp+var_1C], ecx

loc_47A685:                             ; CODE XREF: sub_479F40+73A↑j
                cmp     [ebp+var_1C], 3
                jnb     short loc_47A6A8
                mov     edx, [ebp+var_224]
                add     edx, [ebp+var_1C]
                mov     eax, [ebp+arg_0]
                add     eax, [ebp+var_1C]
                mov     cl, [eax+204h]
                mov     [edx+204h], cl
                jmp     short loc_47A67C
; ---------------------------------------------------------------------------

loc_47A6A8:                             ; CODE XREF: sub_479F40+749↑j
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+207h]
                mov     [edx+207h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+20Bh]
                mov     [edx+20Bh], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+20Fh]
                mov     [edx+20Fh], ecx
                mov     [ebp+var_20], 0
                jmp     short loc_47A6F9
; ---------------------------------------------------------------------------

loc_47A6F0:                             ; CODE XREF: sub_479F40+7DC↓j
                mov     edx, [ebp+var_20]
                add     edx, 1
                mov     [ebp+var_20], edx

loc_47A6F9:                             ; CODE XREF: sub_479F40+7AE↑j
                cmp     [ebp+var_20], 3
                jnb     short loc_47A71E
                mov     eax, [ebp+var_20]
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+var_20]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+207h]
                mov     [ecx+eax*4+207h], edx
                jmp     short loc_47A6F0
; ---------------------------------------------------------------------------

loc_47A71E:                             ; CODE XREF: sub_479F40+7BD↑j
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+213h]
                mov     [eax+213h], dl
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+214h]
                mov     [eax+214h], dl
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+215h]
                mov     [eax+215h], dl
                mov     [ebp+var_24], 0
                jmp     short loc_47A76F
; ---------------------------------------------------------------------------

loc_47A766:                             ; CODE XREF: sub_479F40+850↓j
                mov     eax, [ebp+var_24]
                add     eax, 1
                mov     [ebp+var_24], eax

loc_47A76F:                             ; CODE XREF: sub_479F40+824↑j
                cmp     [ebp+var_24], 3
                jnb     short loc_47A792
                mov     ecx, [ebp+var_224]
                add     ecx, [ebp+var_24]
                mov     edx, [ebp+arg_0]
                add     edx, [ebp+var_24]
                mov     al, [edx+213h]
                mov     [ecx+213h], al
                jmp     short loc_47A766
; ---------------------------------------------------------------------------

loc_47A792:                             ; CODE XREF: sub_479F40+833↑j
                mov     [ebp+var_28], 0
                jmp     short loc_47A7A4
; ---------------------------------------------------------------------------

loc_47A79B:                             ; CODE XREF: sub_479F40+89C↓j
                mov     ecx, [ebp+var_28]
                add     ecx, 1
                mov     [ebp+var_28], ecx

loc_47A7A4:                             ; CODE XREF: sub_479F40+859↑j
                cmp     [ebp+var_28], 3
                jnb     short loc_47A7DE
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+var_28]
                imul    eax, 1Ch
                mov     ecx, [ebp+arg_0]
                lea     edx, [ecx+eax+216h]
                push    edx
                mov     eax, [ebp+var_28]
                imul    eax, 1Ch
                mov     ecx, [ebp+var_224]
                lea     ecx, [ecx+eax+216h]
                call    sub_4A0090
                jmp     short loc_47A79B
; ---------------------------------------------------------------------------

loc_47A7DE:                             ; CODE XREF: sub_479F40+868↑j
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+26Ah]
                mov     [edx+26Ah], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+26Ch]
                mov     [edx+26Ch], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+26Eh]
                mov     [edx+26Eh], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+272h]
                mov     [edx+272h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+276h]
                mov     [edx+276h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+27Ah]
                mov     [edx+27Ah], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+27Eh]
                mov     [edx+27Eh], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+282h]
                mov     [edx+282h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+286h]
                mov     [edx+286h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+28Ah]
                mov     [edx+28Ah], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+28Eh]
                mov     [edx+28Eh], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+292h]
                mov     [edx+292h], ecx
                mov     [ebp+var_2C], 0
                jmp     short loc_47A8F0
; ---------------------------------------------------------------------------

loc_47A8E7:                             ; CODE XREF: sub_479F40+9D3↓j
                mov     edx, [ebp+var_2C]
                add     edx, 1
                mov     [ebp+var_2C], edx

loc_47A8F0:                             ; CODE XREF: sub_479F40+9A5↑j
                cmp     [ebp+var_2C], 0Ah
                jnb     short loc_47A915
                mov     eax, [ebp+var_2C]
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+var_2C]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+26Eh]
                mov     [ecx+eax*4+26Eh], edx
                jmp     short loc_47A8E7
; ---------------------------------------------------------------------------

loc_47A915:                             ; CODE XREF: sub_479F40+9B4↑j
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+296h]
                mov     [eax+296h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+29Ah]
                mov     [eax+29Ah], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                fld     dword ptr [ecx+29Eh]
                fstp    dword ptr [eax+29Eh]
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2A2h]
                mov     [edx+2A2h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+2A6h]
                mov     [edx+2A6h], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+2A7h]
                mov     [edx+2A7h], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+2A9h]
                mov     [edx+2A9h], cx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+2ABh]
                mov     [edx+2ABh], cl
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+2ACh]
                mov     [edx+2ACh], cl
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 2ADh
                push    eax
                mov     ecx, [ebp+var_224]
                add     ecx, 2ADh
                call    sub_4A0090
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+2C9h]
                mov     [ecx+2C9h], ax
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+2CBh]
                mov     [ecx+2CBh], ax
                mov     ecx, [ebp+var_224]
                mov     edx, [ebp+arg_0]
                fld     dword ptr [edx+2CDh]
                fstp    dword ptr [ecx+2CDh]
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2D1h]
                mov     [eax+2D1h], dx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2D3h]
                mov     [eax+2D3h], dl
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2D4h]
                mov     [eax+2D4h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2D8h]
                mov     [eax+2D8h], dx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2DAh]
                mov     [eax+2DAh], dx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2DCh]
                mov     [eax+2DCh], dl
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2DDh]
                mov     [eax+2DDh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2E1h]
                mov     [eax+2E1h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2E5h]
                mov     [eax+2E5h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2E9h]
                mov     [eax+2E9h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2EDh]
                mov     [eax+2EDh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2F1h]
                mov     [eax+2F1h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2F5h]
                mov     [eax+2F5h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2F9h]
                mov     [eax+2F9h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2FDh]
                mov     [eax+2FDh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+301h]
                mov     [eax+301h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+305h]
                mov     [eax+305h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+309h]
                mov     [eax+309h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+30Dh]
                mov     [eax+30Dh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+311h]
                mov     [eax+311h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+315h]
                mov     [eax+315h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+319h]
                mov     [eax+319h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+31Dh]
                mov     [eax+31Dh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+321h]
                mov     [eax+321h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+325h]
                mov     [eax+325h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+329h]
                mov     [eax+329h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+32Dh]
                mov     [eax+32Dh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+331h]
                mov     [eax+331h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+335h]
                mov     [eax+335h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+339h]
                mov     [eax+339h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+33Dh]
                mov     [eax+33Dh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+341h]
                mov     [eax+341h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+345h]
                mov     [eax+345h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+349h]
                mov     [eax+349h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+34Dh]
                mov     [eax+34Dh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+351h]
                mov     [eax+351h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+355h]
                mov     [eax+355h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+359h]
                mov     [eax+359h], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+35Dh]
                mov     [eax+35Dh], edx
                mov     eax, [ebp+var_224]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+361h]
                mov     [eax+361h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 365h
                push    ecx
                mov     ecx, [ebp+var_224]
                add     ecx, 365h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 381h
                push    eax
                mov     ecx, [ebp+var_224]
                add     ecx, 381h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 39Dh
                push    edx
                mov     ecx, [ebp+var_224]
                add     ecx, 39Dh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 3B9h
                push    ecx
                mov     ecx, [ebp+var_224]
                add     ecx, 3B9h
                call    sub_4A0090
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+3D5h]
                mov     [edx+3D5h], ecx
                mov     edx, [ebp+var_224]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+3D9h]
                mov     [edx+3D9h], cl
                mov     eax, [ebp+var_224]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_479F40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47AE50      proc near               ; CODE XREF: sub_45E870+BA3↑p

var_250         = dword ptr -250h
var_24C         = dword ptr -24Ch
var_F4          = dword ptr -0F4h
var_ED          = byte ptr -0EDh
var_EC          = byte ptr -0ECh
var_E8          = byte ptr -0E8h
var_CC          = byte ptr -0CCh
var_B0          = byte ptr -0B0h
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74C20 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47AE50
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 244h
                mov     [ebp+var_24C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_F4], eax
                mov     ecx, [ebp+var_24C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47AEA5
                mov     [ebp+var_250], offset byte_110A50C
                jmp     short loc_47AEB3
; ---------------------------------------------------------------------------

loc_47AEA5:                             ; CODE XREF: sub_47AE50+47↑j
                mov     edx, [ebp+var_24C]
                mov     eax, [edx]
                mov     [ebp+var_250], eax

loc_47AEB3:                             ; CODE XREF: sub_47AE50+53↑j
                push    0
                mov     ecx, [ebp+var_F4]
                push    ecx
                push    offset aTbMonsterBroke ; "tb_Monster_Broken_Parts"
                mov     edx, [ebp+var_250]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47AEE8
; ---------------------------------------------------------------------------

loc_47AEDF:                             ; CODE XREF: sub_47AE50+18F↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47AEE8:                             ; CODE XREF: sub_47AE50+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47AFE4
                lea     ecx, [ebp+var_EC]
                call    sub_47B020
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_EC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_E8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_B0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_EC]
                push    ecx
                lea     edx, [ebp+var_EC]
                push    edx
                mov     ecx, [ebp+var_24C]
                add     ecx, 870h
                call    sub_4976B0
                mov     ecx, eax
                call    sub_47B1F0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_EC]
                call    sub_47B130
                jmp     loc_47AEDF
; ---------------------------------------------------------------------------

loc_47AFE4:                             ; CODE XREF: sub_47AE50+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_24C]
                call    read_and_verify_checksum
                mov     [ebp+var_ED], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_ED]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47AE50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47B020      proc near               ; CODE XREF: sub_47AE50+AA↑p
                                        ; sub_4976B0+A1↓p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74C40 SIZE 0000004D BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47B020
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 4
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 20h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 48h
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 6Ch
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47B020      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47B130      proc near               ; CODE XREF: sub_47AE50+18A↑p
                                        ; sub_4976B0+12B↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_2C          = dword ptr -2Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74CA0 SIZE 00000041 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47B130
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 6Ch
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 48h
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 20h
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 4
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47B130      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47B1F0      proc near               ; CODE XREF: sub_47AE50+17B↑p

var_78          = dword ptr -78h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 78h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 4
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 20h
                push    eax
                mov     ecx, [ebp+var_78]
                add     ecx, 20h
                call    sub_4A0090
                mov     ecx, [ebp+var_78]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+3Ch]
                mov     [ecx+3Ch], eax
                mov     ecx, [ebp+var_78]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+40h]
                mov     [ecx+40h], eax
                mov     ecx, [ebp+var_78]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+44h]
                mov     [ecx+44h], eax
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 48h
                push    edx
                mov     ecx, [ebp+var_78]
                add     ecx, 48h
                call    sub_4A0090
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+64h]
                mov     [eax+64h], edx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+68h]
                mov     [eax+68h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 6Ch
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 6Ch
                call    sub_4A0090
                mov     eax, [ebp+var_78]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_47B1F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47B2C0      proc near               ; CODE XREF: sub_45E870+BB9↑p

var_1BC         = dword ptr -1BCh
var_1B8         = dword ptr -1B8h
var_A4          = dword ptr -0A4h
var_9D          = byte ptr -9Dh
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48A0D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1B0h
                mov     [ebp+var_1B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A4], eax
                mov     ecx, [ebp+var_1B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47B315
                mov     [ebp+var_1BC], offset byte_110A50C
                jmp     short loc_47B323
; ---------------------------------------------------------------------------

loc_47B315:                             ; CODE XREF: sub_47B2C0+47↑j
                mov     edx, [ebp+var_1B8]
                mov     eax, [edx]
                mov     [ebp+var_1BC], eax

loc_47B323:                             ; CODE XREF: sub_47B2C0+53↑j
                push    0
                mov     ecx, [ebp+var_A4]
                push    ecx
                push    offset aTbMonsterParts ; "tb_Monster_Parts"
                mov     edx, [ebp+var_1BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47B358
; ---------------------------------------------------------------------------

loc_47B34F:                             ; CODE XREF: sub_47B2C0+118↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47B358:                             ; CODE XREF: sub_47B2C0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_47B3DD
                lea     ecx, [ebp+var_9C]
                call    sub_460790
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_9C]
                push    ecx
                mov     ecx, [ebp+var_1B8]
                add     ecx, 880h
                call    sub_4978B0
                mov     ecx, eax
                call    sub_48A230
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_9C]
                call    sub_A56C70
                jmp     loc_47B34F
; ---------------------------------------------------------------------------

loc_47B3DD:                             ; CODE XREF: sub_47B2C0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_1B8]
                call    read_and_verify_checksum
                mov     [ebp+var_9D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_9D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47B2C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47B420      proc near               ; CODE XREF: sub_45E870+BCF↑p

var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B4h
                mov     [ebp+var_BC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_BC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47B472
                mov     [ebp+var_C0], offset byte_110A50C
                jmp     short loc_47B480
; ---------------------------------------------------------------------------

loc_47B472:                             ; CODE XREF: sub_47B420+44↑j
                mov     edx, [ebp+var_BC]
                mov     eax, [edx]
                mov     [ebp+var_C0], eax

loc_47B480:                             ; CODE XREF: sub_47B420+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbMonsterRimli ; "tb_Monster_RimLight"
                mov     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47B4B2
; ---------------------------------------------------------------------------

loc_47B4A9:                             ; CODE XREF: sub_47B420+10A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47B4B2:                             ; CODE XREF: sub_47B420+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_47B52F
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_68+3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_6C]
                push    eax
                mov     ecx, [ebp+var_BC]
                add     ecx, 890h
                call    sub_49B520
                mov     ecx, [ebp+var_6C]
                mov     [eax], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_64]
                mov     [eax+8], ecx
                jmp     loc_47B4A9
; ---------------------------------------------------------------------------

loc_47B52F:                             ; CODE XREF: sub_47B420+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_BC]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47B420      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47B570      proc near               ; CODE XREF: sub_45E870+BE5↑p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_11C         = dword ptr -11Ch
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = dword ptr -80h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488190
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 12Ch
                mov     [ebp+var_130], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_130]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47B5C5
                mov     [ebp+var_134], offset byte_110A50C
                jmp     short loc_47B5D3
; ---------------------------------------------------------------------------

loc_47B5C5:                             ; CODE XREF: sub_47B570+47↑j
                mov     edx, [ebp+var_130]
                mov     eax, [edx]
                mov     [ebp+var_134], eax

loc_47B5D3:                             ; CODE XREF: sub_47B570+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbMonsterScrip ; "tb_Monster_script"
                mov     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47B608
; ---------------------------------------------------------------------------

loc_47B5FF:                             ; CODE XREF: sub_47B570+162↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47B608:                             ; CODE XREF: sub_47B570+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47B6D7
                lea     eax, [ebp+var_7C]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_138], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_130]
                add     ecx, 8A0h
                call    sub_49C730
                mov     [ebp+var_11C], eax
                mov     eax, [ebp+var_11C]
                mov     ecx, [ebp+var_80]
                mov     [eax], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_11C]
                add     ecx, 4
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                mov     [ebp+var_12C], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_12C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_47B5FF
; ---------------------------------------------------------------------------

loc_47B6D7:                             ; CODE XREF: sub_47B570+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_130]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47B570      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47B710      proc near               ; CODE XREF: sub_45E870+BFB↑p

var_2AC         = dword ptr -2ACh
var_2A8         = dword ptr -2A8h
var_114         = dword ptr -114h
var_10D         = byte ptr -10Dh
var_10C         = byte ptr -10Ch
var_10A         = byte ptr -10Ah
var_EE          = byte ptr -0EEh
var_D2          = byte ptr -0D2h
var_B6          = byte ptr -0B6h
var_9A          = byte ptr -9Ah
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74D20 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47B710
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 2A0h
                mov     [ebp+var_2A8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_114], eax
                mov     ecx, [ebp+var_2A8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47B765
                mov     [ebp+var_2AC], offset byte_110A50C
                jmp     short loc_47B773
; ---------------------------------------------------------------------------

loc_47B765:                             ; CODE XREF: sub_47B710+47↑j
                mov     edx, [ebp+var_2A8]
                mov     eax, [edx]
                mov     [ebp+var_2AC], eax

loc_47B773:                             ; CODE XREF: sub_47B710+53↑j
                push    0
                mov     ecx, [ebp+var_114]
                push    ecx
                push    offset aTbMonsterWeapo ; "tb_Monster_Weapon"
                mov     edx, [ebp+var_2AC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47B7A8
; ---------------------------------------------------------------------------

loc_47B79F:                             ; CODE XREF: sub_47B710+1A3↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47B7A8:                             ; CODE XREF: sub_47B710+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47B8B8
                lea     ecx, [ebp+var_10C]
                call    sub_47B8F0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_10C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_10A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_EE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_D2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_B6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_9A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_10C]
                push    eax
                lea     ecx, [ebp+var_10C]
                push    ecx
                mov     ecx, [ebp+var_2A8]
                add     ecx, 8B0h
                call    sub_497A40
                mov     ecx, eax
                call    sub_47BAF0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_10C]
                call    sub_47BA10
                jmp     loc_47B79F
; ---------------------------------------------------------------------------

loc_47B8B8:                             ; CODE XREF: sub_47B710+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_2A8]
                call    read_and_verify_checksum
                mov     [ebp+var_10D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_10D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47B710      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47B8F0      proc near               ; CODE XREF: sub_475E90+AA↑p
                                        ; sub_47B710+AA↑p ...

var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_64          = dword ptr -64h
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_2D          = byte ptr -2Dh
var_2C          = dword ptr -2Ch
var_24          = dword ptr -24h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74D40 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47B8F0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 80h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                add     eax, 2
                mov     [ebp+var_24], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_24]
                mov     [ebp+var_7C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_78]
                add     eax, 1Eh
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_2D]
                mov     [ebp+var_2C], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_80], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_78]
                add     eax, 3Ah
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_84], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_78]
                add     eax, 56h
                mov     [ebp+var_64], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_64]
                mov     [ebp+var_88], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_64]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_78]
                add     eax, 72h
                mov     [ebp+var_74], eax
                lea     ecx, [ebp+var_6D]
                mov     [ebp+var_6C], ecx
                mov     edx, [ebp+var_74]
                mov     [ebp+var_8C], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_74]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47B8F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47BA10      proc near               ; CODE XREF: sub_475E90+156↑p
                                        ; sub_47B710+19E↑p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74DA0 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47BA10
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 3
                mov     eax, [ebp+var_4C]
                add     eax, 72h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_4C]
                add     ecx, 56h
                mov     [ebp+var_24], ecx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_4C]
                add     edx, 3Ah
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_4C]
                add     eax, 1Eh
                mov     [ebp+var_3C], eax
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_4C]
                add     ecx, 2
                mov     [ebp+var_48], ecx
                mov     [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47BA10      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47BAF0      proc near               ; CODE XREF: sub_47B710+18F↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Eh
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ah
                push    edx
                mov     ecx, [ebp+var_70]
                add     ecx, 3Ah
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 56h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 56h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 72h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 72h
                call    sub_4A0090
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+8Eh]
                mov     [ecx+8Eh], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+92h]
                mov     [ecx+92h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+96h]
                mov     [ecx+96h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+9Ah]
                mov     [ecx+9Ah], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+9Eh]
                mov     [ecx+9Eh], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0A2h]
                mov     [ecx+0A2h], eax
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_47BAF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47BC00      proc near               ; CODE XREF: sub_45E870+C11↑p

var_430         = dword ptr -430h
var_42C         = dword ptr -42Ch
var_3F4         = dword ptr -3F4h
var_3ED         = byte ptr -3EDh
var_3EC         = byte ptr -3ECh
var_3E8         = byte ptr -3E8h
var_3E4         = byte ptr -3E4h
var_3C8         = byte ptr -3C8h
var_3C4         = byte ptr -3C4h
var_3C0         = byte ptr -3C0h
var_3BC         = byte ptr -3BCh
var_3B8         = byte ptr -3B8h
var_3B4         = byte ptr -3B4h
var_3B0         = byte ptr -3B0h
var_3AC         = byte ptr -3ACh
var_3A8         = byte ptr -3A8h
var_3A4         = byte ptr -3A4h
var_3A0         = byte ptr -3A0h
var_39C         = byte ptr -39Ch
var_398         = byte ptr -398h
var_394         = byte ptr -394h
var_390         = byte ptr -390h
var_38C         = byte ptr -38Ch
var_370         = byte ptr -370h
var_36C         = byte ptr -36Ch
var_368         = byte ptr -368h
var_34C         = byte ptr -34Ch
var_348         = byte ptr -348h
var_344         = byte ptr -344h
var_328         = byte ptr -328h
var_324         = byte ptr -324h
var_320         = byte ptr -320h
var_304         = byte ptr -304h
var_300         = byte ptr -300h
var_2E4         = byte ptr -2E4h
var_2C8         = byte ptr -2C8h
var_2C4         = byte ptr -2C4h
var_2C0         = byte ptr -2C0h
var_2BC         = byte ptr -2BCh
var_2A0         = byte ptr -2A0h
var_284         = byte ptr -284h
var_268         = byte ptr -268h
var_264         = byte ptr -264h
var_260         = byte ptr -260h
var_244         = byte ptr -244h
var_240         = byte ptr -240h
var_224         = byte ptr -224h
var_208         = byte ptr -208h
var_1EC         = byte ptr -1ECh
var_1D0         = byte ptr -1D0h
var_1B4         = byte ptr -1B4h
var_198         = byte ptr -198h
var_17C         = byte ptr -17Ch
var_160         = byte ptr -160h
var_144         = byte ptr -144h
var_128         = byte ptr -128h
var_10C         = byte ptr -10Ch
var_F0          = byte ptr -0F0h
var_D4          = byte ptr -0D4h
var_B8          = byte ptr -0B8h
var_9C          = byte ptr -9Ch
var_80          = byte ptr -80h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74E00 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47BC00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 424h
                mov     [ebp+var_42C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_3F4], eax
                mov     ecx, [ebp+var_42C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47BC55
                mov     [ebp+var_430], offset byte_110A50C
                jmp     short loc_47BC63
; ---------------------------------------------------------------------------

loc_47BC55:                             ; CODE XREF: sub_47BC00+47↑j
                mov     edx, [ebp+var_42C]
                mov     eax, [edx]
                mov     [ebp+var_430], eax

loc_47BC63:                             ; CODE XREF: sub_47BC00+53↑j
                push    0
                mov     ecx, [ebp+var_3F4]
                push    ecx
                push    offset aTbMyroomFurnit ; "tb_Myroom_Furniture"
                mov     edx, [ebp+var_430]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47BC98
; ---------------------------------------------------------------------------

loc_47BC8F:                             ; CODE XREF: sub_47BC00+4D7↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47BC98:                             ; CODE XREF: sub_47BC00+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47C0DC
                lea     ecx, [ebp+var_3EC]
                call    sub_47C120
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_3EC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_3E8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_3E4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_3C8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_3C4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_3C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_3BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_3B8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_3B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_3B0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_3AC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_3A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_3A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_3A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_39C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_398]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_394]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_390]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_38C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_370]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_36C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_368]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_34C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_348]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_344]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_328]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_324]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_320]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_304]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_300]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_2E4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_2C8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_2C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_2C0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_2BC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_2A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_284]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_268]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_264]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_260]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_244]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_240]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_224]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_208]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_1EC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_1D0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_1B4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_198]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_17C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_160]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_144]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_128]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_10C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_D4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_B8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_3EC]
                push    ecx
                lea     edx, [ebp+var_3EC]
                push    edx
                mov     ecx, [ebp+var_42C]
                add     ecx, 8C0h
                call    sub_497C70
                mov     ecx, eax
                call    sub_47C780
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_3EC]
                call    sub_47C4C0
                jmp     loc_47BC8F
; ---------------------------------------------------------------------------

loc_47C0DC:                             ; CODE XREF: sub_47BC00+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_42C]
                call    read_and_verify_checksum
                mov     [ebp+var_3ED], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_3ED]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47BC00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47C120      proc near               ; CODE XREF: sub_47BC00+AA↑p
                                        ; sub_497C70+A1↓p

var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_F8          = dword ptr -0F8h
var_F4          = dword ptr -0F4h
var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_E8          = dword ptr -0E8h
var_E4          = dword ptr -0E4h
var_E0          = dword ptr -0E0h
var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_C5          = byte ptr -0C5h
var_C4          = dword ptr -0C4h
var_BC          = dword ptr -0BCh
var_B5          = byte ptr -0B5h
var_B4          = dword ptr -0B4h
var_AC          = dword ptr -0ACh
var_A5          = byte ptr -0A5h
var_A4          = dword ptr -0A4h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74E20 SIZE 000001AF BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0F4h
                mov     [ebp+var_D0], ecx
                mov     eax, [ebp+var_D0]
                add     eax, 8
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_D4], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_D0]
                add     eax, 60h
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_D8], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_D0]
                add     eax, 84h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_DC], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_D0]
                add     eax, 0A8h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_E0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_D0]
                add     eax, 0CCh
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_E4], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_D0]
                add     eax, 0ECh
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_E8], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_D0]
                add     eax, 108h
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_EC], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_7C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     eax, [ebp+var_D0]
                add     eax, 130h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_84], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_F0], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Fh
                mov     eax, [ebp+var_D0]
                add     eax, 14Ch
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_F4], edx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 11h
                mov     eax, [ebp+var_D0]
                add     eax, 168h
                mov     [ebp+var_AC], eax
                lea     ecx, [ebp+var_A5]
                mov     [ebp+var_A4], ecx
                mov     edx, [ebp+var_AC]
                mov     [ebp+var_F8], edx
                mov     byte ptr [ebp+var_4], 12h
                push    0
                push    0
                mov     ecx, [ebp+var_AC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 13h
                mov     eax, [ebp+var_D0]
                add     eax, 18Ch
                mov     [ebp+var_BC], eax
                lea     ecx, [ebp+var_B5]
                mov     [ebp+var_B4], ecx
                mov     edx, [ebp+var_BC]
                mov     [ebp+var_FC], edx
                mov     byte ptr [ebp+var_4], 14h
                push    0
                push    0
                mov     ecx, [ebp+var_BC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 15h
                mov     eax, [ebp+var_D0]
                add     eax, 1ACh
                mov     [ebp+var_CC], eax
                lea     ecx, [ebp+var_C5]
                mov     [ebp+var_C4], ecx
                mov     edx, [ebp+var_CC]
                mov     [ebp+var_100], edx
                mov     byte ptr [ebp+var_4], 16h
                push    0
                push    0
                mov     ecx, [ebp+var_CC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 17h
                mov     ecx, [ebp+var_D0]
                add     ecx, 1C8h
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 18h
                mov     ecx, [ebp+var_D0]
                add     ecx, 1E4h
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 19h
                mov     ecx, [ebp+var_D0]
                add     ecx, 200h
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1Ah
                mov     ecx, [ebp+var_D0]
                add     ecx, 21Ch
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1Bh
                push    offset sub_93E020
                push    offset sub_48C660
                push    4
                push    1Ch
                mov     eax, [ebp+var_D0]
                add     eax, 238h
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1Ch
                push    offset sub_93E020
                push    offset sub_48C660
                push    4
                push    1Ch
                mov     ecx, [ebp+var_D0]
                add     ecx, 2A8h
                push    ecx
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1Dh
                push    offset sub_93E020
                push    offset sub_48C660
                push    4
                push    1Ch
                mov     edx, [ebp+var_D0]
                add     edx, 318h
                push    edx
                call    sub_EDA018
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_D0]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47C120      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47C4C0      proc near               ; CODE XREF: sub_47BC00+4D2↑p
                                        ; sub_497C70+12B↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_50          = dword ptr -50h
var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F74FE0 SIZE 0000018A BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47C4C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 11h
                push    offset sub_93E020
                push    4
                push    1Ch
                mov     eax, [ebp+var_58]
                add     eax, 318h
                push    eax
                call    sub_ED9E2A
                mov     byte ptr [ebp+var_4], 10h
                push    offset sub_93E020
                push    4
                push    1Ch
                mov     ecx, [ebp+var_58]
                add     ecx, 2A8h
                push    ecx
                call    sub_ED9E2A
                mov     byte ptr [ebp+var_4], 0Fh
                push    offset sub_93E020
                push    4
                push    1Ch
                mov     edx, [ebp+var_58]
                add     edx, 238h
                push    edx
                call    sub_ED9E2A
                mov     byte ptr [ebp+var_4], 0Eh
                mov     eax, [ebp+var_58]
                add     eax, 21Ch
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 12h
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Eh
                mov     byte ptr [ebp+var_4], 0Dh
                mov     ecx, [ebp+var_58]
                add     ecx, 200h
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 13h
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     byte ptr [ebp+var_4], 0Ch
                mov     edx, [ebp+var_58]
                add     edx, 1E4h
                mov     [ebp+var_18], edx
                mov     byte ptr [ebp+var_4], 14h
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Ch
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_58]
                add     eax, 1C8h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 15h
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     byte ptr [ebp+var_4], 0Ah
                mov     ecx, [ebp+var_58]
                add     ecx, 1ACh
                mov     [ebp+var_20], ecx
                mov     byte ptr [ebp+var_4], 16h
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Ah
                mov     byte ptr [ebp+var_4], 9
                mov     edx, [ebp+var_58]
                add     edx, 18Ch
                mov     [ebp+var_24], edx
                mov     byte ptr [ebp+var_4], 17h
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     byte ptr [ebp+var_4], 8
                mov     eax, [ebp+var_58]
                add     eax, 168h
                mov     [ebp+var_28], eax
                mov     byte ptr [ebp+var_4], 18h
                push    0
                push    1
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 8
                mov     byte ptr [ebp+var_4], 7
                mov     ecx, [ebp+var_58]
                add     ecx, 14Ch
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 19h
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     byte ptr [ebp+var_4], 6
                mov     edx, [ebp+var_58]
                add     edx, 130h
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 1Ah
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 6
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_58]
                add     eax, 108h
                mov     [ebp+var_34], eax
                mov     byte ptr [ebp+var_4], 1Bh
                push    0
                push    1
                mov     ecx, [ebp+var_34]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_58]
                add     ecx, 0ECh
                mov     [ebp+var_38], ecx
                mov     byte ptr [ebp+var_4], 1Ch
                push    0
                push    1
                mov     ecx, [ebp+var_38]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     edx, [ebp+var_58]
                add     edx, 0CCh
                mov     [ebp+var_3C], edx
                mov     byte ptr [ebp+var_4], 1Dh
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 0A8h
                mov     [ebp+var_40], eax
                mov     byte ptr [ebp+var_4], 1Eh
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 84h
                mov     [ebp+var_44], ecx
                mov     byte ptr [ebp+var_4], 1Fh
                push    0
                push    1
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 60h
                mov     [ebp+var_50], edx
                mov     byte ptr [ebp+var_4], 20h
                push    0
                push    1
                mov     ecx, [ebp+var_50]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 8
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 21h
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47C4C0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47C780      proc near               ; CODE XREF: sub_47BC00+4C3↑p

var_B4          = dword ptr -0B4h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 0B4h
                mov     [ebp+var_B4], ecx
                mov     eax, [ebp+var_B4]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_B4]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 8
                push    ecx
                mov     ecx, [ebp+var_B4]
                add     ecx, 8
                call    sub_4A0090
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+24h]
                mov     [edx+24h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+28h]
                mov     [edx+28h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2Ch]
                mov     [edx+2Ch], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+30h]
                mov     [edx+30h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+34h]
                mov     [edx+34h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+38h]
                mov     [edx+38h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+3Ch]
                mov     [edx+3Ch], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+40h]
                mov     [edx+40h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+44h]
                mov     [edx+44h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+48h]
                mov     [edx+48h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+4Ch]
                mov     [edx+4Ch], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+50h]
                mov     [edx+50h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+54h]
                mov     [edx+54h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+58h]
                mov     [edx+58h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+5Ch]
                mov     [edx+5Ch], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 60h
                push    eax
                mov     ecx, [ebp+var_B4]
                add     ecx, 60h
                call    sub_4A0090
                mov     ecx, [ebp+var_B4]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+7Ch]
                mov     [ecx+7Ch], eax
                mov     ecx, [ebp+var_B4]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+80h]
                mov     [ecx+80h], eax
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 84h
                push    edx
                mov     ecx, [ebp+var_B4]
                add     ecx, 84h
                call    sub_4A0090
                mov     eax, [ebp+var_B4]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0A0h]
                mov     [eax+0A0h], edx
                mov     eax, [ebp+var_B4]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0A4h]
                mov     [eax+0A4h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0A8h
                push    ecx
                mov     ecx, [ebp+var_B4]
                add     ecx, 0A8h
                call    sub_4A0090
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C4h]
                mov     [edx+0C4h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C8h]
                mov     [edx+0C8h], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0CCh
                push    eax
                mov     ecx, [ebp+var_B4]
                add     ecx, 0CCh
                call    sub_4A0090
                mov     ecx, [ebp+var_B4]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0E8h]
                mov     [ecx+0E8h], eax
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0ECh
                push    edx
                mov     ecx, [ebp+var_B4]
                add     ecx, 0ECh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 108h
                push    ecx
                mov     ecx, [ebp+var_B4]
                add     ecx, 108h
                call    sub_4A0090
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+124h]
                mov     [edx+124h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+128h]
                mov     [edx+128h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+12Ch]
                mov     [edx+12Ch], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 130h
                push    eax
                mov     ecx, [ebp+var_B4]
                add     ecx, 130h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 14Ch
                push    edx
                mov     ecx, [ebp+var_B4]
                add     ecx, 14Ch
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 168h
                push    ecx
                mov     ecx, [ebp+var_B4]
                add     ecx, 168h
                call    sub_4A0090
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+184h]
                mov     [edx+184h], ecx
                mov     edx, [ebp+var_B4]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+188h]
                mov     [edx+188h], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 18Ch
                push    eax
                mov     ecx, [ebp+var_B4]
                add     ecx, 18Ch
                call    sub_4A0090
                mov     ecx, [ebp+var_B4]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1A8h]
                mov     [ecx+1A8h], eax
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 1ACh
                push    edx
                mov     ecx, [ebp+var_B4]
                add     ecx, 1ACh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 1C8h
                push    ecx
                mov     ecx, [ebp+var_B4]
                add     ecx, 1C8h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1E4h
                push    eax
                mov     ecx, [ebp+var_B4]
                add     ecx, 1E4h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 200h
                push    edx
                mov     ecx, [ebp+var_B4]
                add     ecx, 200h
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 21Ch
                push    ecx
                mov     ecx, [ebp+var_B4]
                add     ecx, 21Ch
                call    sub_4A0090
                mov     [ebp+var_4], 0
                jmp     short loc_47CBD3
; ---------------------------------------------------------------------------

loc_47CBCA:                             ; CODE XREF: sub_47C780+48A↓j
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_47CBD3:                             ; CODE XREF: sub_47C780+448↑j
                cmp     [ebp+var_4], 4
                jnb     short loc_47CC0C
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+var_4]
                imul    ecx, 1Ch
                mov     edx, [ebp+arg_0]
                lea     eax, [edx+ecx+238h]
                push    eax
                mov     ecx, [ebp+var_4]
                imul    ecx, 1Ch
                mov     edx, [ebp+var_B4]
                lea     ecx, [edx+ecx+238h]
                call    sub_4A0090
                jmp     short loc_47CBCA
; ---------------------------------------------------------------------------

loc_47CC0C:                             ; CODE XREF: sub_47C780+457↑j
                mov     [ebp+var_8], 0
                jmp     short loc_47CC1E
; ---------------------------------------------------------------------------

loc_47CC15:                             ; CODE XREF: sub_47C780+4D6↓j
                mov     eax, [ebp+var_8]
                add     eax, 1
                mov     [ebp+var_8], eax

loc_47CC1E:                             ; CODE XREF: sub_47C780+493↑j
                cmp     [ebp+var_8], 4
                jnb     short loc_47CC58
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+var_8]
                imul    edx, 1Ch
                mov     eax, [ebp+arg_0]
                lea     ecx, [eax+edx+2A8h]
                push    ecx
                mov     edx, [ebp+var_8]
                imul    edx, 1Ch
                mov     eax, [ebp+var_B4]
                lea     ecx, [eax+edx+2A8h]
                call    sub_4A0090
                jmp     short loc_47CC15
; ---------------------------------------------------------------------------

loc_47CC58:                             ; CODE XREF: sub_47C780+4A2↑j
                mov     [ebp+var_C], 0
                jmp     short loc_47CC6A
; ---------------------------------------------------------------------------

loc_47CC61:                             ; CODE XREF: sub_47C780+522↓j
                mov     ecx, [ebp+var_C]
                add     ecx, 1
                mov     [ebp+var_C], ecx

loc_47CC6A:                             ; CODE XREF: sub_47C780+4DF↑j
                cmp     [ebp+var_C], 4
                jnb     short loc_47CCA4
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+var_C]
                imul    eax, 1Ch
                mov     ecx, [ebp+arg_0]
                lea     edx, [ecx+eax+318h]
                push    edx
                mov     eax, [ebp+var_C]
                imul    eax, 1Ch
                mov     ecx, [ebp+var_B4]
                lea     ecx, [ecx+eax+318h]
                call    sub_4A0090
                jmp     short loc_47CC61
; ---------------------------------------------------------------------------

loc_47CCA4:                             ; CODE XREF: sub_47C780+4EE↑j
                mov     eax, [ebp+var_B4]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_47C780      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47CCB0      proc near               ; CODE XREF: sub_45E870+C27↑p

var_10C         = dword ptr -10Ch
var_108         = dword ptr -108h
var_DC          = dword ptr -0DCh
var_D5          = byte ptr -0D5h
var_D4          = byte ptr -0D4h
var_D0          = byte ptr -0D0h
var_CC          = byte ptr -0CCh
var_C8          = byte ptr -0C8h
var_C4          = byte ptr -0C4h
var_C0          = byte ptr -0C0h
var_BC          = byte ptr -0BCh
var_B8          = byte ptr -0B8h
var_B4          = byte ptr -0B4h
var_B0          = byte ptr -0B0h
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 100h
                push    esi
                push    edi
                mov     [ebp+var_108], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_DC], eax
                mov     ecx, [ebp+var_108]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47CD07
                mov     [ebp+var_10C], offset byte_110A50C
                jmp     short loc_47CD15
; ---------------------------------------------------------------------------

loc_47CD07:                             ; CODE XREF: sub_47CCB0+49↑j
                mov     edx, [ebp+var_108]
                mov     eax, [edx]
                mov     [ebp+var_10C], eax

loc_47CD15:                             ; CODE XREF: sub_47CCB0+55↑j
                push    0
                mov     ecx, [ebp+var_DC]
                push    ecx
                push    offset aTbMyroomGreed ; "tb_Myroom_Greed"
                mov     edx, [ebp+var_10C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47CD4A
; ---------------------------------------------------------------------------

loc_47CD41:                             ; CODE XREF: sub_47CCB0+250↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47CD4A:                             ; CODE XREF: sub_47CCB0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47CF05
                lea     eax, [ebp+var_D4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_D4]
                push    eax
                mov     ecx, [ebp+var_108]
                add     ecx, 8D0h
                call    sub_497EA0
                mov     ecx, 1Bh
                lea     esi, [ebp+var_D4]
                mov     edi, eax
                rep movsd
                jmp     loc_47CD41
; ---------------------------------------------------------------------------

loc_47CF05:                             ; CODE XREF: sub_47CCB0+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_108]
                call    read_and_verify_checksum
                mov     [ebp+var_D5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_D5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_47CCB0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47CF40      proc near               ; CODE XREF: sub_45E870+C3D↑p

var_E0          = dword ptr -0E0h
var_DC          = dword ptr -0DCh
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D4h
                mov     [ebp+var_DC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_7C], eax
                mov     ecx, [ebp+var_DC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47CF92
                mov     [ebp+var_E0], offset byte_110A50C
                jmp     short loc_47CFA0
; ---------------------------------------------------------------------------

loc_47CF92:                             ; CODE XREF: sub_47CF40+44↑j
                mov     edx, [ebp+var_DC]
                mov     eax, [edx]
                mov     [ebp+var_E0], eax

loc_47CFA0:                             ; CODE XREF: sub_47CF40+50↑j
                push    0
                mov     ecx, [ebp+var_7C]
                push    ecx
                push    offset aTbMyroomInfo ; "tb_Myroom_Info"
                mov     edx, [ebp+var_E0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47CFD2
; ---------------------------------------------------------------------------

loc_47CFC9:                             ; CODE XREF: sub_47CF40+108↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47CFD2:                             ; CODE XREF: sub_47CF40+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_47D04D
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_74]
                push    edx
                mov     ecx, [ebp+var_DC]
                add     ecx, 8E0h
                call    sub_496E20
                mov     ecx, [ebp+var_74]
                mov     [eax], ecx
                mov     edx, [ebp+var_70]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+8], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+0Ch], edx
                mov     ecx, [ebp+var_64]
                mov     [eax+10h], ecx
                jmp     loc_47CFC9
; ---------------------------------------------------------------------------

loc_47D04D:                             ; CODE XREF: sub_47CF40+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_DC]
                call    read_and_verify_checksum
                mov     [ebp+var_75], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_75]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47CF40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47D080      proc near               ; CODE XREF: sub_45E870+C53↑p

var_144         = dword ptr -144h
var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_124         = dword ptr -124h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75180 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48AC80
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 138h
                mov     [ebp+var_13C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_13C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47D0D5
                mov     [ebp+var_140], offset byte_110A50C
                jmp     short loc_47D0E3
; ---------------------------------------------------------------------------

loc_47D0D5:                             ; CODE XREF: sub_47D080+47↑j
                mov     edx, [ebp+var_13C]
                mov     eax, [edx]
                mov     [ebp+var_140], eax

loc_47D0E3:                             ; CODE XREF: sub_47D080+53↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbNamefilter ; "tb_NameFilter"
                mov     edx, [ebp+var_140]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47D118
; ---------------------------------------------------------------------------

loc_47D10F:                             ; CODE XREF: sub_47D080+183↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47D118:                             ; CODE XREF: sub_47D080+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47D208
                lea     eax, [ebp+var_7F]
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_144], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_7F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_84]
                push    eax
                mov     ecx, [ebp+var_13C]
                add     ecx, 8F0h
                call    sub_49E110
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_124]
                mov     edx, [ebp+var_84]
                mov     [ecx], edx
                mov     eax, [ebp+var_124]
                mov     cl, [ebp+var_80]
                mov     [eax+4], cl
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7F]
                push    eax
                mov     ecx, [ebp+var_124]
                add     ecx, 5
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7F]
                mov     [ebp+var_138], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_138]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_47D10F
; ---------------------------------------------------------------------------

loc_47D208:                             ; CODE XREF: sub_47D080+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_13C]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47D080      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47D240      proc near               ; CODE XREF: sub_47D080+AF8119↓j
                                        ; sub_49E110+AD8E9E↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 5
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47D240      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47D290      proc near               ; CODE XREF: sub_45E870+C69↑p

var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_84          = dword ptr -84h
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_75          = byte ptr -75h
var_73          = byte ptr -73h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_6B          = byte ptr -6Bh
var_69          = byte ptr -69h
var_67          = byte ptr -67h
var_63          = byte ptr -63h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A8h
                push    esi
                push    edi
                mov     [ebp+var_B0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_84], eax
                mov     ecx, [ebp+var_B0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47D2E7
                mov     [ebp+var_B4], offset byte_110A50C
                jmp     short loc_47D2F5
; ---------------------------------------------------------------------------

loc_47D2E7:                             ; CODE XREF: sub_47D290+49↑j
                mov     edx, [ebp+var_B0]
                mov     eax, [edx]
                mov     [ebp+var_B4], eax

loc_47D2F5:                             ; CODE XREF: sub_47D290+55↑j
                push    0
                mov     ecx, [ebp+var_84]
                push    ecx
                push    offset aTbNavigationWa ; "tb_Navigation_Warpmap"
                mov     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47D32A
; ---------------------------------------------------------------------------

loc_47D321:                             ; CODE XREF: sub_47D290+14E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47D32A:                             ; CODE XREF: sub_47D290+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47D3E3
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_75]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_71]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_69]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_63]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7C]
                push    edx
                mov     ecx, [ebp+var_B0]
                add     ecx, 900h
                call    sub_495410
                mov     ecx, 6
                lea     esi, [ebp+var_7C]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_47D321
; ---------------------------------------------------------------------------

loc_47D3E3:                             ; CODE XREF: sub_47D290+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_B0]
                call    read_and_verify_checksum
                mov     [ebp+var_7D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_7D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_47D290      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47D420      proc near               ; CODE XREF: sub_45E870+C7F↑p

var_150         = dword ptr -150h
var_14C         = dword ptr -14Ch
var_148         = dword ptr -148h
var_144         = dword ptr -144h
var_138         = dword ptr -138h
var_A0          = dword ptr -0A0h
var_99          = byte ptr -99h
var_98          = dword ptr -98h
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = dword ptr -88h
var_84          = byte ptr -84h
var_83          = dword ptr -83h
var_7F          = byte ptr -7Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F751E0 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47D420
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 144h
                mov     [ebp+var_148], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_148]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47D475
                mov     [ebp+var_14C], offset byte_110A50C
                jmp     short loc_47D483
; ---------------------------------------------------------------------------

loc_47D475:                             ; CODE XREF: sub_47D420+47↑j
                mov     edx, [ebp+var_148]
                mov     eax, [edx]
                mov     [ebp+var_14C], eax

loc_47D483:                             ; CODE XREF: sub_47D420+53↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbNotice ; "tb_Notice"
                mov     edx, [ebp+var_14C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47D4B8
; ---------------------------------------------------------------------------

loc_47D4AF:                             ; CODE XREF: sub_47D420+1A7↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47D4B8:                             ; CODE XREF: sub_47D420+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47D5CC
                lea     eax, [ebp+var_7F]
                mov     [ebp+var_A0], eax
                lea     ecx, [ebp+var_99]
                mov     [ebp+var_98], ecx
                mov     edx, [ebp+var_A0]
                mov     [ebp+var_150], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_A0]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_byte
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_7F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_88]
                push    ecx
                mov     ecx, [ebp+var_148]
                add     ecx, 910h
                call    sub_497FC0
                mov     [ebp+var_138], eax
                mov     edx, [ebp+var_138]
                mov     eax, [ebp+var_88]
                mov     [edx], eax
                mov     ecx, [ebp+var_138]
                mov     dl, [ebp+var_84]
                mov     [ecx+4], dl
                mov     eax, [ebp+var_138]
                mov     ecx, [ebp+var_83]
                mov     [eax+5], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7F]
                push    eax
                mov     ecx, [ebp+var_138]
                add     ecx, 9
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7F]
                mov     [ebp+var_144], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_144]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_47D4AF
; ---------------------------------------------------------------------------

loc_47D5CC:                             ; CODE XREF: sub_47D420+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_148]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47D420      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47D610      proc near               ; CODE XREF: sub_47D420+AF7DD9↓j
                                        ; sub_497FC0+ADEABE↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 9
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47D610      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47D660      proc near               ; CODE XREF: sub_45E870+C95↑p

var_1F8         = dword ptr -1F8h
var_1F4         = dword ptr -1F4h
var_1BC         = dword ptr -1BCh
var_1B5         = byte ptr -1B5h
var_1B4         = byte ptr -1B4h
var_1B0         = byte ptr -1B0h
var_1AE         = byte ptr -1AEh
var_1AD         = byte ptr -1ADh
var_191         = byte ptr -191h
var_18D         = byte ptr -18Dh
var_189         = byte ptr -189h
var_185         = byte ptr -185h
var_181         = byte ptr -181h
var_17D         = byte ptr -17Dh
var_17C         = byte ptr -17Ch
var_178         = byte ptr -178h
var_177         = byte ptr -177h
var_176         = byte ptr -176h
var_172         = byte ptr -172h
var_171         = byte ptr -171h
var_16D         = byte ptr -16Dh
var_16C         = byte ptr -16Ch
var_168         = byte ptr -168h
var_166         = byte ptr -166h
var_164         = byte ptr -164h
var_162         = byte ptr -162h
var_161         = byte ptr -161h
var_160         = byte ptr -160h
var_15F         = byte ptr -15Fh
var_15E         = byte ptr -15Eh
var_15D         = byte ptr -15Dh
var_15C         = byte ptr -15Ch
var_15A         = byte ptr -15Ah
var_158         = byte ptr -158h
var_156         = byte ptr -156h
var_13A         = byte ptr -13Ah
var_139         = byte ptr -139h
var_135         = byte ptr -135h
var_131         = byte ptr -131h
var_115         = byte ptr -115h
var_113         = byte ptr -113h
var_111         = byte ptr -111h
var_10F         = byte ptr -10Fh
var_10D         = byte ptr -10Dh
var_10B         = byte ptr -10Bh
var_109         = byte ptr -109h
var_107         = byte ptr -107h
var_105         = byte ptr -105h
var_103         = byte ptr -103h
var_101         = byte ptr -101h
var_FF          = byte ptr -0FFh
var_FD          = byte ptr -0FDh
var_FB          = byte ptr -0FBh
var_F9          = byte ptr -0F9h
var_F7          = byte ptr -0F7h
var_F5          = byte ptr -0F5h
var_D9          = byte ptr -0D9h
var_BD          = byte ptr -0BDh
var_A1          = byte ptr -0A1h
var_85          = byte ptr -85h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75220 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47D660
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1ECh
                mov     [ebp+var_1F4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_1BC], eax
                mov     ecx, [ebp+var_1F4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47D6B5
                mov     [ebp+var_1F8], offset byte_110A50C
                jmp     short loc_47D6C3
; ---------------------------------------------------------------------------

loc_47D6B5:                             ; CODE XREF: sub_47D660+47↑j
                mov     edx, [ebp+var_1F4]
                mov     eax, [edx]
                mov     [ebp+var_1F8], eax

loc_47D6C3:                             ; CODE XREF: sub_47D660+53↑j
                push    0
                mov     ecx, [ebp+var_1BC]
                push    ecx
                push    offset aTbNpc   ; "tb_NPC"
                mov     edx, [ebp+var_1F8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47D6F8
; ---------------------------------------------------------------------------

loc_47D6EF:                             ; CODE XREF: sub_47D660+458↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47D6F8:                             ; CODE XREF: sub_47D660+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47DABD
                lea     ecx, [ebp+var_1B4]
                call    sub_47DB00
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_1B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1B0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_1AE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    0FFh
                lea     eax, [ebp+var_1AD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_191]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_18D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_189]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_185]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_181]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_17D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_17C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_178]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_177]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_176]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_172]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_171]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_16D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_16C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_168]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_166]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_164]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_162]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_161]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_160]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_15F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_15E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_15D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_15C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_15A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_158]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     eax, [ebp+var_156]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_13A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_139]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_135]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    0FFh
                lea     ecx, [ebp+var_131]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_115]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_113]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_111]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_10F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_10D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_10B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_109]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_107]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_105]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_103]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_101]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_FF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_FD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_FB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_F9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_F7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     eax, [ebp+var_F5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_D9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_BD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_A1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_85]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_1B4]
                push    edx
                lea     eax, [ebp+var_1B4]
                push    eax
                mov     ecx, [ebp+var_1F4]
                add     ecx, 920h
                call    sub_498270
                mov     ecx, eax
                call    sub_47DE40
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_1B4]
                call    sub_47DCF0
                jmp     loc_47D6EF
; ---------------------------------------------------------------------------

loc_47DABD:                             ; CODE XREF: sub_47D660+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_1F4]
                call    read_and_verify_checksum
                mov     [ebp+var_1B5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_1B5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47D660      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47DB00      proc near               ; CODE XREF: sub_47D660+AA↑p
                                        ; sub_498270+A1↓p

var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_A8          = dword ptr -0A8h
var_A4          = dword ptr -0A4h
var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_8D          = byte ptr -8Dh
var_8C          = dword ptr -8Ch
var_84          = dword ptr -84h
var_7D          = byte ptr -7Dh
var_7C          = dword ptr -7Ch
var_74          = dword ptr -74h
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75240 SIZE 000000B7 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47DB00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B4h
                mov     [ebp+var_A0], ecx
                mov     eax, [ebp+var_A0]
                add     eax, 7
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_A4], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_A0]
                add     eax, 5Eh
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_A8], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_A0]
                add     eax, 83h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_AC], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_A0]
                add     eax, 0BFh
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_B0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_A0]
                add     eax, 0DBh
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_B4], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_A0]
                add     eax, 0F7h
                mov     [ebp+var_74], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_74]
                mov     [ebp+var_B8], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_74]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_A0]
                add     eax, 113h
                mov     [ebp+var_84], eax
                lea     ecx, [ebp+var_7D]
                mov     [ebp+var_7C], ecx
                mov     edx, [ebp+var_84]
                mov     [ebp+var_BC], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_84]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     eax, [ebp+var_A0]
                add     eax, 12Fh
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_8D]
                mov     [ebp+var_8C], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_C0], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_A0]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47DB00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47DCF0      proc near               ; CODE XREF: sub_47D660+453↑p
                                        ; sub_498270+12B↓p ...

var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_40          = dword ptr -40h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75310 SIZE 0000009C BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47DCF0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 44h
                mov     [ebp+var_50], ecx
                mov     [ebp+var_4], 6
                mov     eax, [ebp+var_50]
                add     eax, 12Fh
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 6
                mov     byte ptr [ebp+var_4], 5
                mov     ecx, [ebp+var_50]
                add     ecx, 113h
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     edx, [ebp+var_50]
                add     edx, 0F7h
                mov     [ebp+var_18], edx
                mov     byte ptr [ebp+var_4], 9
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_50]
                add     eax, 0DBh
                mov     [ebp+var_24], eax
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_50]
                add     ecx, 0BFh
                mov     [ebp+var_30], ecx
                mov     byte ptr [ebp+var_4], 0Bh
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_50]
                add     edx, 83h
                mov     [ebp+var_34], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    1
                mov     ecx, [ebp+var_34]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_50]
                add     eax, 5Eh
                mov     [ebp+var_40], eax
                mov     byte ptr [ebp+var_4], 0Dh
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_50]
                add     ecx, 7
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 0Eh
                push    0
                push    1
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47DCF0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47DE40      proc near               ; CODE XREF: sub_47D660+444↑p

var_C0          = dword ptr -0C0h
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 0C0h
                push    esi
                mov     [ebp+var_C0], ecx
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+4]
                mov     [eax+4], dx
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+6]
                mov     [eax+6], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 7
                push    ecx
                mov     ecx, [ebp+var_C0]
                add     ecx, 7
                call    sub_4A0090
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+23h]
                mov     [edx+23h], ecx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+27h]
                mov     [edx+27h], ecx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2Bh]
                mov     [edx+2Bh], ecx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2Fh]
                mov     [edx+2Fh], ecx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+33h]
                mov     [edx+33h], ecx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+37h]
                mov     [edx+37h], cl
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+38h]
                mov     [edx+38h], ecx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+3Ch]
                mov     [edx+3Ch], cl
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+3Dh]
                mov     [edx+3Dh], cl
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+3Eh]
                mov     [edx+3Eh], ecx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+42h]
                mov     [edx+42h], cl
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+43h]
                mov     [edx+43h], ecx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+47h]
                mov     [edx+47h], cl
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+48h]
                mov     [edx+48h], ecx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+4Ch]
                mov     [edx+4Ch], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+4Eh]
                mov     [edx+4Eh], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+50h]
                mov     [edx+50h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+52h]
                mov     [edx+52h], cl
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+53h]
                mov     [edx+53h], cl
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+54h]
                mov     [edx+54h], cl
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+55h]
                mov     [edx+55h], cl
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+56h]
                mov     [edx+56h], cl
                mov     [ebp+var_4], 0
                jmp     short loc_47DFFC
; ---------------------------------------------------------------------------

loc_47DFF3:                             ; CODE XREF: sub_47DE40+1D7↓j
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_47DFFC:                             ; CODE XREF: sub_47DE40+1B1↑j
                cmp     [ebp+var_4], 3
                jnb     short loc_47E019
                mov     eax, [ebp+var_C0]
                add     eax, [ebp+var_4]
                mov     ecx, [ebp+arg_0]
                add     ecx, [ebp+var_4]
                mov     dl, [ecx+54h]
                mov     [eax+54h], dl
                jmp     short loc_47DFF3
; ---------------------------------------------------------------------------

loc_47E019:                             ; CODE XREF: sub_47DE40+1C0↑j
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+57h]
                mov     [eax+57h], dl
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+58h]
                mov     [eax+58h], dx
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Ah]
                mov     [eax+5Ah], dx
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Ch]
                mov     [eax+5Ch], dx
                mov     [ebp+var_8], 0
                jmp     short loc_47E06D
; ---------------------------------------------------------------------------

loc_47E064:                             ; CODE XREF: sub_47DE40+24C↓j
                mov     eax, [ebp+var_8]
                add     eax, 1
                mov     [ebp+var_8], eax

loc_47E06D:                             ; CODE XREF: sub_47DE40+222↑j
                cmp     [ebp+var_8], 3
                jnb     short loc_47E08E
                mov     ecx, [ebp+var_8]
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+58h]
                mov     [edx+ecx*2+58h], ax
                jmp     short loc_47E064
; ---------------------------------------------------------------------------

loc_47E08E:                             ; CODE XREF: sub_47DE40+231↑j
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 5Eh
                push    edx
                mov     ecx, [ebp+var_C0]
                add     ecx, 5Eh
                call    sub_4A0090
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+7Ah]
                mov     [eax+7Ah], dl
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+7Bh]
                mov     [eax+7Bh], edx
                mov     eax, [ebp+var_C0]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+7Fh]
                mov     [eax+7Fh], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 83h
                push    ecx
                mov     ecx, [ebp+var_C0]
                add     ecx, 83h
                call    sub_4A0090
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+9Fh]
                mov     [edx+9Fh], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0A1h]
                mov     [edx+0A1h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0A3h]
                mov     [edx+0A3h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0A5h]
                mov     [edx+0A5h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0A7h]
                mov     [edx+0A7h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0A9h]
                mov     [edx+0A9h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0ABh]
                mov     [edx+0ABh], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0ADh]
                mov     [edx+0ADh], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0AFh]
                mov     [edx+0AFh], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0B1h]
                mov     [edx+0B1h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0B3h]
                mov     [edx+0B3h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0B5h]
                mov     [edx+0B5h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0B7h]
                mov     [edx+0B7h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0B9h]
                mov     [edx+0B9h], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0BBh]
                mov     [edx+0BBh], cx
                mov     edx, [ebp+var_C0]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+0BDh]
                mov     [edx+0BDh], cx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0BFh
                push    eax
                mov     ecx, [ebp+var_C0]
                add     ecx, 0BFh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0DBh
                push    edx
                mov     ecx, [ebp+var_C0]
                add     ecx, 0DBh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0F7h
                push    ecx
                mov     ecx, [ebp+var_C0]
                add     ecx, 0F7h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 113h
                push    eax
                mov     ecx, [ebp+var_C0]
                add     ecx, 113h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 12Fh
                push    edx
                mov     ecx, [ebp+var_C0]
                add     ecx, 12Fh
                call    sub_4A0090
                mov     eax, [ebp+var_C0]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_47DE40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47E330      proc near               ; CODE XREF: sub_45E870+CAB↑p

var_1BC         = dword ptr -1BCh
var_1B8         = dword ptr -1B8h
var_A4          = dword ptr -0A4h
var_9D          = byte ptr -9Dh
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48A0D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1B0h
                mov     [ebp+var_1B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A4], eax
                mov     ecx, [ebp+var_1B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47E385
                mov     [ebp+var_1BC], offset byte_110A50C
                jmp     short loc_47E393
; ---------------------------------------------------------------------------

loc_47E385:                             ; CODE XREF: sub_47E330+47↑j
                mov     edx, [ebp+var_1B8]
                mov     eax, [edx]
                mov     [ebp+var_1BC], eax

loc_47E393:                             ; CODE XREF: sub_47E330+53↑j
                push    0
                mov     ecx, [ebp+var_A4]
                push    ecx
                push    offset aTbNpcParts ; "tb_NPC_Parts"
                mov     edx, [ebp+var_1BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47E3C8
; ---------------------------------------------------------------------------

loc_47E3BF:                             ; CODE XREF: sub_47E330+118↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47E3C8:                             ; CODE XREF: sub_47E330+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_47E44D
                lea     ecx, [ebp+var_9C]
                call    sub_460790
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    0FFh
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_9C]
                push    ecx
                mov     ecx, [ebp+var_1B8]
                add     ecx, 930h
                call    sub_4978B0
                mov     ecx, eax
                call    sub_48A230
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_9C]
                call    sub_A56C70
                jmp     loc_47E3BF
; ---------------------------------------------------------------------------

loc_47E44D:                             ; CODE XREF: sub_47E330+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_1B8]
                call    read_and_verify_checksum
                mov     [ebp+var_9D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_9D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47E330      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47E490      proc near               ; CODE XREF: sub_45E870+CC1↑p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_11C         = dword ptr -11Ch
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = dword ptr -80h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488190
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 12Ch
                mov     [ebp+var_130], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_130]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47E4E5
                mov     [ebp+var_134], offset byte_110A50C
                jmp     short loc_47E4F3
; ---------------------------------------------------------------------------

loc_47E4E5:                             ; CODE XREF: sub_47E490+47↑j
                mov     edx, [ebp+var_130]
                mov     eax, [edx]
                mov     [ebp+var_134], eax

loc_47E4F3:                             ; CODE XREF: sub_47E490+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbNpcScript ; "tb_NPC_Script"
                mov     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47E528
; ---------------------------------------------------------------------------

loc_47E51F:                             ; CODE XREF: sub_47E490+162↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47E528:                             ; CODE XREF: sub_47E490+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47E5F7
                lea     eax, [ebp+var_7C]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_138], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_130]
                add     ecx, 940h
                call    sub_49C730
                mov     [ebp+var_11C], eax
                mov     eax, [ebp+var_11C]
                mov     ecx, [ebp+var_80]
                mov     [eax], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_11C]
                add     ecx, 4
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                mov     [ebp+var_12C], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_12C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_47E51F
; ---------------------------------------------------------------------------

loc_47E5F7:                             ; CODE XREF: sub_47E490+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_130]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47E490      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47E630      proc near               ; CODE XREF: sub_45E870+CD7↑p

var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_10C         = dword ptr -10Ch
var_105         = byte ptr -105h
var_104         = byte ptr -104h
var_102         = byte ptr -102h
var_100         = byte ptr -100h
var_FE          = byte ptr -0FEh
var_FD          = byte ptr -0FDh
var_FC          = byte ptr -0FCh
var_F8          = byte ptr -0F8h
var_F4          = byte ptr -0F4h
var_F0          = byte ptr -0F0h
var_EE          = byte ptr -0EEh
var_EC          = byte ptr -0ECh
var_E8          = byte ptr -0E8h
var_E4          = byte ptr -0E4h
var_E0          = byte ptr -0E0h
var_DC          = byte ptr -0DCh
var_D8          = byte ptr -0D8h
var_D4          = byte ptr -0D4h
var_B8          = byte ptr -0B8h
var_B4          = byte ptr -0B4h
var_B0          = byte ptr -0B0h
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F753E0 SIZE 0000001E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47E630
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 134h
                mov     [ebp+var_13C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_10C], eax
                mov     ecx, [ebp+var_13C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47E685
                mov     [ebp+var_140], offset byte_110A50C
                jmp     short loc_47E693
; ---------------------------------------------------------------------------

loc_47E685:                             ; CODE XREF: sub_47E630+47↑j
                mov     edx, [ebp+var_13C]
                mov     eax, [edx]
                mov     [ebp+var_140], eax

loc_47E693:                             ; CODE XREF: sub_47E630+53↑j
                push    0
                mov     ecx, [ebp+var_10C]
                push    ecx
                push    offset aTbOperationInf ; "tb_Operation_Info"
                mov     edx, [ebp+var_140]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47E6C8
; ---------------------------------------------------------------------------

loc_47E6BF:                             ; CODE XREF: sub_47E630+32A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47E6C8:                             ; CODE XREF: sub_47E630+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47E95F
                lea     ecx, [ebp+var_D4]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_104]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_102]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_100]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_FE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_FD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_FC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_F8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_F4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_EE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_EC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_E8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_E4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_E0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_DC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_D8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                push    1FFh
                lea     ecx, [ebp+var_D4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_B0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_AC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_A8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_A4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_94]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_76]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_104]
                push    edx
                lea     eax, [ebp+var_104]
                push    eax
                mov     ecx, [ebp+var_13C]
                add     ecx, 950h
                call    sub_498500
                mov     ecx, eax
                call    sub_47E9F0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_D4]
                mov     [ebp+var_138], ecx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_138]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_47E6BF
; ---------------------------------------------------------------------------

loc_47E95F:                             ; CODE XREF: sub_47E630+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_13C]
                call    read_and_verify_checksum
                mov     [ebp+var_105], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_105]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47E630      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47E9A0      proc near               ; CODE XREF: sub_47E630+AF6DBE↓j
                                        ; sub_498500+ADE5E1↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 30h
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47E9A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47E9F0      proc near               ; CODE XREF: sub_47E630+2FE↑p

var_40          = dword ptr -40h
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 40h
                push    esi
                mov     [ebp+var_40], ecx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2]
                mov     [eax+2], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+4]
                mov     [eax+4], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+6]
                mov     [eax+6], dl
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+7]
                mov     [eax+7], dl
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+8]
                mov     [eax+8], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                mov     [eax+10h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+14h]
                mov     [eax+14h], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+16h]
                mov     [eax+16h], dx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+18h]
                mov     [eax+18h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Ch]
                mov     [eax+1Ch], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+20h]
                mov     [eax+20h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+24h]
                mov     [eax+24h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+28h]
                mov     [eax+28h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2Ch]
                mov     [eax+2Ch], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 30h
                push    ecx
                mov     ecx, [ebp+var_40]
                add     ecx, 30h
                call    sub_4A0090
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+4Ch]
                mov     [edx+4Ch], ecx
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+50h]
                mov     [edx+50h], ecx
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+54h]
                mov     [edx+54h], ecx
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+58h]
                mov     [edx+58h], ecx
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+5Ch]
                mov     [edx+5Ch], ecx
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+60h]
                mov     [edx+60h], ecx
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+64h]
                mov     [edx+64h], ecx
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+68h]
                mov     [edx+68h], ecx
                mov     [ebp+var_4], 0
                jmp     short loc_47EB4E
; ---------------------------------------------------------------------------

loc_47EB45:                             ; CODE XREF: sub_47E9F0+178↓j
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_47EB4E:                             ; CODE XREF: sub_47E9F0+153↑j
                cmp     [ebp+var_4], 8
                jnb     short loc_47EB6A
                mov     eax, [ebp+var_4]
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+4Ch]
                mov     [ecx+eax*4+4Ch], edx
                jmp     short loc_47EB45
; ---------------------------------------------------------------------------

loc_47EB6A:                             ; CODE XREF: sub_47E9F0+162↑j
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+6Ch]
                mov     [eax+6Ch], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+70h]
                mov     [eax+70h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+74h]
                mov     [eax+74h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+78h]
                mov     [eax+78h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+7Ch]
                mov     [eax+7Ch], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+80h]
                mov     [eax+80h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+84h]
                mov     [eax+84h], edx
                mov     eax, [ebp+var_40]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+88h]
                mov     [eax+88h], edx
                mov     [ebp+var_8], 0
                jmp     short loc_47EBEE
; ---------------------------------------------------------------------------

loc_47EBE5:                             ; CODE XREF: sub_47E9F0+218↓j
                mov     eax, [ebp+var_8]
                add     eax, 1
                mov     [ebp+var_8], eax

loc_47EBEE:                             ; CODE XREF: sub_47E9F0+1F3↑j
                cmp     [ebp+var_8], 8
                jnb     short loc_47EC0A
                mov     ecx, [ebp+var_8]
                mov     edx, [ebp+var_40]
                mov     eax, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+6Ch]
                mov     [edx+ecx*4+6Ch], eax
                jmp     short loc_47EBE5
; ---------------------------------------------------------------------------

loc_47EC0A:                             ; CODE XREF: sub_47E9F0+202↑j
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+8Ch]
                mov     [ecx+8Ch], ax
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+8Eh]
                mov     [ecx+8Eh], ax
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+90h]
                mov     [ecx+90h], ax
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+92h]
                mov     [ecx+92h], eax
                mov     ecx, [ebp+var_40]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+96h]
                mov     [ecx+96h], eax
                mov     eax, [ebp+var_40]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_47E9F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47EC80      proc near               ; CODE XREF: sub_45E870+CED↑p

var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_67          = byte ptr -67h
var_65          = byte ptr -65h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B8h
                mov     [ebp+var_C0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_C0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47ECD2
                mov     [ebp+var_C4], offset byte_110A50C
                jmp     short loc_47ECE0
; ---------------------------------------------------------------------------

loc_47ECD2:                             ; CODE XREF: sub_47EC80+44↑j
                mov     edx, [ebp+var_C0]
                mov     eax, [edx]
                mov     [ebp+var_C4], eax

loc_47ECE0:                             ; CODE XREF: sub_47EC80+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbOptionString ; "tb_Option_String"
                mov     edx, [ebp+var_C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47ED12
; ---------------------------------------------------------------------------

loc_47ED09:                             ; CODE XREF: sub_47EC80+108↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47ED12:                             ; CODE XREF: sub_47EC80+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_47ED8D
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6C+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_65]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C]
                push    eax
                mov     ecx, [ebp+var_C0]
                add     ecx, 960h
                call    sub_495D90
                mov     ecx, [ebp+var_6C]
                mov     [eax], ecx
                mov     edx, [ebp-68h]
                mov     [eax+4], edx
                mov     cl, [ebp+var_64]
                mov     [eax+8], cl
                jmp     loc_47ED09
; ---------------------------------------------------------------------------

loc_47ED8D:                             ; CODE XREF: sub_47EC80+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_C0]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47EC80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47EDC0      proc near               ; CODE XREF: sub_45E870+D03↑p

var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C4h
                mov     [ebp+var_CC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_CC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47EE12
                mov     [ebp+var_D0], offset byte_110A50C
                jmp     short loc_47EE20
; ---------------------------------------------------------------------------

loc_47EE12:                             ; CODE XREF: sub_47EDC0+44↑j
                mov     edx, [ebp+var_CC]
                mov     eax, [edx]
                mov     [ebp+var_D0], eax

loc_47EE20:                             ; CODE XREF: sub_47EDC0+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbPartyrevise ; "tb_PartyRevise"
                mov     edx, [ebp+var_D0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47EE52
; ---------------------------------------------------------------------------

loc_47EE49:                             ; CODE XREF: sub_47EDC0+F6↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47EE52:                             ; CODE XREF: sub_47EDC0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_47EEB8
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                mov     ecx, [ebp+var_CC]
                add     ecx, 970h
                call    sub_4987B0
                mov     edx, [ebp+var_70]
                mov     [eax], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+4], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+8], edx
                mov     cl, [ebp+var_64]
                mov     [eax+0Ch], cl
                jmp     short loc_47EE49
; ---------------------------------------------------------------------------

loc_47EEB8:                             ; CODE XREF: sub_47EDC0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_CC]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47EDC0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47EEF0      proc near               ; CODE XREF: sub_45E870+D19↑p

var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B4h
                mov     [ebp+var_BC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_BC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47EF42
                mov     [ebp+var_C0], offset byte_110A50C
                jmp     short loc_47EF50
; ---------------------------------------------------------------------------

loc_47EF42:                             ; CODE XREF: sub_47EEF0+44↑j
                mov     edx, [ebp+var_BC]
                mov     eax, [edx]
                mov     [ebp+var_C0], eax

loc_47EF50:                             ; CODE XREF: sub_47EEF0+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbPcCostume ; "tb_PC_Costume"
                mov     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47EF82
; ---------------------------------------------------------------------------

loc_47EF79:                             ; CODE XREF: sub_47EEF0+E4↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47EF82:                             ; CODE XREF: sub_47EEF0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_47EFD6
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6C]
                push    eax
                mov     ecx, [ebp+var_BC]
                add     ecx, 980h
                call    sub_49B520
                mov     ecx, [ebp+var_6C]
                mov     [eax], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_64]
                mov     [eax+8], ecx
                jmp     short loc_47EF79
; ---------------------------------------------------------------------------

loc_47EFD6:                             ; CODE XREF: sub_47EEF0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_BC]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47EEF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47F010      proc near               ; CODE XREF: sub_45E870+D2F↑p

var_41C         = dword ptr -41Ch
var_418         = dword ptr -418h
var_194         = dword ptr -194h
var_18D         = byte ptr -18Dh
var_18C         = byte ptr -18Ch
var_188         = byte ptr -188h
var_184         = byte ptr -184h
var_182         = byte ptr -182h
var_166         = byte ptr -166h
var_14A         = byte ptr -14Ah
var_12E         = byte ptr -12Eh
var_112         = byte ptr -112h
var_F6          = byte ptr -0F6h
var_DA          = byte ptr -0DAh
var_BE          = byte ptr -0BEh
var_A2          = byte ptr -0A2h
var_86          = byte ptr -86h
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75410 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47F010
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 410h
                mov     [ebp+var_418], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_194], eax
                mov     ecx, [ebp+var_418]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47F065
                mov     [ebp+var_41C], offset byte_110A50C
                jmp     short loc_47F073
; ---------------------------------------------------------------------------

loc_47F065:                             ; CODE XREF: sub_47F010+47↑j
                mov     edx, [ebp+var_418]
                mov     eax, [edx]
                mov     [ebp+var_41C], eax

loc_47F073:                             ; CODE XREF: sub_47F010+53↑j
                push    0
                mov     ecx, [ebp+var_194]
                push    ecx
                push    offset aTbPhotoItem ; "tb_Photo_Item"
                mov     edx, [ebp+var_41C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47F0A8
; ---------------------------------------------------------------------------

loc_47F09F:                             ; CODE XREF: sub_47F010+20E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47F0A8:                             ; CODE XREF: sub_47F010+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47F223
                push    offset sub_93E020
                push    offset sub_48C660
                push    0Ah
                push    1Ch
                lea     eax, [ebp+var_182]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_18C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_188]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_184]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_182]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_166]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_14A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_12E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_112]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_F6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_DA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_BE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_A2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_69]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_18C]
                push    ecx
                lea     edx, [ebp+var_18C]
                push    edx
                mov     ecx, [ebp+var_418]
                add     ecx, 990h
                call    sub_4988A0
                mov     ecx, eax
                call    sub_47F280
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    0Ah
                push    1Ch
                lea     eax, [ebp+var_182]
                push    eax
                call    sub_ED9E2A
                jmp     loc_47F09F
; ---------------------------------------------------------------------------

loc_47F223:                             ; CODE XREF: sub_47F010+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_418]
                call    read_and_verify_checksum
                mov     [ebp+var_18D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_18D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47F010      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47F260      proc near               ; CODE XREF: sub_47F010+AF640E↓j
                                        ; sub_4988A0+ADE286↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    0Ah
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 0Ah
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_47F260      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47F280      proc near               ; CODE XREF: sub_47F010+1F0↑p

var_3C          = dword ptr -3Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 3Ch
                mov     [ebp+var_3C], ecx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+8]
                mov     [eax+8], dx
                mov     [ebp+var_4], 0
                jmp     short loc_47F2BF
; ---------------------------------------------------------------------------

loc_47F2B6:                             ; CODE XREF: sub_47F280+6E↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_47F2BF:                             ; CODE XREF: sub_47F280+34↑j
                cmp     [ebp+var_4], 0Ah
                jnb     short loc_47F2F0
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+arg_0]
                lea     ecx, [eax+edx+0Ah]
                push    ecx
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+var_3C]
                lea     ecx, [eax+edx+0Ah]
                call    sub_4A0090
                jmp     short loc_47F2B6
; ---------------------------------------------------------------------------

loc_47F2F0:                             ; CODE XREF: sub_47F280+43↑j
                mov     ecx, [ebp+var_3C]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+122h]
                mov     [ecx+122h], al
                mov     ecx, [ebp+var_3C]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+123h]
                mov     [ecx+123h], al
                mov     eax, [ebp+var_3C]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_47F280      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47F320      proc near               ; CODE XREF: sub_45E870+D45↑p

var_1B0         = dword ptr -1B0h
var_1AC         = dword ptr -1ACh
var_1A8         = dword ptr -1A8h
var_BC          = dword ptr -0BCh
var_B5          = byte ptr -0B5h
var_B4          = byte ptr -0B4h
var_B0          = byte ptr -0B0h
var_AC          = byte ptr -0ACh
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75430 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47F320
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1A4h
                mov     [ebp+var_1AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_BC], eax
                mov     ecx, [ebp+var_1AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47F375
                mov     [ebp+var_1B0], offset byte_110A50C
                jmp     short loc_47F383
; ---------------------------------------------------------------------------

loc_47F375:                             ; CODE XREF: sub_47F320+47↑j
                mov     edx, [ebp+var_1AC]
                mov     eax, [edx]
                mov     [ebp+var_1B0], eax

loc_47F383:                             ; CODE XREF: sub_47F320+53↑j
                push    0
                mov     ecx, [ebp+var_BC]
                push    ecx
                push    offset aTbPollen ; "tb_Pollen"
                mov     edx, [ebp+var_1B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47F3B8
; ---------------------------------------------------------------------------

loc_47F3AF:                             ; CODE XREF: sub_47F320+18E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47F3B8:                             ; CODE XREF: sub_47F320+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47F4B3
                lea     ecx, [ebp+var_B4]
                call    sub_47F4F0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_AC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B4]
                push    edx
                lea     eax, [ebp+var_B4]
                push    eax
                mov     ecx, [ebp+var_1AC]
                add     ecx, 9A0h
                call    sub_498B00
                mov     ecx, eax
                call    sub_47F600
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_84]
                mov     [ebp+var_1A8], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_1A8]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_AC]
                call    sub_93E020
                jmp     loc_47F3AF
; ---------------------------------------------------------------------------

loc_47F4B3:                             ; CODE XREF: sub_47F320+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_1AC]
                call    read_and_verify_checksum
                mov     [ebp+var_B5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_B5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47F320      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47F4F0      proc near               ; CODE XREF: sub_47F320+AA↑p
                                        ; sub_498B00+A1↓p

var_50          = dword ptr -50h
var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_31          = byte ptr -31h
var_30          = dword ptr -30h
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75470 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47F4F0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 44h
                mov     [ebp+var_48], ecx
                mov     eax, [ebp+var_48]
                add     eax, 8
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_4C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_48]
                add     eax, 30h
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_31]
                mov     [ebp+var_30], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_50], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_48]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47F4F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47F580      proc near               ; CODE XREF: sub_498B00+11F↓p
                                        ; sub_498B00+131↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F754A0 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47F580
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 30h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 8
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47F580      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47F600      proc near               ; CODE XREF: sub_47F320+153↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 8
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 8
                call    sub_4A0090
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+24h]
                mov     [edx+24h], ecx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+28h]
                mov     [edx+28h], ecx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2Ch]
                mov     [edx+2Ch], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 30h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 30h
                call    sub_4A0090
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Ch]
                mov     [ecx+4Ch], eax
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_47F600      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47F690      proc near               ; CODE XREF: sub_45E870+D5B↑p

var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_80          = dword ptr -80h
var_79          = byte ptr -79h
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_67          = byte ptr -67h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E4h
                mov     [ebp+var_EC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_EC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47F6E2
                mov     [ebp+var_F0], offset byte_110A50C
                jmp     short loc_47F6F0
; ---------------------------------------------------------------------------

loc_47F6E2:                             ; CODE XREF: sub_47F690+44↑j
                mov     edx, [ebp+var_EC]
                mov     eax, [edx]
                mov     [ebp+var_F0], eax

loc_47F6F0:                             ; CODE XREF: sub_47F690+50↑j
                push    0
                mov     ecx, [ebp+var_80]
                push    ecx
                push    offset aTbPreset ; "tb_PreSet"
                mov     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47F722
; ---------------------------------------------------------------------------

loc_47F719:                             ; CODE XREF: sub_47F690+12A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47F722:                             ; CODE XREF: sub_47F690+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47F7BF
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_78+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_74+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                mov     ecx, [ebp+var_EC]
                add     ecx, 9B0h
                call    sub_49DEB0
                mov     edx, [ebp+var_78]
                mov     [eax], edx
                mov     ecx, [ebp+var_74]
                mov     [eax+4], ecx
                mov     edx, [ebp-70h]
                mov     [eax+8], edx
                mov     ecx, [ebp-6Ch]
                mov     [eax+0Ch], ecx
                mov     edx, [ebp-68h]
                mov     [eax+10h], edx
                mov     cl, [ebp+var_64]
                mov     [eax+14h], cl
                jmp     loc_47F719
; ---------------------------------------------------------------------------

loc_47F7BF:                             ; CODE XREF: sub_47F690+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_EC]
                call    read_and_verify_checksum
                mov     [ebp+var_79], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_79]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47F690      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47F800      proc near               ; CODE XREF: sub_45E870+D71↑p

var_E4          = dword ptr -0E4h
var_E0          = dword ptr -0E0h
var_B4          = dword ptr -0B4h
var_AD          = byte ptr -0ADh
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D8h
                push    esi
                push    edi
                mov     [ebp+var_E0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_B4], eax
                mov     ecx, [ebp+var_E0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47F857
                mov     [ebp+var_E4], offset byte_110A50C
                jmp     short loc_47F865
; ---------------------------------------------------------------------------

loc_47F857:                             ; CODE XREF: sub_47F800+49↑j
                mov     edx, [ebp+var_E0]
                mov     eax, [edx]
                mov     [ebp+var_E4], eax

loc_47F865:                             ; CODE XREF: sub_47F800+55↑j
                push    0
                mov     ecx, [ebp+var_B4]
                push    ecx
                push    offset aTbQuestChapter ; "tb_Quest_Chapter"
                mov     edx, [ebp+var_E4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47F89A
; ---------------------------------------------------------------------------

loc_47F891:                             ; CODE XREF: sub_47F800+1C6↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47F89A:                             ; CODE XREF: sub_47F800+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47F9CB
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_98]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_90]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_AC]
                push    eax
                mov     ecx, [ebp+var_E0]
                add     ecx, 9C0h
                call    sub_498D50
                mov     ecx, 12h
                lea     esi, [ebp+var_AC]
                mov     edi, eax
                rep movsd
                jmp     loc_47F891
; ---------------------------------------------------------------------------

loc_47F9CB:                             ; CODE XREF: sub_47F800+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_E0]
                call    read_and_verify_checksum
                mov     [ebp+var_AD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_AD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_47F800      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47FA10      proc near               ; CODE XREF: sub_45E870+D87↑p

var_174         = dword ptr -174h
var_170         = dword ptr -170h
var_134         = dword ptr -134h
var_12D         = byte ptr -12Dh
var_12C         = byte ptr -12Ch
var_128         = byte ptr -128h
var_127         = byte ptr -127h
var_123         = byte ptr -123h
var_122         = byte ptr -122h
var_11E         = byte ptr -11Eh
var_11A         = byte ptr -11Ah
var_119         = byte ptr -119h
var_115         = byte ptr -115h
var_111         = byte ptr -111h
var_10D         = byte ptr -10Dh
var_109         = byte ptr -109h
var_105         = byte ptr -105h
var_101         = byte ptr -101h
var_FD          = byte ptr -0FDh
var_F9          = byte ptr -0F9h
var_F5          = byte ptr -0F5h
var_F1          = byte ptr -0F1h
var_ED          = byte ptr -0EDh
var_E9          = byte ptr -0E9h
var_E5          = byte ptr -0E5h
var_E1          = byte ptr -0E1h
var_DD          = byte ptr -0DDh
var_D9          = byte ptr -0D9h
var_D5          = byte ptr -0D5h
var_D1          = byte ptr -0D1h
var_CD          = byte ptr -0CDh
var_C9          = byte ptr -0C9h
var_C5          = byte ptr -0C5h
var_C1          = byte ptr -0C1h
var_BD          = byte ptr -0BDh
var_B9          = byte ptr -0B9h
var_B5          = byte ptr -0B5h
var_B1          = byte ptr -0B1h
var_AD          = byte ptr -0ADh
var_A9          = byte ptr -0A9h
var_A5          = byte ptr -0A5h
var_A1          = byte ptr -0A1h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_97          = byte ptr -97h
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8D          = byte ptr -8Dh
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F754D0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_47FA10
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 168h
                mov     [ebp+var_170], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_134], eax
                mov     ecx, [ebp+var_170]
                cmp     dword ptr [ecx], 0
                jnz     short loc_47FA65
                mov     [ebp+var_174], offset byte_110A50C
                jmp     short loc_47FA73
; ---------------------------------------------------------------------------

loc_47FA65:                             ; CODE XREF: sub_47FA10+47↑j
                mov     edx, [ebp+var_170]
                mov     eax, [edx]
                mov     [ebp+var_174], eax

loc_47FA73:                             ; CODE XREF: sub_47FA10+53↑j
                push    0
                mov     ecx, [ebp+var_134]
                push    ecx
                push    offset aTbQuestConditi ; "tb_Quest_Condition"
                mov     edx, [ebp+var_174]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_47FAA8
; ---------------------------------------------------------------------------

loc_47FA9F:                             ; CODE XREF: sub_47FA10+3D2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_47FAA8:                             ; CODE XREF: sub_47FA10+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_47FDE7
                lea     ecx, [ebp+var_80]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_12C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_128]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_127]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_123]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_122]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_11E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_11A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_119]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_115]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_111]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_10D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_109]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_105]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_101]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_FD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_F9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_F5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_F1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_ED]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_E9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_E5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_E1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_DD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_D9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_D5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_CD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_97]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_96]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_92]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_12C]
                push    edx
                lea     eax, [ebp+var_12C]
                push    eax
                mov     ecx, [ebp+var_170]
                add     ecx, 9D0h
                call    sub_498F10
                mov     ecx, eax
                call    sub_47FE80
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_80]
                call    sub_93E020
                jmp     loc_47FA9F
; ---------------------------------------------------------------------------

loc_47FDE7:                             ; CODE XREF: sub_47FA10+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_170]
                call    read_and_verify_checksum
                mov     [ebp+var_12D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_12D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47FA10      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47FE20      proc near               ; CODE XREF: sub_47FA10+AF5ACE↓j
                                        ; sub_498F10+ADDC61↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 0ACh
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_47FE20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_47FE80      proc near               ; CODE XREF: sub_47FA10+3C1↑p

var_5C          = dword ptr -5Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 5Ch
                push    esi
                mov     [ebp+var_5C], ecx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+5]
                mov     [eax+5], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+9]
                mov     [eax+9], dl
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ah]
                mov     [eax+0Ah], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Eh]
                mov     [eax+0Eh], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+12h]
                mov     [eax+12h], dl
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+13h]
                mov     [eax+13h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+17h]
                mov     [eax+17h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Bh]
                mov     [eax+1Bh], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Fh]
                mov     [eax+1Fh], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+23h]
                mov     [eax+23h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+27h]
                mov     [eax+27h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2Bh]
                mov     [eax+2Bh], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2Fh]
                mov     [eax+2Fh], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+33h]
                mov     [eax+33h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+37h]
                mov     [eax+37h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+3Bh]
                mov     [eax+3Bh], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+3Fh]
                mov     [eax+3Fh], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+43h]
                mov     [eax+43h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+47h]
                mov     [eax+47h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4Bh]
                mov     [eax+4Bh], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4Fh]
                mov     [eax+4Fh], edx
                mov     [ebp+var_4], 0
                jmp     short loc_47FFAE
; ---------------------------------------------------------------------------

loc_47FFA5:                             ; CODE XREF: sub_47FE80+148↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_47FFAE:                             ; CODE XREF: sub_47FE80+123↑j
                cmp     [ebp+var_4], 0Ch
                jnb     short loc_47FFCA
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_5C]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+23h]
                mov     [edx+ecx*4+23h], eax
                jmp     short loc_47FFA5
; ---------------------------------------------------------------------------

loc_47FFCA:                             ; CODE XREF: sub_47FE80+132↑j
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+53h]
                mov     [ecx+53h], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+57h]
                mov     [ecx+57h], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+5Bh]
                mov     [ecx+5Bh], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+5Fh]
                mov     [ecx+5Fh], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+63h]
                mov     [ecx+63h], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+67h]
                mov     [ecx+67h], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+6Bh]
                mov     [ecx+6Bh], eax

loc_48001E:                             ; DATA XREF: ___:01052A6C↓o
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+6Fh]
                mov     [ecx+6Fh], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+73h]
                mov     [ecx+73h], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+77h]
                mov     [ecx+77h], eax
                mov     ecx, [ebp+var_5C]

loc_480045:                             ; DATA XREF: ___:010433A0↓o
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+7Bh]
                mov     [ecx+7Bh], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+7Fh]
                mov     [ecx+7Fh], eax

loc_48005A:                             ; DATA XREF: ___:0104395C↓o
                mov     [ebp+var_8], 0
                jmp     short loc_48006C
; ---------------------------------------------------------------------------

loc_480063:                             ; CODE XREF: sub_47FE80+206↓j
                mov     ecx, [ebp+var_8]

loc_480066:                             ; DATA XREF: ___:0108F26C↓o
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_48006C:                             ; CODE XREF: sub_47FE80+1E1↑j
                cmp     [ebp+var_8], 0Ch
                jnb     short loc_480088
                mov     edx, [ebp+var_8]
                mov     eax, [ebp+var_5C]

loc_480078:                             ; DATA XREF: ___:01042370↓o
                mov     ecx, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+53h]
                mov     [eax+edx*4+53h], ecx
                jmp     short loc_480063
; ---------------------------------------------------------------------------

loc_480088:                             ; CODE XREF: sub_47FE80+1F0↑j
                mov     edx, [ebp+var_5C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+83h]
                mov     [edx+83h], ecx
                mov     edx, [ebp+var_5C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+87h]
                mov     [edx+87h], ecx
                mov     edx, [ebp+var_5C]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+8Bh]
                mov     [edx+8Bh], cl
                mov     edx, [ebp+var_5C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+8Ch]
                mov     [edx+8Ch], ecx
                mov     edx, [ebp+var_5C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+90h]
                mov     [edx+90h], ecx
                mov     [ebp+var_C], 0
                jmp     short loc_4800F4
; ---------------------------------------------------------------------------

loc_4800EB:                             ; CODE XREF: sub_47FE80+294↓j
                mov     edx, [ebp+var_C]
                add     edx, 1
                mov     [ebp+var_C], edx

loc_4800F4:                             ; CODE XREF: sub_47FE80+269↑j
                cmp     [ebp+var_C], 2
                jnb     short loc_480116
                mov     eax, [ebp+var_C]
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+var_C]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+8Ch]
                mov     [ecx+eax*4+8Ch], edx
                jmp     short loc_4800EB
; ---------------------------------------------------------------------------

loc_480116:                             ; CODE XREF: sub_47FE80+278↑j
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+94h]
                mov     [eax+94h], dl
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+95h]
                mov     [eax+95h], dl
                mov     [ebp+var_10], 0
                jmp     short loc_48014C
; ---------------------------------------------------------------------------

loc_480143:                             ; CODE XREF: sub_47FE80+2EA↓j
                mov     eax, [ebp+var_10]
                add     eax, 1
                mov     [ebp+var_10], eax

loc_48014C:                             ; CODE XREF: sub_47FE80+2C1↑j
                cmp     [ebp+var_10], 2
                jnb     short loc_48016C
                mov     ecx, [ebp+var_5C]
                add     ecx, [ebp+var_10]
                mov     edx, [ebp+arg_0]
                add     edx, [ebp+var_10]
                mov     al, [edx+94h]
                mov     [ecx+94h], al
                jmp     short loc_480143
; ---------------------------------------------------------------------------

loc_48016C:                             ; CODE XREF: sub_47FE80+2D0↑j
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+96h]
                mov     [ecx+96h], eax
                mov     ecx, [ebp+var_5C]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+9Ah]
                mov     [ecx+9Ah], eax
                mov     [ebp+var_14], 0
                jmp     short loc_4801A2
; ---------------------------------------------------------------------------

loc_480199:                             ; CODE XREF: sub_47FE80+342↓j
                mov     ecx, [ebp+var_14]
                add     ecx, 1
                mov     [ebp+var_14], ecx

loc_4801A2:                             ; CODE XREF: sub_47FE80+317↑j
                cmp     [ebp+var_14], 2
                jnb     short loc_4801C4
                mov     edx, [ebp+var_14]
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+var_14]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+96h]
                mov     [eax+edx*4+96h], ecx
                jmp     short loc_480199
; ---------------------------------------------------------------------------

loc_4801C4:                             ; CODE XREF: sub_47FE80+326↑j
                mov     edx, [ebp+var_5C]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+9Eh]
                mov     [edx+9Eh], cl
                mov     edx, [ebp+var_5C]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+9Fh]
                mov     [edx+9Fh], cl
                mov     [ebp+var_18], 0
                jmp     short loc_4801FA
; ---------------------------------------------------------------------------

loc_4801F1:                             ; CODE XREF: sub_47FE80+398↓j
                mov     edx, [ebp+var_18]
                add     edx, 1
                mov     [ebp+var_18], edx

loc_4801FA:                             ; CODE XREF: sub_47FE80+36F↑j
                cmp     [ebp+var_18], 2
                jnb     short loc_48021A
                mov     eax, [ebp+var_5C]
                add     eax, [ebp+var_18]
                mov     ecx, [ebp+arg_0]
                add     ecx, [ebp+var_18]
                mov     dl, [ecx+9Eh]
                mov     [eax+9Eh], dl
                jmp     short loc_4801F1
; ---------------------------------------------------------------------------

loc_48021A:                             ; CODE XREF: sub_47FE80+37E↑j
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0A0h]
                mov     [eax+0A0h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0A4h]
                mov     [eax+0A4h], edx
                mov     eax, [ebp+var_5C]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0A8h]
                mov     [eax+0A8h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0ACh
                push    ecx
                mov     ecx, [ebp+var_5C]
                add     ecx, 0ACh
                call    sub_4A0090
                mov     eax, [ebp+var_5C]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_47FE80      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_480280      proc near               ; CODE XREF: sub_45E870+D9D↑p

var_2A4         = dword ptr -2A4h
var_2A0         = dword ptr -2A0h
var_29C         = dword ptr -29Ch
var_22C         = dword ptr -22Ch
var_225         = byte ptr -225h
var_224         = byte ptr -224h
var_220         = byte ptr -220h
var_21C         = byte ptr -21Ch
var_218         = byte ptr -218h
var_214         = byte ptr -214h
var_213         = byte ptr -213h
var_212         = byte ptr -212h
var_211         = byte ptr -211h
var_20D         = byte ptr -20Dh
var_209         = byte ptr -209h
var_205         = byte ptr -205h
var_201         = byte ptr -201h
var_1FD         = byte ptr -1FDh
var_1F9         = byte ptr -1F9h
var_1F5         = byte ptr -1F5h
var_1F1         = byte ptr -1F1h
var_1ED         = byte ptr -1EDh
var_1E9         = byte ptr -1E9h
var_1E5         = byte ptr -1E5h
var_1E1         = byte ptr -1E1h
var_1DD         = byte ptr -1DDh
var_1D9         = byte ptr -1D9h
var_1D5         = byte ptr -1D5h
var_1D1         = byte ptr -1D1h
var_1CD         = byte ptr -1CDh
var_1C9         = byte ptr -1C9h
var_1C5         = byte ptr -1C5h
var_1C1         = byte ptr -1C1h
var_1BD         = byte ptr -1BDh
var_1BC         = byte ptr -1BCh
var_1BA         = byte ptr -1BAh
var_1B9         = byte ptr -1B9h
var_1B8         = byte ptr -1B8h
var_1B4         = byte ptr -1B4h
var_1B3         = byte ptr -1B3h
var_1AF         = byte ptr -1AFh
var_1AE         = byte ptr -1AEh
var_1AD         = byte ptr -1ADh
var_1A9         = byte ptr -1A9h
var_1A8         = byte ptr -1A8h
var_1A4         = byte ptr -1A4h
var_1A0         = byte ptr -1A0h
var_19C         = byte ptr -19Ch
var_198         = byte ptr -198h
var_194         = byte ptr -194h
var_190         = byte ptr -190h
var_18C         = byte ptr -18Ch
var_188         = byte ptr -188h
var_184         = byte ptr -184h
var_180         = byte ptr -180h
var_17C         = byte ptr -17Ch
var_17B         = byte ptr -17Bh
var_177         = byte ptr -177h
var_173         = byte ptr -173h
var_16F         = byte ptr -16Fh
var_16B         = byte ptr -16Bh
var_167         = byte ptr -167h
var_163         = byte ptr -163h
var_162         = byte ptr -162h
var_161         = byte ptr -161h
var_15D         = byte ptr -15Dh
var_159         = byte ptr -159h
var_155         = byte ptr -155h
var_151         = byte ptr -151h
var_14D         = byte ptr -14Dh
var_149         = byte ptr -149h
var_145         = byte ptr -145h
var_141         = byte ptr -141h
var_13D         = byte ptr -13Dh
var_139         = byte ptr -139h
var_135         = byte ptr -135h
var_131         = byte ptr -131h
var_115         = byte ptr -115h
var_114         = byte ptr -114h
var_110         = byte ptr -110h
var_10C         = byte ptr -10Ch
var_108         = byte ptr -108h
var_104         = byte ptr -104h
var_100         = byte ptr -100h
var_FC          = byte ptr -0FCh
var_F8          = byte ptr -0F8h
var_F7          = byte ptr -0F7h
var_F3          = byte ptr -0F3h
var_EF          = byte ptr -0EFh
var_EB          = byte ptr -0EBh
var_E7          = byte ptr -0E7h
var_E3          = byte ptr -0E3h
var_DF          = byte ptr -0DFh
var_DB          = byte ptr -0DBh
var_D7          = byte ptr -0D7h
var_D3          = byte ptr -0D3h
var_CF          = byte ptr -0CFh
var_CE          = byte ptr -0CEh
var_CA          = byte ptr -0CAh
var_C6          = byte ptr -0C6h
var_C2          = byte ptr -0C2h
var_BE          = byte ptr -0BEh
var_BA          = byte ptr -0BAh
var_B6          = byte ptr -0B6h
var_B2          = byte ptr -0B2h
var_AE          = byte ptr -0AEh
var_AA          = byte ptr -0AAh
var_A6          = byte ptr -0A6h
var_A2          = byte ptr -0A2h
var_9E          = byte ptr -9Eh
var_9A          = byte ptr -9Ah
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_91          = byte ptr -91h
var_8D          = byte ptr -8Dh
var_89          = byte ptr -89h
var_85          = byte ptr -85h
var_81          = byte ptr -81h
var_7D          = byte ptr -7Dh
var_79          = byte ptr -79h
var_75          = byte ptr -75h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F754F0 SIZE 0000001E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_480280
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 298h
                mov     [ebp+var_2A0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_22C], eax
                mov     ecx, [ebp+var_2A0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4802D5
                mov     [ebp+var_2A4], offset byte_110A50C
                jmp     short loc_4802E3
; ---------------------------------------------------------------------------

loc_4802D5:                             ; CODE XREF: sub_480280+47↑j
                mov     edx, [ebp+var_2A0]
                mov     eax, [edx]
                mov     [ebp+var_2A4], eax

loc_4802E3:                             ; CODE XREF: sub_480280+53↑j
                push    0
                mov     ecx, [ebp+var_22C]
                push    ecx
                push    offset aTbQuestEpisode ; "tb_Quest_Episode"
                mov     edx, [ebp+var_2A4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_480318
; ---------------------------------------------------------------------------

loc_48030F:                             ; CODE XREF: sub_480280+7E0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_480318:                             ; CODE XREF: sub_480280+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_480A65
                lea     ecx, [ebp+var_131]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_224]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_220]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_21C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_218]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_214]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_213]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_212]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_211]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_20D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_209]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_205]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_201]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1FD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1F9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1F5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1F1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1ED]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1E9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1E5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1E1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1DD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1D9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1D5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1D1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1CD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1C9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1C5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1C1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1BD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_1BA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1B9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1B3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1AF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1AE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1AD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1A9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1A8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1A4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_19C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_198]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_194]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_190]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_18C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_188]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_184]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_180]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_17C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_17B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_177]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_173]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_16F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_16B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_167]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_163]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_162]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_161]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_15D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_159]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_155]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_151]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_14D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_149]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_145]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_141]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_13D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_139]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_135]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_131]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_115]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_114]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_110]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_10C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_108]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_104]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_100]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_FC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_F8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_F7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_F3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_EF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_EB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_E7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_E3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_DF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_DB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_D7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_D3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_CF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_CE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_CA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_BA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_96]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_92]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_91]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_89]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_85]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_81]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_79]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_75]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_71]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_224]
                push    ecx
                lea     edx, [ebp+var_224]
                push    edx
                mov     ecx, [ebp+var_2A0]
                add     ecx, 9E0h
                call    sub_499180
                mov     ecx, eax
                call    sub_480B00
                mov     byte ptr [ebp+var_4], 0
                lea     eax, [ebp+var_131]
                mov     [ebp+var_29C], eax
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_29C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_48030F
; ---------------------------------------------------------------------------

loc_480A65:                             ; CODE XREF: sub_480280+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_2A0]
                call    read_and_verify_checksum
                mov     [ebp+var_225], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_225]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_480280      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_480AA0      proc near               ; CODE XREF: sub_480280+AF527E↓j
                                        ; sub_499180+ADDA41↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 0F3h
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_480AA0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_480B00      proc near               ; CODE XREF: sub_480280+7B4↑p

var_80          = dword ptr -80h
var_3C          = dword ptr -3Ch
var_38          = dword ptr -38h
var_34          = dword ptr -34h
var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 80h
                push    esi
                mov     [ebp+var_80], ecx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+8]
                mov     [eax+8], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+10h]
                mov     [eax+10h], dl
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+11h]
                mov     [eax+11h], dl
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+12h]
                mov     [eax+12h], dl
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+13h]
                mov     [eax+13h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+17h]
                mov     [eax+17h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Bh]
                mov     [eax+1Bh], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Fh]
                mov     [eax+1Fh], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+23h]
                mov     [eax+23h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+27h]
                mov     [eax+27h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2Bh]
                mov     [eax+2Bh], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2Fh]
                mov     [eax+2Fh], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+33h]
                mov     [eax+33h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+37h]
                mov     [eax+37h], edx
                mov     [ebp+var_4], 0
                jmp     short loc_480BE9
; ---------------------------------------------------------------------------

loc_480BE0:                             ; CODE XREF: sub_480B00+103↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_480BE9:                             ; CODE XREF: sub_480B00+DE↑j
                cmp     [ebp+var_4], 0Ah
                jnb     short loc_480C05
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+13h]
                mov     [edx+ecx*4+13h], eax
                jmp     short loc_480BE0
; ---------------------------------------------------------------------------

loc_480C05:                             ; CODE XREF: sub_480B00+ED↑j
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+3Bh]
                mov     [ecx+3Bh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+3Fh]
                mov     [ecx+3Fh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+43h]
                mov     [ecx+43h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+47h]
                mov     [ecx+47h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Bh]
                mov     [ecx+4Bh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Fh]
                mov     [ecx+4Fh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+53h]
                mov     [ecx+53h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+57h]
                mov     [ecx+57h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+5Bh]
                mov     [ecx+5Bh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+5Fh]
                mov     [ecx+5Fh], eax
                mov     [ebp+var_8], 0
                jmp     short loc_480C8F
; ---------------------------------------------------------------------------

loc_480C86:                             ; CODE XREF: sub_480B00+1A9↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_480C8F:                             ; CODE XREF: sub_480B00+184↑j
                cmp     [ebp+var_8], 0Ah
                jnb     short loc_480CAB
                mov     edx, [ebp+var_8]
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+3Bh]
                mov     [eax+edx*4+3Bh], ecx
                jmp     short loc_480C86
; ---------------------------------------------------------------------------

loc_480CAB:                             ; CODE XREF: sub_480B00+193↑j
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+63h]
                mov     [edx+63h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+67h]
                mov     [edx+67h], cl
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+68h]
                mov     [edx+68h], cx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+6Ah]
                mov     [edx+6Ah], cl
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+6Bh]
                mov     [edx+6Bh], cl
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+6Ch]
                mov     [edx+6Ch], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+70h]
                mov     [edx+70h], cl
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+71h]
                mov     [edx+71h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+75h]
                mov     [edx+75h], cl
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+76h]
                mov     [edx+76h], cl
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+77h]
                mov     [edx+77h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+7Bh]
                mov     [edx+7Bh], cl
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+7Ch]
                mov     [edx+7Ch], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+80h]
                mov     [edx+80h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+84h]
                mov     [edx+84h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+88h]
                mov     [edx+88h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+8Ch]
                mov     [edx+8Ch], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+90h]
                mov     [edx+90h], ecx
                mov     [ebp+var_C], 0
                jmp     short loc_480DB5
; ---------------------------------------------------------------------------

loc_480DAC:                             ; CODE XREF: sub_480B00+2D5↓j
                mov     edx, [ebp+var_C]
                add     edx, 1
                mov     [ebp+var_C], edx

loc_480DB5:                             ; CODE XREF: sub_480B00+2AA↑j
                cmp     [ebp+var_C], 4
                jnb     short loc_480DD7
                mov     eax, [ebp+var_C]
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+var_C]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+84h]
                mov     [ecx+eax*4+84h], edx
                jmp     short loc_480DAC
; ---------------------------------------------------------------------------

loc_480DD7:                             ; CODE XREF: sub_480B00+2B9↑j
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+94h]
                mov     [eax+94h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+98h]
                mov     [eax+98h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+9Ch]
                mov     [eax+9Ch], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0A0h]
                mov     [eax+0A0h], edx
                mov     [ebp+var_10], 0
                jmp     short loc_480E31
; ---------------------------------------------------------------------------

loc_480E28:                             ; CODE XREF: sub_480B00+351↓j
                mov     eax, [ebp+var_10]
                add     eax, 1
                mov     [ebp+var_10], eax

loc_480E31:                             ; CODE XREF: sub_480B00+326↑j
                cmp     [ebp+var_10], 4
                jnb     short loc_480E53
                mov     ecx, [ebp+var_10]
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+var_10]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+94h]
                mov     [edx+ecx*4+94h], eax
                jmp     short loc_480E28
; ---------------------------------------------------------------------------

loc_480E53:                             ; CODE XREF: sub_480B00+335↑j
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0A4h]
                mov     [ecx+0A4h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0A8h]
                mov     [ecx+0A8h], al
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0A9h]
                mov     [ecx+0A9h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0ADh]
                mov     [ecx+0ADh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0B1h]
                mov     [ecx+0B1h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0B5h]
                mov     [ecx+0B5h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0B9h]
                mov     [ecx+0B9h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0BDh]
                mov     [ecx+0BDh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0C1h]
                mov     [ecx+0C1h], al
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0C2h]
                mov     [ecx+0C2h], al
                mov     [ebp+var_14], 0
                jmp     short loc_480F19
; ---------------------------------------------------------------------------

loc_480F10:                             ; CODE XREF: sub_480B00+437↓j
                mov     ecx, [ebp+var_14]
                add     ecx, 1
                mov     [ebp+var_14], ecx

loc_480F19:                             ; CODE XREF: sub_480B00+40E↑j
                cmp     [ebp+var_14], 2
                jnb     short loc_480F39
                mov     edx, [ebp+var_80]
                add     edx, [ebp+var_14]
                mov     eax, [ebp+arg_0]
                add     eax, [ebp+var_14]
                mov     cl, [eax+0C1h]
                mov     [edx+0C1h], cl
                jmp     short loc_480F10
; ---------------------------------------------------------------------------

loc_480F39:                             ; CODE XREF: sub_480B00+41D↑j
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C3h]
                mov     [edx+0C3h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+0C7h]
                mov     [edx+0C7h], ecx
                mov     [ebp+var_18], 0
                jmp     short loc_480F6F
; ---------------------------------------------------------------------------

loc_480F66:                             ; CODE XREF: sub_480B00+48F↓j
                mov     edx, [ebp+var_18]
                add     edx, 1
                mov     [ebp+var_18], edx

loc_480F6F:                             ; CODE XREF: sub_480B00+464↑j
                cmp     [ebp+var_18], 2
                jnb     short loc_480F91
                mov     eax, [ebp+var_18]
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+var_18]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+0C3h]
                mov     [ecx+eax*4+0C3h], edx
                jmp     short loc_480F66
; ---------------------------------------------------------------------------

loc_480F91:                             ; CODE XREF: sub_480B00+473↑j
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0CBh]
                mov     [eax+0CBh], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0CFh]
                mov     [eax+0CFh], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0D3h]
                mov     [eax+0D3h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0D7h]
                mov     [eax+0D7h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0DBh]
                mov     [eax+0DBh], edx
                mov     [ebp+var_1C], 0
                jmp     short loc_480FFD
; ---------------------------------------------------------------------------

loc_480FF4:                             ; CODE XREF: sub_480B00+51D↓j
                mov     eax, [ebp+var_1C]
                add     eax, 1
                mov     [ebp+var_1C], eax

loc_480FFD:                             ; CODE XREF: sub_480B00+4F2↑j
                cmp     [ebp+var_1C], 5
                jnb     short loc_48101F
                mov     ecx, [ebp+var_1C]
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+var_1C]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+0CBh]
                mov     [edx+ecx*4+0CBh], eax
                jmp     short loc_480FF4
; ---------------------------------------------------------------------------

loc_48101F:                             ; CODE XREF: sub_480B00+501↑j
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0DFh]
                mov     [ecx+0DFh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0E3h]
                mov     [ecx+0E3h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0E7h]
                mov     [ecx+0E7h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0EBh]
                mov     [ecx+0EBh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0EFh]
                mov     [ecx+0EFh], eax
                mov     [ebp+var_20], 0
                jmp     short loc_48108B
; ---------------------------------------------------------------------------

loc_481082:                             ; CODE XREF: sub_480B00+5AB↓j
                mov     ecx, [ebp+var_20]
                add     ecx, 1
                mov     [ebp+var_20], ecx

loc_48108B:                             ; CODE XREF: sub_480B00+580↑j
                cmp     [ebp+var_20], 5
                jnb     short loc_4810AD
                mov     edx, [ebp+var_20]
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+var_20]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+0DFh]
                mov     [eax+edx*4+0DFh], ecx
                jmp     short loc_481082
; ---------------------------------------------------------------------------

loc_4810AD:                             ; CODE XREF: sub_480B00+58F↑j
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0F3h
                push    eax
                mov     ecx, [ebp+var_80]
                add     ecx, 0F3h
                call    sub_4A0090
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+10Fh]
                mov     [ecx+10Fh], al
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+110h]
                mov     [ecx+110h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+114h]
                mov     [ecx+114h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+118h]
                mov     [ecx+118h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+11Ch]
                mov     [ecx+11Ch], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+120h]
                mov     [ecx+120h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+124h]
                mov     [ecx+124h], eax
                mov     [ebp+var_24], 0
                jmp     short loc_48115D
; ---------------------------------------------------------------------------

loc_481154:                             ; CODE XREF: sub_480B00+67D↓j
                mov     ecx, [ebp+var_24]
                add     ecx, 1
                mov     [ebp+var_24], ecx

loc_48115D:                             ; CODE XREF: sub_480B00+652↑j
                cmp     [ebp+var_24], 2
                jnb     short loc_48117F
                mov     edx, [ebp+var_24]
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+var_24]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+120h]
                mov     [eax+edx*4+120h], ecx
                jmp     short loc_481154
; ---------------------------------------------------------------------------

loc_48117F:                             ; CODE XREF: sub_480B00+661↑j
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+128h]
                mov     [edx+128h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+12Ch]
                mov     [edx+12Ch], cl
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+12Dh]
                mov     [edx+12Dh], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+131h]
                mov     [edx+131h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+135h]
                mov     [edx+135h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+139h]
                mov     [edx+139h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+13Dh]
                mov     [edx+13Dh], ecx
                mov     [ebp+var_28], 0
                jmp     short loc_48120F
; ---------------------------------------------------------------------------

loc_481206:                             ; CODE XREF: sub_480B00+72F↓j
                mov     edx, [ebp+var_28]
                add     edx, 1
                mov     [ebp+var_28], edx

loc_48120F:                             ; CODE XREF: sub_480B00+704↑j
                cmp     [ebp+var_28], 5
                jnb     short loc_481231
                mov     eax, [ebp+var_28]
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+var_28]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+12Dh]
                mov     [ecx+eax*4+12Dh], edx
                jmp     short loc_481206
; ---------------------------------------------------------------------------

loc_481231:                             ; CODE XREF: sub_480B00+713↑j
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+141h]
                mov     [eax+141h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+145h]
                mov     [eax+145h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+149h]
                mov     [eax+149h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+14Dh]
                mov     [eax+14Dh], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+151h]
                mov     [eax+151h], edx
                mov     [ebp+var_2C], 0
                jmp     short loc_48129D
; ---------------------------------------------------------------------------

loc_481294:                             ; CODE XREF: sub_480B00+7BD↓j
                mov     eax, [ebp+var_2C]
                add     eax, 1
                mov     [ebp+var_2C], eax

loc_48129D:                             ; CODE XREF: sub_480B00+792↑j
                                        ; DATA XREF: sub_14C155F+49B6A↓o
                cmp     [ebp+var_2C], 5
                jnb     short loc_4812BF
                mov     ecx, [ebp+var_2C]
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+var_2C]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+141h]
                mov     [edx+ecx*4+141h], eax
                jmp     short loc_481294
; ---------------------------------------------------------------------------

loc_4812BF:                             ; CODE XREF: sub_480B00+7A1↑j
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+155h]
                mov     [ecx+155h], al
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+156h]
                mov     [ecx+156h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+15Ah]
                mov     [ecx+15Ah], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+15Eh]
                mov     [ecx+15Eh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+162h]
                mov     [ecx+162h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+166h]
                mov     [ecx+166h], eax
                mov     [ebp+var_30], 0
                jmp     short loc_48133D
; ---------------------------------------------------------------------------

loc_481334:                             ; CODE XREF: sub_480B00+85D↓j
                mov     ecx, [ebp+var_30]
                add     ecx, 1
                mov     [ebp+var_30], ecx

loc_48133D:                             ; CODE XREF: sub_480B00+832↑j
                cmp     [ebp+var_30], 5
                jnb     short loc_48135F
                mov     edx, [ebp+var_30]
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+var_30]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+156h]
                mov     [eax+edx*4+156h], ecx
                jmp     short loc_481334
; ---------------------------------------------------------------------------

loc_48135F:                             ; CODE XREF: sub_480B00+841↑j
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+16Ah]
                mov     [edx+16Ah], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+16Eh]
                mov     [edx+16Eh], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+172h]
                mov     [edx+172h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+176h]
                mov     [edx+176h], ecx
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+17Ah]
                mov     [edx+17Ah], ecx
                mov     [ebp+var_34], 0
                jmp     short loc_4813CB
; ---------------------------------------------------------------------------

loc_4813C2:                             ; CODE XREF: sub_480B00+8EB↓j
                mov     edx, [ebp+var_34]
                add     edx, 1
                mov     [ebp+var_34], edx

loc_4813CB:                             ; CODE XREF: sub_480B00+8C0↑j
                cmp     [ebp+var_34], 5
                jnb     short loc_4813ED
                mov     eax, [ebp+var_34]
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+var_34]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+16Ah]
                mov     [ecx+eax*4+16Ah], edx
                jmp     short loc_4813C2
; ---------------------------------------------------------------------------

loc_4813ED:                             ; CODE XREF: sub_480B00+8CF↑j
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+17Eh]
                mov     [eax+17Eh], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+182h]
                mov     [eax+182h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+186h]
                mov     [eax+186h], edx
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+18Ah]
                mov     [eax+18Ah], edx
                mov     [ebp+var_38], 0
                jmp     short loc_481447
; ---------------------------------------------------------------------------

loc_48143E:                             ; CODE XREF: sub_480B00+967↓j
                mov     eax, [ebp+var_38]
                add     eax, 1
                mov     [ebp+var_38], eax

loc_481447:                             ; CODE XREF: sub_480B00+93C↑j
                cmp     [ebp+var_38], 4
                jnb     short loc_481469
                mov     ecx, [ebp+var_38]
                mov     edx, [ebp+var_80]
                mov     eax, [ebp+var_38]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+17Eh]
                mov     [edx+ecx*4+17Eh], eax
                jmp     short loc_48143E
; ---------------------------------------------------------------------------

loc_481469:                             ; CODE XREF: sub_480B00+94B↑j
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+18Eh]
                mov     [ecx+18Eh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+192h]
                mov     [ecx+192h], al
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+193h]
                mov     [ecx+193h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+197h]
                mov     [ecx+197h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+19Bh]
                mov     [ecx+19Bh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+19Fh]
                mov     [ecx+19Fh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1A3h]
                mov     [ecx+1A3h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1A7h]
                mov     [ecx+1A7h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1ABh]
                mov     [ecx+1ABh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1AFh]
                mov     [ecx+1AFh], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1B3h]
                mov     [ecx+1B3h], eax
                mov     ecx, [ebp+var_80]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1B7h]
                mov     [ecx+1B7h], eax
                mov     [ebp+var_3C], 0
                jmp     short loc_481553
; ---------------------------------------------------------------------------

loc_48154A:                             ; CODE XREF: sub_480B00+A73↓j
                mov     ecx, [ebp+var_3C]
                add     ecx, 1
                mov     [ebp+var_3C], ecx

loc_481553:                             ; CODE XREF: sub_480B00+A48↑j
                cmp     [ebp+var_3C], 0Ah
                jnb     short loc_481575
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+var_80]
                mov     ecx, [ebp+var_3C]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+193h]
                mov     [eax+edx*4+193h], ecx
                jmp     short loc_48154A
; ---------------------------------------------------------------------------

loc_481575:                             ; CODE XREF: sub_480B00+A57↑j
                mov     eax, [ebp+var_80]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_480B00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_481580      proc near               ; CODE XREF: sub_45E870+DB3↑p

var_108         = dword ptr -108h
var_104         = dword ptr -104h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0FCh
                push    esi
                push    edi
                mov     [ebp+var_104], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_104]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4815D7
                mov     [ebp+var_108], offset byte_110A50C
                jmp     short loc_4815E5
; ---------------------------------------------------------------------------

loc_4815D7:                             ; CODE XREF: sub_481580+49↑j
                mov     edx, [ebp+var_104]
                mov     eax, [edx]
                mov     [ebp+var_108], eax

loc_4815E5:                             ; CODE XREF: sub_481580+55↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbQuestReward ; "tb_Quest_Reward"
                mov     edx, [ebp+var_108]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48161A
; ---------------------------------------------------------------------------

loc_481611:                             ; CODE XREF: sub_481580+129↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48161A:                             ; CODE XREF: sub_481580+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4816AE
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_72]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_66]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_104]
                add     ecx, 9F0h
                call    sub_493EB0
                mov     ecx, 7
                lea     esi, [ebp+var_80]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_481611
; ---------------------------------------------------------------------------

loc_4816AE:                             ; CODE XREF: sub_481580+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_104]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_481580      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4816F0      proc near               ; CODE XREF: sub_45E870+DC9↑p

var_298         = dword ptr -298h
var_294         = dword ptr -294h
var_FC          = dword ptr -0FCh
var_F5          = byte ptr -0F5h
var_F4          = byte ptr -0F4h
var_F0          = byte ptr -0F0h
var_D4          = byte ptr -0D4h
var_B8          = byte ptr -0B8h
var_9C          = byte ptr -9Ch
var_80          = byte ptr -80h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75520 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4816F0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 28Ch
                mov     [ebp+var_294], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_FC], eax
                mov     ecx, [ebp+var_294]
                cmp     dword ptr [ecx], 0
                jnz     short loc_481745
                mov     [ebp+var_298], offset byte_110A50C
                jmp     short loc_481753
; ---------------------------------------------------------------------------

loc_481745:                             ; CODE XREF: sub_4816F0+47↑j
                mov     edx, [ebp+var_294]
                mov     eax, [edx]
                mov     [ebp+var_298], eax

loc_481753:                             ; CODE XREF: sub_4816F0+53↑j
                push    0
                mov     ecx, [ebp+var_FC]
                push    ecx
                push    offset aTbQuestScript ; "tb_Quest_Script"
                mov     edx, [ebp+var_298]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_481788
; ---------------------------------------------------------------------------

loc_48177F:                             ; CODE XREF: sub_4816F0+158↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_481788:                             ; CODE XREF: sub_4816F0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48184D
                lea     ecx, [ebp+var_F4]
                call    sub_481890
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_F4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_F0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_D4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_B8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_F4]
                push    eax
                lea     ecx, [ebp+var_F4]
                push    ecx
                mov     ecx, [ebp+var_294]
                add     ecx, 0A00h
                call    sub_499450
                mov     ecx, eax
                call    sub_481A90
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_F4]
                call    sub_4819B0
                jmp     loc_48177F
; ---------------------------------------------------------------------------

loc_48184D:                             ; CODE XREF: sub_4816F0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_294]
                call    read_and_verify_checksum
                mov     [ebp+var_F5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_F5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4816F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_481890      proc near               ; CODE XREF: sub_4816F0+AA↑p
                                        ; sub_499450+A1↓p

var_8C          = dword ptr -8Ch
var_88          = dword ptr -88h
var_84          = dword ptr -84h
var_80          = dword ptr -80h
var_7C          = dword ptr -7Ch
var_78          = dword ptr -78h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_64          = dword ptr -64h
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_2D          = byte ptr -2Dh
var_2C          = dword ptr -2Ch
var_24          = dword ptr -24h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75540 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_481890
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 80h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                add     eax, 4
                mov     [ebp+var_24], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_24]
                mov     [ebp+var_7C], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_78]
                add     eax, 20h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_2D]
                mov     [ebp+var_2C], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_80], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_78]
                add     eax, 3Ch
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_84], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_78]
                add     eax, 58h
                mov     [ebp+var_64], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_64]
                mov     [ebp+var_88], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_64]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_78]
                add     eax, 74h
                mov     [ebp+var_74], eax
                lea     ecx, [ebp+var_6D]
                mov     [ebp+var_6C], ecx
                mov     edx, [ebp+var_74]
                mov     [ebp+var_8C], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_74]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_481890      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4819B0      proc near               ; CODE XREF: sub_4816F0+153↑p
                                        ; sub_499450+12B↓p ...

var_4C          = dword ptr -4Ch
var_48          = dword ptr -48h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F755A0 SIZE 00000054 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4819B0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 40h
                mov     [ebp+var_4C], ecx
                mov     [ebp+var_4], 3
                mov     eax, [ebp+var_4C]
                add     eax, 74h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     ecx, [ebp+var_4C]
                add     ecx, 58h
                mov     [ebp+var_24], ecx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     edx, [ebp+var_4C]
                add     edx, 3Ch
                mov     [ebp+var_30], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     eax, [ebp+var_4C]
                add     eax, 20h
                mov     [ebp+var_3C], eax
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_4C]
                add     ecx, 4
                mov     [ebp+var_48], ecx
                mov     [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_48]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4819B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_481A90      proc near               ; CODE XREF: sub_4816F0+144↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 4
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 20h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 20h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ch
                push    edx
                mov     ecx, [ebp+var_70]
                add     ecx, 3Ch
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 58h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 58h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 74h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 74h
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_481A90      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_481B40      proc near               ; CODE XREF: sub_45E870+DDF↑p

var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_94          = dword ptr -94h
var_8D          = byte ptr -8Dh
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B8h
                push    esi
                push    edi
                mov     [ebp+var_C0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_94], eax
                mov     ecx, [ebp+var_C0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_481B97
                mov     [ebp+var_C4], offset byte_110A50C
                jmp     short loc_481BA5
; ---------------------------------------------------------------------------

loc_481B97:                             ; CODE XREF: sub_481B40+49↑j
                mov     edx, [ebp+var_C0]
                mov     eax, [edx]
                mov     [ebp+var_C4], eax

loc_481BA5:                             ; CODE XREF: sub_481B40+55↑j
                push    0
                mov     ecx, [ebp+var_94]
                push    ecx
                push    offset aTbQuestSeason ; "tb_Quest_Season"
                mov     edx, [ebp+var_C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_481BDA
; ---------------------------------------------------------------------------

loc_481BD1:                             ; CODE XREF: sub_481B40+15A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_481BDA:                             ; CODE XREF: sub_481B40+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_481C9F
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8C]
                push    edx
                mov     ecx, [ebp+var_C0]
                add     ecx, 0A10h
                call    sub_499680
                mov     ecx, 0Bh
                lea     esi, [ebp+var_8C]
                mov     edi, eax
                rep movsd
                jmp     loc_481BD1
; ---------------------------------------------------------------------------

loc_481C9F:                             ; CODE XREF: sub_481B40+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_C0]
                call    read_and_verify_checksum
                mov     [ebp+var_8D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_8D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_481B40      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_481CE0      proc near               ; CODE XREF: sub_45E870+DF5↑p

var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_67          = byte ptr -67h
var_66          = byte ptr -66h
var_65          = byte ptr -65h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C4h
                mov     [ebp+var_CC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_CC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_481D32
                mov     [ebp+var_D0], offset byte_110A50C
                jmp     short loc_481D40
; ---------------------------------------------------------------------------

loc_481D32:                             ; CODE XREF: sub_481CE0+44↑j
                mov     edx, [ebp+var_CC]
                mov     eax, [edx]
                mov     [ebp+var_D0], eax

loc_481D40:                             ; CODE XREF: sub_481CE0+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbRandomChange ; "tb_Random_Change"
                mov     edx, [ebp+var_D0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_481D72
; ---------------------------------------------------------------------------

loc_481D69:                             ; CODE XREF: sub_481CE0+12C↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_481D72:                             ; CODE XREF: sub_481CE0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_481E11
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_66]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_65]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_64+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_70]
                push    edx
                mov     ecx, [ebp+var_CC]
                add     ecx, 0A20h
                call    sub_499740
                mov     ecx, [ebp+var_70]
                mov     [eax], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+4], edx
                mov     ecx, [ebp-68h]
                mov     [eax+8], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+0Ch], dx
                jmp     loc_481D69
; ---------------------------------------------------------------------------

loc_481E11:                             ; CODE XREF: sub_481CE0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_CC]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_481CE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_481E50      proc near               ; CODE XREF: sub_45E870+E0B↑p

var_14C         = dword ptr -14Ch
var_148         = dword ptr -148h
var_104         = dword ptr -104h
var_FD          = byte ptr -0FDh
var_FC          = byte ptr -0FCh
var_FA          = byte ptr -0FAh
var_F6          = byte ptr -0F6h
var_F2          = byte ptr -0F2h
var_EE          = byte ptr -0EEh
var_EA          = byte ptr -0EAh
var_E6          = byte ptr -0E6h
var_E2          = byte ptr -0E2h
var_DE          = byte ptr -0DEh
var_DA          = byte ptr -0DAh
var_D6          = byte ptr -0D6h
var_D2          = byte ptr -0D2h
var_CE          = byte ptr -0CEh
var_CA          = byte ptr -0CAh
var_C6          = byte ptr -0C6h
var_C2          = byte ptr -0C2h
var_BE          = byte ptr -0BEh
var_BA          = byte ptr -0BAh
var_B6          = byte ptr -0B6h
var_B2          = byte ptr -0B2h
var_AE          = byte ptr -0AEh
var_AA          = byte ptr -0AAh
var_A6          = byte ptr -0A6h
var_A2          = byte ptr -0A2h
var_9E          = byte ptr -9Eh
var_9A          = byte ptr -9Ah
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_7E          = byte ptr -7Eh
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_7B          = byte ptr -7Bh
var_7A          = byte ptr -7Ah
var_79          = byte ptr -79h
var_78          = byte ptr -78h
var_77          = byte ptr -77h
var_76          = byte ptr -76h
var_75          = byte ptr -75h
var_74          = byte ptr -74h
var_73          = byte ptr -73h
var_72          = byte ptr -72h
var_71          = byte ptr -71h
var_70          = byte ptr -70h
var_6F          = byte ptr -6Fh
var_6E          = byte ptr -6Eh
var_6D          = byte ptr -6Dh
var_6C          = byte ptr -6Ch
var_6B          = byte ptr -6Bh
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_68          = byte ptr -68h
var_67          = byte ptr -67h
var_66          = byte ptr -66h
var_65          = byte ptr -65h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 140h
                push    esi
                push    edi
                mov     [ebp+var_148], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_104], eax
                mov     ecx, [ebp+var_148]
                cmp     dword ptr [ecx], 0
                jnz     short loc_481EA7
                mov     [ebp+var_14C], offset byte_110A50C
                jmp     short loc_481EB5
; ---------------------------------------------------------------------------

loc_481EA7:                             ; CODE XREF: sub_481E50+49↑j
                mov     edx, [ebp+var_148]
                mov     eax, [edx]
                mov     [ebp+var_14C], eax

loc_481EB5:                             ; CODE XREF: sub_481E50+55↑j
                push    0
                mov     ecx, [ebp+var_104]
                push    ecx
                push    offset aTbRandomGet ; "tb_Random_Get"
                mov     edx, [ebp+var_14C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_481EEA
; ---------------------------------------------------------------------------

loc_481EE1:                             ; CODE XREF: sub_481E50+40C↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_481EEA:                             ; CODE XREF: sub_481E50+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_482261
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_FA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_F6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_F2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_EE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_EA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_E6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_E2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_DE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_DA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_D2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_CE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_CA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_BE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_BA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_AA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_96]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_92]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_86]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_82]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_81]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_7E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_79]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_76]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_75]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_71]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_69]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_67]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_66]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_65]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_FC]
                push    ecx
                mov     ecx, [ebp+var_148]
                add     ecx, 0A30h
                call    sub_499840
                mov     ecx, 26h
                lea     esi, [ebp+var_FC]
                mov     edi, eax
                rep movsd
                jmp     loc_481EE1
; ---------------------------------------------------------------------------

loc_482261:                             ; CODE XREF: sub_481E50+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_148]
                call    read_and_verify_checksum
                mov     [ebp+var_FD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_FD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_481E50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4822A0      proc near               ; CODE XREF: sub_45E870+E21↑p

var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 90h
                mov     [ebp+var_98], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_98]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4822F2
                mov     [ebp+var_9C], offset byte_110A50C
                jmp     short loc_482300
; ---------------------------------------------------------------------------

loc_4822F2:                             ; CODE XREF: sub_4822A0+44↑j
                mov     edx, [ebp+var_98]
                mov     eax, [edx]
                mov     [ebp+var_9C], eax

loc_482300:                             ; CODE XREF: sub_4822A0+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbRandomGetGro ; "tb_Random_Get_Group"
                mov     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_482332
; ---------------------------------------------------------------------------

loc_482329:                             ; CODE XREF: sub_4822A0+142↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_482332:                             ; CODE XREF: sub_4822A0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4823E7
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_69]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_68+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68+3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_64+2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_64+3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_70]
                push    ecx
                mov     ecx, [ebp+var_98]
                add     ecx, 0A40h
                call    sub_499A20
                mov     edx, [ebp+var_70]
                mov     [eax], edx
                mov     ecx, [ebp-6Ch]
                mov     [eax+4], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+8], edx
                mov     ecx, [ebp+var_64]
                mov     [eax+0Ch], ecx
                jmp     loc_482329
; ---------------------------------------------------------------------------

loc_4823E7:                             ; CODE XREF: sub_4822A0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_98]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4822A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_482420      proc near               ; CODE XREF: sub_45E870+E37↑p

var_1C4         = dword ptr -1C4h
var_1C0         = dword ptr -1C0h
var_174         = dword ptr -174h
var_16D         = byte ptr -16Dh
var_16C         = byte ptr -16Ch
var_168         = byte ptr -168h
var_167         = byte ptr -167h
var_166         = byte ptr -166h
var_165         = byte ptr -165h
var_163         = byte ptr -163h
var_161         = byte ptr -161h
var_15F         = byte ptr -15Fh
var_15D         = byte ptr -15Dh
var_15B         = byte ptr -15Bh
var_159         = byte ptr -159h
var_157         = byte ptr -157h
var_155         = byte ptr -155h
var_153         = byte ptr -153h
var_151         = byte ptr -151h
var_14F         = byte ptr -14Fh
var_14D         = byte ptr -14Dh
var_14B         = byte ptr -14Bh
var_149         = byte ptr -149h
var_147         = byte ptr -147h
var_145         = byte ptr -145h
var_143         = byte ptr -143h
var_141         = byte ptr -141h
var_13F         = byte ptr -13Fh
var_13D         = byte ptr -13Dh
var_13B         = byte ptr -13Bh
var_139         = byte ptr -139h
var_137         = byte ptr -137h
var_135         = byte ptr -135h
var_133         = byte ptr -133h
var_12F         = byte ptr -12Fh
var_12B         = byte ptr -12Bh
var_127         = byte ptr -127h
var_123         = byte ptr -123h
var_11F         = byte ptr -11Fh
var_11B         = byte ptr -11Bh
var_117         = byte ptr -117h
var_113         = byte ptr -113h
var_10F         = byte ptr -10Fh
var_10B         = byte ptr -10Bh
var_107         = byte ptr -107h
var_103         = byte ptr -103h
var_FF          = byte ptr -0FFh
var_FB          = byte ptr -0FBh
var_F7          = byte ptr -0F7h
var_F3          = byte ptr -0F3h
var_EF          = byte ptr -0EFh
var_EB          = byte ptr -0EBh
var_E7          = byte ptr -0E7h
var_E3          = byte ptr -0E3h
var_DF          = byte ptr -0DFh
var_DB          = byte ptr -0DBh
var_D7          = byte ptr -0D7h
var_D3          = byte ptr -0D3h
var_CF          = byte ptr -0CFh
var_CB          = byte ptr -0CBh
var_C7          = byte ptr -0C7h
var_C3          = byte ptr -0C3h
var_BF          = byte ptr -0BFh
var_BB          = byte ptr -0BBh
var_B7          = byte ptr -0B7h
var_B3          = byte ptr -0B3h
var_AF          = byte ptr -0AFh
var_AB          = byte ptr -0ABh
var_A7          = byte ptr -0A7h
var_A3          = byte ptr -0A3h
var_9F          = byte ptr -9Fh
var_9B          = byte ptr -9Bh
var_97          = byte ptr -97h
var_93          = byte ptr -93h
var_8F          = byte ptr -8Fh
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1B8h
                push    esi
                push    edi
                mov     [ebp+var_1C0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_174], eax
                mov     ecx, [ebp+var_1C0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_482477
                mov     [ebp+var_1C4], offset byte_110A50C
                jmp     short loc_482485
; ---------------------------------------------------------------------------

loc_482477:                             ; CODE XREF: sub_482420+49↑j
                mov     edx, [ebp+var_1C0]
                mov     eax, [edx]
                mov     [ebp+var_1C4], eax

loc_482485:                             ; CODE XREF: sub_482420+55↑j
                push    0
                mov     ecx, [ebp+var_174]
                push    ecx
                push    offset aTbRandomOption ; "tb_Random_Option"
                mov     edx, [ebp+var_1C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4824BA
; ---------------------------------------------------------------------------

loc_4824B1:                             ; CODE XREF: sub_482420+56C↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4824BA:                             ; CODE XREF: sub_482420+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_482991
                lea     eax, [ebp+var_16C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_168]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_167]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_166]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_165]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_163]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_161]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_15F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_15D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_15B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_159]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_157]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_155]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_153]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_151]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_14F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_14D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_14B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_149]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_147]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_145]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_143]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_141]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_13F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_13D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_13B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_139]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_137]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_135]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_133]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_12F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_12B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_127]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_123]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_11F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_11B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_117]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_113]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_10F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_10B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_107]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_103]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_FF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_FB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_F7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_F3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_EF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_EB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_E7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_E3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_DF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_DB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_D7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_D3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_CF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_CB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_C7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_C3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_BF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_BB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_B7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_B3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_AF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_AB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_A7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_A3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_9F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_9B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_97]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_93]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_8F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_8B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_7F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_7B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_77]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     edx, [ebp+var_73]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     eax, [ebp+var_6F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                lea     ecx, [ebp+var_6B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_16C]
                push    edx
                mov     ecx, [ebp+var_1C0]
                add     ecx, 0A50h
                call    sub_499B20
                mov     ecx, 41h
                lea     esi, [ebp+var_16C]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_4824B1
; ---------------------------------------------------------------------------

loc_482991:                             ; CODE XREF: sub_482420+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_1C0]
                call    read_and_verify_checksum
                mov     [ebp+var_16D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_16D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_482420      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4829D0      proc near               ; CODE XREF: sub_45E870+E4D↑p

var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_63          = byte ptr -63h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0ACh
                mov     [ebp+var_B4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_B4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_482A22
                mov     [ebp+var_B8], offset byte_110A50C
                jmp     short loc_482A30
; ---------------------------------------------------------------------------

loc_482A22:                             ; CODE XREF: sub_4829D0+44↑j
                mov     edx, [ebp+var_B4]
                mov     eax, [edx]
                mov     [ebp+var_B8], eax

loc_482A30:                             ; CODE XREF: sub_4829D0+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbRankCategory ; "tb_Rank_Category_Group"
                mov     edx, [ebp+var_B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_482A62
; ---------------------------------------------------------------------------

loc_482A59:                             ; CODE XREF: sub_4829D0+EA↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_482A62:                             ; CODE XREF: sub_4829D0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_482ABC
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_68+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_63]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_62]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68]
                push    ecx
                mov     ecx, [ebp+var_B4]
                add     ecx, 0A60h
                call    sub_495C30
                mov     edx, [ebp+var_68]
                mov     [eax], edx
                mov     ecx, [ebp-64h]
                mov     [eax+4], ecx
                jmp     short loc_482A59
; ---------------------------------------------------------------------------

loc_482ABC:                             ; CODE XREF: sub_4829D0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_B4]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4829D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_482AF0      proc near               ; CODE XREF: sub_45E870+E63↑p

var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B8h
                mov     [ebp+var_C0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_C0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_482B42
                mov     [ebp+var_C4], offset byte_110A50C
                jmp     short loc_482B50
; ---------------------------------------------------------------------------

loc_482B42:                             ; CODE XREF: sub_482AF0+44↑j
                mov     edx, [ebp+var_C0]
                mov     eax, [edx]
                mov     [ebp+var_C4], eax

loc_482B50:                             ; CODE XREF: sub_482AF0+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbRankChange ; "tb_Rank_Change"
                mov     edx, [ebp+var_C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_482B82
; ---------------------------------------------------------------------------

loc_482B79:                             ; CODE XREF: sub_482AF0+F0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_482B82:                             ; CODE XREF: sub_482AF0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_482BE2
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_64+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_6C]
                push    ecx
                mov     ecx, [ebp+var_C0]
                add     ecx, 0A70h
                call    sub_49B520
                mov     edx, [ebp+var_6C]
                mov     [eax], edx
                mov     ecx, [ebp+var_68]
                mov     [eax+4], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+8], edx
                jmp     short loc_482B79
; ---------------------------------------------------------------------------

loc_482BE2:                             ; CODE XREF: sub_482AF0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_C0]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_482AF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_482C20      proc near               ; CODE XREF: sub_45E870+E79↑p

var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_87          = byte ptr -87h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75600 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_482C20
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B0h
                mov     [ebp+var_B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_98], eax
                mov     ecx, [ebp+var_B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_482C75
                mov     [ebp+var_BC], offset byte_110A50C
                jmp     short loc_482C83
; ---------------------------------------------------------------------------

loc_482C75:                             ; CODE XREF: sub_482C20+47↑j
                mov     edx, [ebp+var_B8]
                mov     eax, [edx]
                mov     [ebp+var_BC], eax

loc_482C83:                             ; CODE XREF: sub_482C20+53↑j
                push    0
                mov     ecx, [ebp+var_98]
                push    ecx
                push    offset aTbRankInfo ; "tb_Rank_Info"
                mov     edx, [ebp+var_BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_482CB8
; ---------------------------------------------------------------------------

loc_482CAF:                             ; CODE XREF: sub_482C20+177↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_482CB8:                             ; CODE XREF: sub_482C20+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_482D9C
                lea     ecx, [ebp+var_7C]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_8E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_89]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_87]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_85]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_90]
                push    ecx
                lea     edx, [ebp+var_90]
                push    edx
                mov     ecx, [ebp+var_B8]
                add     ecx, 0A80h
                call    sub_499D20
                mov     ecx, eax
                call    sub_482E30
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                call    sub_93E020
                jmp     loc_482CAF
; ---------------------------------------------------------------------------

loc_482D9C:                             ; CODE XREF: sub_482C20+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_B8]
                call    read_and_verify_checksum
                mov     [ebp+var_91], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_91]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_482C20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_482DE0      proc near               ; CODE XREF: sub_482C20+AF29EE↓j
                                        ; sub_499D20+ADCF0E↓j ...

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 14h
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_482DE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_482E30      proc near               ; CODE XREF: sub_482C20+166↑p

var_38          = dword ptr -38h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 38h
                mov     [ebp+var_38], ecx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+2]
                mov     [eax+2], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+6]
                mov     [eax+6], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+7]
                mov     [eax+7], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+8]
                mov     [eax+8], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+9]
                mov     [eax+9], dx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Bh]
                mov     [eax+0Bh], dl
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, [ebp+var_38]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                mov     [eax+10h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 14h
                push    ecx
                mov     ecx, [ebp+var_38]
                add     ecx, 14h
                call    sub_4A0090
                mov     eax, [ebp+var_38]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_482E30      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_482ED0      proc near               ; CODE XREF: sub_45E870+E8F↑p

var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_A4          = dword ptr -0A4h
var_9D          = byte ptr -9Dh
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8D          = byte ptr -8Dh
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_81          = byte ptr -81h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_67          = byte ptr -67h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C8h
                push    esi
                push    edi
                mov     [ebp+var_D0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A4], eax
                mov     ecx, [ebp+var_D0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_482F27
                mov     [ebp+var_D4], offset byte_110A50C
                jmp     short loc_482F35
; ---------------------------------------------------------------------------

loc_482F27:                             ; CODE XREF: sub_482ED0+49↑j
                mov     edx, [ebp+var_D0]
                mov     eax, [edx]
                mov     [ebp+var_D4], eax

loc_482F35:                             ; CODE XREF: sub_482ED0+55↑j
                push    0
                mov     ecx, [ebp+var_A4]
                push    ecx
                push    offset aTbRankReward ; "tb_Rank_Reward"
                mov     edx, [ebp+var_D4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_482F6A
; ---------------------------------------------------------------------------

loc_482F61:                             ; CODE XREF: sub_482ED0+1B8↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_482F6A:                             ; CODE XREF: sub_482ED0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48308D
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_96]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_92]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_8D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_8B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_87]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_81]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_67]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9C]
                push    edx
                mov     ecx, [ebp+var_D0]
                add     ecx, 0A90h
                call    sub_499F80
                mov     ecx, 0Eh
                lea     esi, [ebp+var_9C]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_482F61
; ---------------------------------------------------------------------------

loc_48308D:                             ; CODE XREF: sub_482ED0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_D0]
                call    read_and_verify_checksum
                mov     [ebp+var_9D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_9D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_482ED0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4830D0      proc near               ; CODE XREF: sub_45E870+EA5↑p

var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0CCh
                mov     [ebp+var_D4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_D4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_483122
                mov     [ebp+var_D8], offset byte_110A50C
                jmp     short loc_483130
; ---------------------------------------------------------------------------

loc_483122:                             ; CODE XREF: sub_4830D0+44↑j
                mov     edx, [ebp+var_D4]
                mov     eax, [edx]
                mov     [ebp+var_D8], eax

loc_483130:                             ; CODE XREF: sub_4830D0+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbRankRewardTo ; "tb_Rank_Reward_Totalpoint"
                mov     edx, [ebp+var_D8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_483162
; ---------------------------------------------------------------------------

loc_483159:                             ; CODE XREF: sub_4830D0+126↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_483162:                             ; CODE XREF: sub_4830D0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4831FB
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_70+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_68+3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                mov     ecx, [ebp+var_D4]
                add     ecx, 0AA0h
                call    sub_49A110
                mov     edx, [ebp+var_70]
                mov     [eax], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+4], ecx
                mov     edx, [ebp+var_68]
                mov     [eax+8], edx
                mov     cx, [ebp+var_64]
                mov     [eax+0Ch], cx
                mov     dl, [ebp+var_62]
                mov     [eax+0Eh], dl
                jmp     loc_483159
; ---------------------------------------------------------------------------

loc_4831FB:                             ; CODE XREF: sub_4830D0+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_D4]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4830D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_483230      proc near               ; CODE XREF: sub_45E870+EBB↑p

var_1F0         = dword ptr -1F0h
var_1EC         = dword ptr -1ECh
var_194         = dword ptr -194h
var_18D         = byte ptr -18Dh
var_18C         = byte ptr -18Ch
var_188         = byte ptr -188h
var_187         = byte ptr -187h
var_185         = byte ptr -185h
var_183         = byte ptr -183h
var_181         = byte ptr -181h
var_17D         = byte ptr -17Dh
var_179         = byte ptr -179h
var_175         = byte ptr -175h
var_171         = byte ptr -171h
var_16D         = byte ptr -16Dh
var_169         = byte ptr -169h
var_165         = byte ptr -165h
var_161         = byte ptr -161h
var_15D         = byte ptr -15Dh
var_159         = byte ptr -159h
var_155         = byte ptr -155h
var_151         = byte ptr -151h
var_14D         = byte ptr -14Dh
var_149         = byte ptr -149h
var_145         = byte ptr -145h
var_141         = byte ptr -141h
var_13D         = byte ptr -13Dh
var_139         = byte ptr -139h
var_135         = byte ptr -135h
var_131         = byte ptr -131h
var_12D         = byte ptr -12Dh
var_129         = byte ptr -129h
var_125         = byte ptr -125h
var_121         = byte ptr -121h
var_11D         = byte ptr -11Dh
var_119         = byte ptr -119h
var_115         = byte ptr -115h
var_111         = byte ptr -111h
var_10D         = byte ptr -10Dh
var_109         = byte ptr -109h
var_105         = byte ptr -105h
var_101         = byte ptr -101h
var_FD          = byte ptr -0FDh
var_F9          = byte ptr -0F9h
var_F5          = byte ptr -0F5h
var_F1          = byte ptr -0F1h
var_ED          = byte ptr -0EDh
var_E9          = byte ptr -0E9h
var_E5          = byte ptr -0E5h
var_E1          = byte ptr -0E1h
var_DF          = byte ptr -0DFh
var_DD          = byte ptr -0DDh
var_DB          = byte ptr -0DBh
var_D9          = byte ptr -0D9h
var_D7          = byte ptr -0D7h
var_D5          = byte ptr -0D5h
var_D3          = byte ptr -0D3h
var_D1          = byte ptr -0D1h
var_CF          = byte ptr -0CFh
var_CD          = byte ptr -0CDh
var_C9          = byte ptr -0C9h
var_C5          = byte ptr -0C5h
var_C1          = byte ptr -0C1h
var_BD          = byte ptr -0BDh
var_B9          = byte ptr -0B9h
var_B5          = byte ptr -0B5h
var_B1          = byte ptr -0B1h
var_AD          = byte ptr -0ADh
var_A9          = byte ptr -0A9h
var_A5          = byte ptr -0A5h
var_A3          = byte ptr -0A3h
var_A1          = byte ptr -0A1h
var_9F          = byte ptr -9Fh
var_9D          = byte ptr -9Dh
var_9B          = byte ptr -9Bh
var_99          = byte ptr -99h
var_97          = byte ptr -97h
var_95          = byte ptr -95h
var_93          = byte ptr -93h
var_91          = byte ptr -91h
var_8D          = byte ptr -8Dh
var_89          = byte ptr -89h
var_85          = byte ptr -85h
var_81          = byte ptr -81h
var_7D          = byte ptr -7Dh
var_79          = byte ptr -79h
var_75          = byte ptr -75h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1E4h
                push    esi
                push    edi
                mov     [ebp+var_1EC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_194], eax
                mov     ecx, [ebp+var_1EC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_483287
                mov     [ebp+var_1F0], offset byte_110A50C
                jmp     short loc_483295
; ---------------------------------------------------------------------------

loc_483287:                             ; CODE XREF: sub_483230+49↑j
                mov     edx, [ebp+var_1EC]
                mov     eax, [edx]
                mov     [ebp+var_1F0], eax

loc_483295:                             ; CODE XREF: sub_483230+55↑j
                push    0
                mov     ecx, [ebp+var_194]
                push    ecx
                push    offset aTbReinforce ; "tb_Reinforce"
                mov     edx, [ebp+var_1F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4832CA
; ---------------------------------------------------------------------------

loc_4832C1:                             ; CODE XREF: sub_483230+5D0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4832CA:                             ; CODE XREF: sub_483230+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_483805
                lea     eax, [ebp+var_18C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_188]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_187]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_185]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_183]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_181]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_17D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_179]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_175]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_171]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_16D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_169]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_165]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_161]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_15D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_159]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_155]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_151]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_14D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_149]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_145]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_141]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_13D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_139]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_135]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_131]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_12D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_129]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_125]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_121]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_11D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_119]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_115]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_111]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_10D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_109]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_105]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_101]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_FD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_F9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_F5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_F1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_ED]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_E9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_E5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_E1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_DD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_DB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_D9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_D7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_D5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_D3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_D1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_CF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_CD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_BD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_AD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_A3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_A1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_9F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_9D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_9B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_99]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_97]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_95]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_93]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_91]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_8D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_89]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_85]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_81]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_79]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_75]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_71]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_18C]
                push    ecx
                mov     ecx, [ebp+var_1EC]
                add     ecx, 0AB0h
                call    sub_49A2C0
                mov     ecx, 48h
                lea     esi, [ebp+var_18C]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_4832C1
; ---------------------------------------------------------------------------

loc_483805:                             ; CODE XREF: sub_483230+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_1EC]
                call    read_and_verify_checksum
                mov     [ebp+var_18D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_18D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_483230      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_483840      proc near               ; CODE XREF: sub_45E870+ED1↑p

var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_67          = byte ptr -67h
var_66          = byte ptr -66h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0CCh
                mov     [ebp+var_D4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_D4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_483892
                mov     [ebp+var_D8], offset byte_110A50C
                jmp     short loc_4838A0
; ---------------------------------------------------------------------------

loc_483892:                             ; CODE XREF: sub_483840+44↑j
                mov     edx, [ebp+var_D4]
                mov     eax, [edx]
                mov     [ebp+var_D8], eax

loc_4838A0:                             ; CODE XREF: sub_483840+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbReinforceExc ; "tb_Reinforce_Exchange"
                mov     edx, [ebp+var_D8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4838D2
; ---------------------------------------------------------------------------

loc_4838C9:                             ; CODE XREF: sub_483840+11A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4838D2:                             ; CODE XREF: sub_483840+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48395F
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_66]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_62]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_70]
                push    eax
                mov     ecx, [ebp+var_D4]
                add     ecx, 0AC0h
                call    sub_48CD30
                mov     ecx, [ebp+var_70]
                mov     [eax], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+4], edx
                mov     ecx, [ebp-68h]
                mov     [eax+8], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+0Ch], dx
                mov     cl, [ebp+var_62]
                mov     [eax+0Eh], cl
                jmp     loc_4838C9
; ---------------------------------------------------------------------------

loc_48395F:                             ; CODE XREF: sub_483840+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_D4]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_483840      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4839A0      proc near               ; CODE XREF: sub_45E870+EE7↑p

var_B0          = dword ptr -0B0h
var_AC          = dword ptr -0ACh
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_8C          = byte ptr -8Ch
var_8B          = byte ptr -8Bh
var_8A          = byte ptr -8Ah
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_87          = byte ptr -87h
var_86          = byte ptr -86h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_82          = byte ptr -82h
var_81          = byte ptr -81h
var_7F          = byte ptr -7Fh
var_7D          = byte ptr -7Dh
var_7B          = byte ptr -7Bh
var_79          = byte ptr -79h
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_67          = byte ptr -67h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A4h
                push    esi
                push    edi
                mov     [ebp+var_AC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_98], eax
                mov     ecx, [ebp+var_AC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4839F7
                mov     [ebp+var_B0], offset byte_110A50C
                jmp     short loc_483A05
; ---------------------------------------------------------------------------

loc_4839F7:                             ; CODE XREF: sub_4839A0+49↑j
                mov     edx, [ebp+var_AC]
                mov     eax, [edx]
                mov     [ebp+var_B0], eax

loc_483A05:                             ; CODE XREF: sub_4839A0+55↑j
                push    0
                mov     ecx, [ebp+var_98]
                push    ecx
                push    offset aTbReinforceOpt ; "tb_Reinforce_Option"
                mov     edx, [ebp+var_B0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_483A3A
; ---------------------------------------------------------------------------

loc_483A31:                             ; CODE XREF: sub_4839A0+1FD↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_483A3A:                             ; CODE XREF: sub_4839A0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_483BA2
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_8B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_89]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_88]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_85]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_81]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_79]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_77]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_90]
                push    ecx
                mov     ecx, [ebp+var_AC]
                add     ecx, 0AD0h
                call    sub_49A530
                mov     ecx, 0Bh
                lea     esi, [ebp+var_90]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_483A31
; ---------------------------------------------------------------------------

loc_483BA2:                             ; CODE XREF: sub_4839A0+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_AC]
                call    read_and_verify_checksum
                mov     [ebp+var_91], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_91]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4839A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_483BE0      proc near               ; CODE XREF: sub_45E870+EFD↑p

var_F4          = dword ptr -0F4h
var_F0          = dword ptr -0F0h
var_D4          = dword ptr -0D4h
var_CD          = byte ptr -0CDh
var_CC          = byte ptr -0CCh
var_CA          = byte ptr -0CAh
var_AE          = byte ptr -0AEh
var_AD          = byte ptr -0ADh
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_74          = byte ptr -74h
var_73          = byte ptr -73h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75620 SIZE 0000003F BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_483BE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E8h
                mov     [ebp+var_F0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_D4], eax
                mov     ecx, [ebp+var_F0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_483C35
                mov     [ebp+var_F4], offset byte_110A50C
                jmp     short loc_483C43
; ---------------------------------------------------------------------------

loc_483C35:                             ; CODE XREF: sub_483BE0+47↑j
                mov     edx, [ebp+var_F0]
                mov     eax, [edx]
                mov     [ebp+var_F4], eax

loc_483C43:                             ; CODE XREF: sub_483BE0+53↑j
                push    0
                mov     ecx, [ebp+var_D4]
                push    ecx
                push    offset aTbResvfx ; "tb_ResVFX"
                mov     edx, [ebp+var_F4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_483C78
; ---------------------------------------------------------------------------

loc_483C6F:                             ; CODE XREF: sub_483BE0+1E1↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_483C78:                             ; CODE XREF: sub_483BE0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_483DC6
                lea     ecx, [ebp+var_CA]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_AD]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     ecx, [ebp+var_90]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 3
                lea     eax, [ebp+var_CC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_CA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_AE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     eax, [ebp+var_AD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_91]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_CC]
                push    ecx
                lea     edx, [ebp+var_CC]
                push    edx
                mov     ecx, [ebp+var_F0]
                add     ecx, 0AE0h
                call    sub_49A6D0
                mov     ecx, eax
                call    sub_483EA0
                mov     byte ptr [ebp+var_4], 5
                lea     ecx, [ebp+var_90]
                call    sub_93E020
                mov     byte ptr [ebp+var_4], 4
                lea     ecx, [ebp+var_AD]
                call    sub_93E020
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_CA]
                call    sub_93E020
                jmp     loc_483C6F
; ---------------------------------------------------------------------------

loc_483DC6:                             ; CODE XREF: sub_483BE0+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_F0]
                call    read_and_verify_checksum
                mov     [ebp+var_CD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_CD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_483BE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_483E00      proc near               ; CODE XREF: sub_49A6D0+126↓p
                                        ; sub_49A6D0+138↓p ...

var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_30          = dword ptr -30h
var_20          = dword ptr -20h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75670 SIZE 0000002E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_483E00
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 38h
                mov     [ebp+var_44], ecx
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_44]
                add     eax, 3Ch
                mov     [ebp+var_20], eax
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_44]
                add     ecx, 1Fh
                mov     [ebp+var_30], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_44]
                add     edx, 2
                mov     [ebp+var_40], edx
                mov     [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_483E00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_483EA0      proc near               ; CODE XREF: sub_483BE0+1AF↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, [ebp+var_88]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+1Eh]
                mov     [edx+1Eh], cl
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Fh
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 1Fh
                call    sub_4A0090
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+3Bh]
                mov     [ecx+3Bh], al
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ch
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 3Ch
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+58h]
                mov     [eax+58h], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+59h]
                mov     [eax+59h], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Ah]
                mov     [eax+5Ah], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Ch]
                mov     [eax+5Ch], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+5Eh]
                mov     [eax+5Eh], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+60h]
                mov     [eax+60h], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+61h]
                mov     [eax+61h], dl
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_483EA0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_483FB0      proc near               ; CODE XREF: sub_45E870+F13↑p

var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_66          = byte ptr -66h
var_62          = byte ptr -62h
var_61          = byte ptr -61h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0CCh
                mov     [ebp+var_D4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_D4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_484002
                mov     [ebp+var_D8], offset byte_110A50C
                jmp     short loc_484010
; ---------------------------------------------------------------------------

loc_484002:                             ; CODE XREF: sub_483FB0+44↑j
                mov     edx, [ebp+var_D4]
                mov     eax, [edx]
                mov     [ebp+var_D8], eax

loc_484010:                             ; CODE XREF: sub_483FB0+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbRoomrankRewa ; "tb_RoomRank_Reward"
                mov     edx, [ebp+var_D8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_484042
; ---------------------------------------------------------------------------

loc_484039:                             ; CODE XREF: sub_483FB0+11E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_484042:                             ; CODE XREF: sub_483FB0+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4840D3
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6C+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_66]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_62]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_61]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_70]
                push    ecx
                mov     ecx, [ebp+var_D4]
                add     ecx, 0AF0h
                call    sub_499A20
                mov     edx, [ebp+var_70]
                mov     [eax], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+4], ecx
                mov     edx, [ebp-68h]
                mov     [eax+8], edx
                mov     ecx, [ebp-64h]
                mov     [eax+0Ch], ecx
                jmp     loc_484039
; ---------------------------------------------------------------------------

loc_4840D3:                             ; CODE XREF: sub_483FB0+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_D4]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_483FB0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_484110      proc near               ; CODE XREF: sub_45E870+F29↑p

var_F8          = dword ptr -0F8h
var_F4          = dword ptr -0F4h
var_CC          = dword ptr -0CCh
var_C5          = byte ptr -0C5h
var_C4          = byte ptr -0C4h
var_C3          = byte ptr -0C3h
var_C2          = byte ptr -0C2h
var_BE          = byte ptr -0BEh
var_BA          = byte ptr -0BAh
var_B6          = byte ptr -0B6h
var_B2          = byte ptr -0B2h
var_AE          = byte ptr -0AEh
var_AA          = byte ptr -0AAh
var_A6          = byte ptr -0A6h
var_A2          = byte ptr -0A2h
var_9E          = byte ptr -9Eh
var_9A          = byte ptr -9Ah
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7C          = byte ptr -7Ch
var_7A          = byte ptr -7Ah
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0ECh
                push    esi
                push    edi
                mov     [ebp+var_F4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_CC], eax
                mov     ecx, [ebp+var_F4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_484167
                mov     [ebp+var_F8], offset byte_110A50C
                jmp     short loc_484175
; ---------------------------------------------------------------------------

loc_484167:                             ; CODE XREF: sub_484110+49↑j
                mov     edx, [ebp+var_F4]
                mov     eax, [edx]
                mov     [ebp+var_F8], eax

loc_484175:                             ; CODE XREF: sub_484110+55↑j
                push    0
                mov     ecx, [ebp+var_CC]
                push    ecx
                push    offset aTbSelectItem ; "tb_Select_Item"
                mov     edx, [ebp+var_F8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4841AA
; ---------------------------------------------------------------------------

loc_4841A1:                             ; CODE XREF: sub_484110+292↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4841AA:                             ; CODE XREF: sub_484110+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4843A7
                lea     eax, [ebp+var_C4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_C3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_C2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_BA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_96]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_92]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_86]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_82]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_66]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_C4]
                push    eax
                mov     ecx, [ebp+var_F4]
                add     ecx, 0B00h
                call    sub_49A9C0
                mov     ecx, 18h
                lea     esi, [ebp+var_C4]
                mov     edi, eax
                rep movsd
                jmp     loc_4841A1
; ---------------------------------------------------------------------------

loc_4843A7:                             ; CODE XREF: sub_484110+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_F4]
                call    read_and_verify_checksum
                mov     [ebp+var_C5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_C5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_484110      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4843F0      proc near               ; CODE XREF: sub_45E870+F3F↑p

var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_128         = dword ptr -128h
var_124         = dword ptr -124h
var_114         = dword ptr -114h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F756B0 SIZE 00000026 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4843F0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 124h
                mov     [ebp+var_128], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_128]
                cmp     dword ptr [ecx], 0
                jnz     short loc_484445
                mov     [ebp+var_12C], offset byte_110A50C
                jmp     short loc_484453
; ---------------------------------------------------------------------------

loc_484445:                             ; CODE XREF: sub_4843F0+47↑j
                mov     edx, [ebp+var_128]
                mov     eax, [edx]
                mov     [ebp+var_12C], eax

loc_484453:                             ; CODE XREF: sub_4843F0+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbSfxBattlemat ; "tb_SFX_BattleMaterial"
                mov     edx, [ebp+var_12C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_484488
; ---------------------------------------------------------------------------

loc_48447F:                             ; CODE XREF: sub_4843F0+162↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_484488:                             ; CODE XREF: sub_4843F0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_484557
                lea     eax, [ebp+var_7F]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_130], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_128]
                add     ecx, 0B10h
                call    sub_49AB60
                mov     [ebp+var_114], eax
                mov     eax, [ebp+var_114]
                mov     cl, [ebp+var_80]
                mov     [eax], cl
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7F]
                push    eax
                mov     ecx, [ebp+var_114]
                add     ecx, 1
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7F]
                mov     [ebp+var_124], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_124]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_48447F
; ---------------------------------------------------------------------------

loc_484557:                             ; CODE XREF: sub_4843F0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_128]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4843F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_484590      proc near               ; CODE XREF: sub_45E870+F55↑p

var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_11C         = dword ptr -11Ch
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_67          = dword ptr -67h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F756E0 SIZE 00000029 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_484590
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 130h
                mov     [ebp+var_134], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_134]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4845E5
                mov     [ebp+var_138], offset byte_110A50C
                jmp     short loc_4845F3
; ---------------------------------------------------------------------------

loc_4845E5:                             ; CODE XREF: sub_484590+47↑j
                mov     edx, [ebp+var_134]
                mov     eax, [edx]
                mov     [ebp+var_138], eax

loc_4845F3:                             ; CODE XREF: sub_484590+53↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbSfxGroundmat ; "tb_SFX_GroundMaterial"
                mov     edx, [ebp+var_138]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_484628
; ---------------------------------------------------------------------------

loc_48461F:                             ; CODE XREF: sub_484590+194↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_484628:                             ; CODE XREF: sub_484590+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_484729
                lea     eax, [ebp+var_83]
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_13C], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_67]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_84]
                push    eax
                mov     ecx, [ebp+var_134]
                add     ecx, 0B20h
                call    sub_49ADA0
                mov     [ebp+var_11C], eax
                mov     ecx, [ebp+var_11C]
                mov     dl, [ebp+var_84]
                mov     [ecx], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                lea     ecx, [ebp+var_83]
                push    ecx
                mov     ecx, [ebp+var_11C]
                add     ecx, 1
                call    sub_4A0090
                mov     edx, [ebp+var_11C]
                movss   xmm0, [ebp+var_67]
                movss   dword ptr [edx+1Dh], xmm0
                mov     byte ptr [ebp+var_4], 0
                lea     eax, [ebp+var_83]
                mov     [ebp+var_130], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_130]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_48461F
; ---------------------------------------------------------------------------

loc_484729:                             ; CODE XREF: sub_484590+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_134]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_484590      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_484770      proc near               ; CODE XREF: sub_46E790+B05626↓j
                                        ; sub_4843F0+AF12D6↓j ...

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 1
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_484770      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4847C0      proc near               ; CODE XREF: sub_45E870+F6B↑p

var_C8          = dword ptr -0C8h
var_C4          = dword ptr -0C4h
var_A0          = dword ptr -0A0h
var_99          = byte ptr -99h
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8E          = byte ptr -8Eh
var_8C          = byte ptr -8Ch
var_8A          = byte ptr -8Ah
var_89          = byte ptr -89h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_82          = byte ptr -82h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_7D          = byte ptr -7Dh
var_79          = byte ptr -79h
var_75          = byte ptr -75h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_69          = byte ptr -69h
var_68          = byte ptr -68h
var_67          = byte ptr -67h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0BCh
                push    esi
                push    edi
                mov     [ebp+var_C4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A0], eax
                mov     ecx, [ebp+var_C4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_484817
                mov     [ebp+var_C8], offset byte_110A50C
                jmp     short loc_484825
; ---------------------------------------------------------------------------

loc_484817:                             ; CODE XREF: sub_4847C0+49↑j
                mov     edx, [ebp+var_C4]
                mov     eax, [edx]
                mov     [ebp+var_C8], eax

loc_484825:                             ; CODE XREF: sub_4847C0+55↑j
                push    0
                mov     ecx, [ebp+var_A0]
                push    ecx
                push    offset aTbShop  ; "tb_Shop"
                mov     edx, [ebp+var_C8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48485A
; ---------------------------------------------------------------------------

loc_484851:                             ; CODE XREF: sub_4847C0+1FA↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48485A:                             ; CODE XREF: sub_4847C0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4849BF
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_8E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_89]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_85]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_83]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_82]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_81]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_79]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_75]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_71]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_69]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_98]
                push    ecx
                mov     ecx, [ebp+var_C4]
                add     ecx, 0B30h
                call    sub_49B000
                mov     ecx, 0Dh
                lea     esi, [ebp+var_98]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_484851
; ---------------------------------------------------------------------------

loc_4849BF:                             ; CODE XREF: sub_4847C0+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_C4]
                call    read_and_verify_checksum
                mov     [ebp+var_99], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_99]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4847C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_484A00      proc near               ; CODE XREF: sub_45E870+F81↑p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_11C         = dword ptr -11Ch
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = dword ptr -80h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488190
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 12Ch
                mov     [ebp+var_130], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_130]
                cmp     dword ptr [ecx], 0
                jnz     short loc_484A55
                mov     [ebp+var_134], offset byte_110A50C
                jmp     short loc_484A63
; ---------------------------------------------------------------------------

loc_484A55:                             ; CODE XREF: sub_484A00+47↑j
                mov     edx, [ebp+var_130]
                mov     eax, [edx]
                mov     [ebp+var_134], eax

loc_484A63:                             ; CODE XREF: sub_484A00+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbShopString ; "tb_Shop_String"
                mov     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_484A98
; ---------------------------------------------------------------------------

loc_484A8F:                             ; CODE XREF: sub_484A00+162↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_484A98:                             ; CODE XREF: sub_484A00+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_484B67
                lea     eax, [ebp+var_7C]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_138], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_130]
                add     ecx, 0B40h
                call    sub_49C730
                mov     [ebp+var_11C], eax
                mov     eax, [ebp+var_11C]
                mov     ecx, [ebp+var_80]
                mov     [eax], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_11C]
                add     ecx, 4
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                mov     [ebp+var_12C], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_12C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_484A8F
; ---------------------------------------------------------------------------

loc_484B67:                             ; CODE XREF: sub_484A00+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_130]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_484A00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_484BA0      proc near               ; CODE XREF: sub_45E870+F97↑p

var_264         = dword ptr -264h
var_260         = dword ptr -260h
var_22C         = dword ptr -22Ch
var_225         = byte ptr -225h
var_224         = byte ptr -224h
var_220         = byte ptr -220h
var_21E         = byte ptr -21Eh
var_21A         = byte ptr -21Ah
var_216         = byte ptr -216h
var_215         = byte ptr -215h
var_214         = byte ptr -214h
var_213         = byte ptr -213h
var_212         = byte ptr -212h
var_211         = byte ptr -211h
var_210         = byte ptr -210h
var_20F         = byte ptr -20Fh
var_20E         = byte ptr -20Eh
var_20A         = byte ptr -20Ah
var_206         = byte ptr -206h
var_202         = byte ptr -202h
var_1FE         = byte ptr -1FEh
var_1FA         = byte ptr -1FAh
var_1F9         = byte ptr -1F9h
var_1F8         = byte ptr -1F8h
var_1F7         = byte ptr -1F7h
var_1F6         = byte ptr -1F6h
var_1F4         = byte ptr -1F4h
var_1F0         = byte ptr -1F0h
var_1EC         = byte ptr -1ECh
var_1E8         = byte ptr -1E8h
var_1E4         = byte ptr -1E4h
var_1E0         = byte ptr -1E0h
var_1DF         = byte ptr -1DFh
var_1DD         = byte ptr -1DDh
var_1DC         = byte ptr -1DCh
var_1DB         = byte ptr -1DBh
var_1DA         = byte ptr -1DAh
var_1D6         = byte ptr -1D6h
var_1D5         = byte ptr -1D5h
var_1D4         = byte ptr -1D4h
var_1D3         = byte ptr -1D3h
var_1D2         = byte ptr -1D2h
var_1D1         = byte ptr -1D1h
var_1CD         = byte ptr -1CDh
var_1C9         = byte ptr -1C9h
var_1C5         = byte ptr -1C5h
var_1C1         = byte ptr -1C1h
var_1BD         = byte ptr -1BDh
var_1B9         = byte ptr -1B9h
var_1B5         = byte ptr -1B5h
var_1B4         = byte ptr -1B4h
var_1B2         = byte ptr -1B2h
var_1B0         = byte ptr -1B0h
var_1AF         = byte ptr -1AFh
var_1AE         = byte ptr -1AEh
var_1AD         = byte ptr -1ADh
var_1AC         = byte ptr -1ACh
var_1AB         = byte ptr -1ABh
var_1A7         = byte ptr -1A7h
var_1A6         = byte ptr -1A6h
var_1A2         = byte ptr -1A2h
var_19E         = byte ptr -19Eh
var_19D         = byte ptr -19Dh
var_19B         = byte ptr -19Bh
var_17F         = byte ptr -17Fh
var_17D         = byte ptr -17Dh
var_179         = byte ptr -179h
var_178         = byte ptr -178h
var_15C         = byte ptr -15Ch
var_140         = byte ptr -140h
var_124         = byte ptr -124h
var_108         = byte ptr -108h
var_107         = byte ptr -107h
var_103         = byte ptr -103h
var_101         = byte ptr -101h
var_100         = byte ptr -100h
var_FF          = byte ptr -0FFh
var_FD          = byte ptr -0FDh
var_E1          = byte ptr -0E1h
var_C5          = byte ptr -0C5h
var_A9          = byte ptr -0A9h
var_A8          = byte ptr -0A8h
var_8C          = byte ptr -8Ch
var_70          = byte ptr -70h
var_6F          = byte ptr -6Fh
var_6E          = byte ptr -6Eh
var_6D          = byte ptr -6Dh
var_6C          = byte ptr -6Ch
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75720 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_484BA0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 258h
                mov     [ebp+var_260], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_22C], eax
                mov     ecx, [ebp+var_260]
                cmp     dword ptr [ecx], 0
                jnz     short loc_484BF5
                mov     [ebp+var_264], offset byte_110A50C
                jmp     short loc_484C03
; ---------------------------------------------------------------------------

loc_484BF5:                             ; CODE XREF: sub_484BA0+47↑j
                mov     edx, [ebp+var_260]
                mov     eax, [edx]
                mov     [ebp+var_264], eax

loc_484C03:                             ; CODE XREF: sub_484BA0+53↑j
                push    0
                mov     ecx, [ebp+var_22C]
                push    ecx
                push    offset aTbSkill ; "tb_Skill"
                mov     edx, [ebp+var_264]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_484C38
; ---------------------------------------------------------------------------

loc_484C2F:                             ; CODE XREF: sub_484BA0+60D↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_484C38:                             ; CODE XREF: sub_484BA0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4851B2
                lea     ecx, [ebp+var_224]
                call    sub_4851F0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_224]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_220]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_21E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_21A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_216]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_215]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_214]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_213]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_212]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_211]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_210]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_20F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_20E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_20A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_206]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_202]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1FE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1FA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1F9]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1F8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1F7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1F6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_1F4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_1F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_1EC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_1E8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_1E4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_1E0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_1DD]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1DC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1DB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1DA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1D6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1D5]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1D4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1D3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1D2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1D1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1CD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1C9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1C5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1C1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_1BD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1B9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1B5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1B4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_1B2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_1B0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1AF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1AE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_1AD]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1AC]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_1AB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_1A7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_1A6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_1A2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_19E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_19D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     edx, [ebp+var_19B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_17F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_17D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_179]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    0FFh
                lea     eax, [ebp+var_178]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_15C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_140]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_124]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_108]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_107]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_103]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_101]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_100]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_FF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     ecx, [ebp+var_FD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_E1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_C5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_A9]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    0FFh
                lea     edx, [ebp+var_A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_224]
                push    ecx
                lea     edx, [ebp+var_224]
                push    edx
                mov     ecx, [ebp+var_260]
                add     ecx, 0B50h
                call    sub_49B1C0
                mov     ecx, eax
                call    sub_4855F0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_224]
                call    sub_485450
                jmp     loc_484C2F
; ---------------------------------------------------------------------------

loc_4851B2:                             ; CODE XREF: sub_484BA0+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_260]
                call    read_and_verify_checksum
                mov     [ebp+var_225], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_225]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_484BA0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4851F0      proc near               ; CODE XREF: sub_484BA0+AA↑p
                                        ; sub_49B1C0+A1↓p

var_E0          = dword ptr -0E0h
var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_A5          = byte ptr -0A5h
var_A4          = dword ptr -0A4h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_7C          = dword ptr -7Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_45          = byte ptr -45h
var_44          = dword ptr -44h
var_3C          = dword ptr -3Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75740 SIZE 000000F2 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4851F0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D4h
                mov     [ebp+var_B8], ecx
                mov     eax, [ebp+var_B8]
                add     eax, 89h
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_BC], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_B8]
                add     eax, 0ACh
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_C0], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_B8]
                add     eax, 0C8h
                mov     [ebp+var_3C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_3C]
                mov     [ebp+var_C4], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_B8]
                add     eax, 0E4h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_45]
                mov     [ebp+var_44], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_C8], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_B8]
                add     eax, 100h
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_CC], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_B8]
                add     eax, 127h
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_D0], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Bh
                mov     eax, [ebp+var_B8]
                add     eax, 143h
                mov     [ebp+var_7C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_7C]
                mov     [ebp+var_D4], edx
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    0
                mov     ecx, [ebp+var_7C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Dh
                mov     eax, [ebp+var_B8]
                add     eax, 15Fh
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_84], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_D8], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0Fh
                mov     eax, [ebp+var_B8]
                add     eax, 17Ch
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_DC], edx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 11h
                mov     eax, [ebp+var_B8]
                add     eax, 198h
                mov     [ebp+var_B4], eax
                lea     ecx, [ebp+var_A5]
                mov     [ebp+var_A4], ecx
                mov     edx, [ebp+var_B4]
                mov     [ebp+var_E0], edx
                mov     byte ptr [ebp+var_4], 12h
                push    0
                push    0
                mov     ecx, [ebp+var_B4]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 11h
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_B8]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4851F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_485450      proc near               ; CODE XREF: sub_484BA0+608↑p
                                        ; sub_49B1C0+12B↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_3C          = dword ptr -3Ch
var_30          = dword ptr -30h
var_24          = dword ptr -24h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75840 SIZE 000000CE BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_485450
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 8
                mov     eax, [ebp+var_58]
                add     eax, 198h
                mov     [ebp+var_10], eax
                mov     byte ptr [ebp+var_4], 9
                push    0
                push    1
                mov     ecx, [ebp+var_10]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 8
                mov     byte ptr [ebp+var_4], 7
                mov     ecx, [ebp+var_58]
                add     ecx, 17Ch
                mov     [ebp+var_14], ecx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    1
                mov     ecx, [ebp+var_14]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     byte ptr [ebp+var_4], 6
                mov     edx, [ebp+var_58]
                add     edx, 15Fh
                mov     [ebp+var_18], edx
                mov     byte ptr [ebp+var_4], 0Bh
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 6
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_58]
                add     eax, 143h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 0Ch
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     byte ptr [ebp+var_4], 4
                mov     ecx, [ebp+var_58]
                add     ecx, 127h
                mov     [ebp+var_20], ecx
                mov     byte ptr [ebp+var_4], 0Dh
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     edx, [ebp+var_58]
                add     edx, 100h
                mov     [ebp+var_24], edx
                mov     byte ptr [ebp+var_4], 0Eh
                push    0
                push    1
                mov     ecx, [ebp+var_24]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 0E4h
                mov     [ebp+var_30], eax
                mov     byte ptr [ebp+var_4], 0Fh
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 0C8h
                mov     [ebp+var_3C], ecx
                mov     byte ptr [ebp+var_4], 10h
                push    0
                push    1
                mov     ecx, [ebp+var_3C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 0ACh
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 11h
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 89h
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 12h
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_485450      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4855F0      proc near               ; CODE XREF: sub_484BA0+5F9↑p

var_F8          = dword ptr -0F8h
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 0F8h
                push    esi
                mov     [ebp+var_F8], ecx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+4]
                mov     [eax+4], dx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+6]
                mov     [eax+6], edx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ah]
                mov     [eax+0Ah], edx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Eh]
                mov     [eax+0Eh], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Fh]
                mov     [eax+0Fh], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+10h]
                mov     [eax+10h], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+11h]
                mov     [eax+11h], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+12h]
                mov     [eax+12h], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+13h]
                mov     [eax+13h], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+14h]
                mov     [eax+14h], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+15h]
                mov     [eax+15h], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+16h]
                mov     [eax+16h], edx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Ah]
                mov     [eax+1Ah], edx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+1Eh]
                mov     [eax+1Eh], edx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+22h]
                mov     [eax+22h], edx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+26h]
                mov     [eax+26h], edx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2Ah]
                mov     [eax+2Ah], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2Bh]
                mov     [eax+2Bh], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2Ch]
                mov     [eax+2Ch], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2Dh]
                mov     [eax+2Dh], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2Eh]
                mov     [eax+2Eh], dx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                fld     dword ptr [ecx+30h]
                fstp    dword ptr [eax+30h]
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                fld     dword ptr [eax+34h]
                fstp    dword ptr [edx+34h]
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                fld     dword ptr [edx+38h]
                fstp    dword ptr [ecx+38h]
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                fld     dword ptr [ecx+3Ch]
                fstp    dword ptr [eax+3Ch]
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                fld     dword ptr [eax+40h]
                fstp    dword ptr [edx+40h]
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+44h]
                mov     [ecx+44h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+45h]
                mov     [ecx+45h], ax
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+47h]
                mov     [ecx+47h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+48h]
                mov     [ecx+48h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+49h]
                mov     [ecx+49h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Ah]
                mov     [ecx+4Ah], eax
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+4Eh]
                mov     [ecx+4Eh], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+4Fh]
                mov     [ecx+4Fh], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+50h]
                mov     [ecx+50h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+51h]
                mov     [ecx+51h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+52h]
                mov     [ecx+52h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+53h]
                mov     [ecx+53h], eax
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+57h]
                mov     [ecx+57h], eax
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+5Bh]
                mov     [ecx+5Bh], eax
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+5Fh]
                mov     [ecx+5Fh], eax
                mov     [ebp+var_4], 0
                jmp     short loc_48588C
; ---------------------------------------------------------------------------

loc_485883:                             ; CODE XREF: sub_4855F0+2B9↓j
                mov     ecx, [ebp+var_4]
                add     ecx, 1
                mov     [ebp+var_4], ecx

loc_48588C:                             ; CODE XREF: sub_4855F0+291↑j
                cmp     [ebp+var_4], 4
                jnb     short loc_4858AB
                mov     edx, [ebp+var_4]
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+53h]
                mov     [eax+edx*4+53h], ecx
                jmp     short loc_485883
; ---------------------------------------------------------------------------

loc_4858AB:                             ; CODE XREF: sub_4855F0+2A0↑j
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+63h]
                mov     [edx+63h], ecx
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+67h]
                mov     [edx+67h], ecx
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+6Bh]
                mov     [edx+6Bh], ecx
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+6Fh]
                mov     [edx+6Fh], cl
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+70h]
                mov     [edx+70h], cx
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+72h]
                mov     [edx+72h], cx
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+74h]
                mov     [edx+74h], cl
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+75h]
                mov     [edx+75h], cl
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+76h]
                mov     [edx+76h], cl
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+77h]
                mov     [edx+77h], cl
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+78h]
                mov     [edx+78h], cl
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+79h]
                mov     [edx+79h], ecx
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+7Dh]
                mov     [edx+7Dh], cl
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+7Eh]
                mov     [edx+7Eh], ecx
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+82h]
                mov     [edx+82h], ecx
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+86h]
                mov     [edx+86h], cl
                mov     edx, [ebp+var_F8]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+87h]
                mov     [edx+87h], cx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 89h
                push    eax
                mov     ecx, [ebp+var_F8]
                add     ecx, 89h
                call    sub_4A0090
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+0A5h]
                mov     [ecx+0A5h], ax
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+0A7h]
                mov     [ecx+0A7h], eax
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0ABh]
                mov     [ecx+0ABh], al
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0ACh
                push    edx
                mov     ecx, [ebp+var_F8]
                add     ecx, 0ACh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 0C8h
                push    ecx
                mov     ecx, [ebp+var_F8]
                add     ecx, 0C8h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 0E4h
                push    eax
                mov     ecx, [ebp+var_F8]
                add     ecx, 0E4h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 100h
                push    edx
                mov     ecx, [ebp+var_F8]
                add     ecx, 100h
                call    sub_4A0090
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+11Ch]
                mov     [eax+11Ch], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+11Dh]
                mov     [eax+11Dh], edx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+121h]
                mov     [eax+121h], dx
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+123h]
                mov     [eax+123h], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+124h]
                mov     [eax+124h], dl
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+125h]
                mov     [eax+125h], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 127h
                push    ecx
                mov     ecx, [ebp+var_F8]
                add     ecx, 127h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 143h
                push    eax
                mov     ecx, [ebp+var_F8]
                add     ecx, 143h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 15Fh
                push    edx
                mov     ecx, [ebp+var_F8]
                add     ecx, 15Fh
                call    sub_4A0090
                mov     eax, [ebp+var_F8]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+17Bh]
                mov     [eax+17Bh], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 17Ch
                push    ecx
                mov     ecx, [ebp+var_F8]
                add     ecx, 17Ch
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 198h
                push    eax
                mov     ecx, [ebp+var_F8]
                add     ecx, 198h
                call    sub_4A0090
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+1B4h]
                mov     [ecx+1B4h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+1B5h]
                mov     [ecx+1B5h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+1B6h]
                mov     [ecx+1B6h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+1B7h]
                mov     [ecx+1B7h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+1B8h]
                mov     [ecx+1B8h], al
                mov     ecx, [ebp+var_F8]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+1B9h]
                mov     [ecx+1B9h], al
                mov     eax, [ebp+var_F8]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_4855F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_485C90      proc near               ; CODE XREF: sub_45E870+FAD↑p

var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B4h
                push    esi
                push    edi
                mov     [ebp+var_BC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_BC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_485CE7
                mov     [ebp+var_C0], offset byte_110A50C
                jmp     short loc_485CF5
; ---------------------------------------------------------------------------

loc_485CE7:                             ; CODE XREF: sub_485C90+49↑j
                mov     edx, [ebp+var_BC]
                mov     eax, [edx]
                mov     [ebp+var_C0], eax

loc_485CF5:                             ; CODE XREF: sub_485C90+55↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbSkillAction ; "tb_Skill_Action"
                mov     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_485D2A
; ---------------------------------------------------------------------------

loc_485D21:                             ; CODE XREF: sub_485C90+150↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_485D2A:                             ; CODE XREF: sub_485C90+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_485DE5
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_66]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                mov     ecx, [ebp+var_BC]
                add     ecx, 0B60h
                call    sub_49E030
                mov     ecx, 9
                lea     esi, [ebp+var_88]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_485D21
; ---------------------------------------------------------------------------

loc_485DE5:                             ; CODE XREF: sub_485C90+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_BC]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_485C90      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_485E20      proc near               ; CODE XREF: sub_45E870+FC3↑p

var_C0          = dword ptr -0C0h
var_BC          = dword ptr -0BCh
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B4h
                mov     [ebp+var_BC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_BC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_485E72
                mov     [ebp+var_C0], offset byte_110A50C
                jmp     short loc_485E80
; ---------------------------------------------------------------------------

loc_485E72:                             ; CODE XREF: sub_485E20+44↑j
                mov     edx, [ebp+var_BC]
                mov     eax, [edx]
                mov     [ebp+var_C0], eax

loc_485E80:                             ; CODE XREF: sub_485E20+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbSkillDivide ; "tb_Skill_Divide"
                mov     edx, [ebp+var_C0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_485EB2
; ---------------------------------------------------------------------------

loc_485EA9:                             ; CODE XREF: sub_485E20+F2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_485EB2:                             ; CODE XREF: sub_485E20+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_485F14
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_64+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_6C]
                push    ecx
                mov     ecx, [ebp+var_BC]
                add     ecx, 0B70h
                call    sub_49B460
                mov     edx, [ebp+var_6C]
                mov     [eax], edx
                mov     ecx, [ebp+var_68]
                mov     [eax+4], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+8], dx
                jmp     short loc_485EA9
; ---------------------------------------------------------------------------

loc_485F14:                             ; CODE XREF: sub_485E20+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_BC]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_485E20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_485F50      proc near               ; CODE XREF: sub_45E870+FD9↑p

var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_74          = dword ptr -74h
var_6D          = byte ptr -6Dh
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B8h
                mov     [ebp+var_C0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_74], eax
                mov     ecx, [ebp+var_C0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_485FA2
                mov     [ebp+var_C4], offset byte_110A50C
                jmp     short loc_485FB0
; ---------------------------------------------------------------------------

loc_485FA2:                             ; CODE XREF: sub_485F50+44↑j
                mov     edx, [ebp+var_C0]
                mov     eax, [edx]
                mov     [ebp+var_C4], eax

loc_485FB0:                             ; CODE XREF: sub_485F50+50↑j
                push    0
                mov     ecx, [ebp+var_74]
                push    ecx
                push    offset aTbSkillOption ; "tb_Skill_Option"
                mov     edx, [ebp+var_C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_485FE2
; ---------------------------------------------------------------------------

loc_485FD9:                             ; CODE XREF: sub_485F50+F0↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_485FE2:                             ; CODE XREF: sub_485F50+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_486042
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_64+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_6C]
                push    ecx
                mov     ecx, [ebp+var_C0]
                add     ecx, 0B80h
                call    sub_49B520
                mov     edx, [ebp+var_6C]
                mov     [eax], edx
                mov     ecx, [ebp+var_68]
                mov     [eax+4], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+8], edx
                jmp     short loc_485FD9
; ---------------------------------------------------------------------------

loc_486042:                             ; CODE XREF: sub_485F50+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_C0]
                call    read_and_verify_checksum
                mov     [ebp+var_6D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_6D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_485F50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_486080      proc near               ; CODE XREF: sub_45E870+FEF↑p

var_2DC         = dword ptr -2DCh
var_2D8         = dword ptr -2D8h
var_124         = dword ptr -124h
var_11D         = byte ptr -11Dh
var_11C         = byte ptr -11Ch
var_11A         = byte ptr -11Ah
var_FE          = byte ptr -0FEh
var_E2          = byte ptr -0E2h
var_C6          = byte ptr -0C6h
var_AA          = byte ptr -0AAh
var_A6          = byte ptr -0A6h
var_A2          = byte ptr -0A2h
var_86          = byte ptr -86h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75920 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_486080
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 2D0h
                mov     [ebp+var_2D8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_2D8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4860D5
                mov     [ebp+var_2DC], offset byte_110A50C
                jmp     short loc_4860E3
; ---------------------------------------------------------------------------

loc_4860D5:                             ; CODE XREF: sub_486080+47↑j
                mov     edx, [ebp+var_2D8]
                mov     eax, [edx]
                mov     [ebp+var_2DC], eax

loc_4860E3:                             ; CODE XREF: sub_486080+53↑j
                push    0
                mov     ecx, [ebp+var_124]
                push    ecx
                push    offset aTbSkillScript ; "tb_Skill_Script"
                mov     edx, [ebp+var_2DC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_486118
; ---------------------------------------------------------------------------

loc_48610F:                             ; CODE XREF: sub_486080+18D↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_486118:                             ; CODE XREF: sub_486080+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_486212
                lea     ecx, [ebp+var_11C]
                call    sub_486250
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_11C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_11A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_FE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_E2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_C6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_AA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_A2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_86]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_11C]
                push    eax
                lea     ecx, [ebp+var_11C]
                push    ecx
                mov     ecx, [ebp+var_2D8]
                add     ecx, 0B90h
                call    sub_49B610
                mov     ecx, eax
                call    sub_4864C0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_11C]
                call    sub_4863C0
                jmp     loc_48610F
; ---------------------------------------------------------------------------

loc_486212:                             ; CODE XREF: sub_486080+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_2D8]
                call    read_and_verify_checksum
                mov     [ebp+var_11D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_11D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_486080      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_486250      proc near               ; CODE XREF: sub_486080+AA↑p
                                        ; sub_49B610+A6↓p

var_A8          = dword ptr -0A8h
var_A4          = dword ptr -0A4h
var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_4D          = byte ptr -4Dh
var_4C          = dword ptr -4Ch
var_44          = dword ptr -44h
var_3D          = byte ptr -3Dh
var_3C          = dword ptr -3Ch
var_34          = dword ptr -34h
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75940 SIZE 00000079 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_486250
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 9Ch
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 2
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 1Eh
                mov     [ebp+var_34], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_34]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_34]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 3Ah
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_3D]
                mov     [ebp+var_3C], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 56h
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_4D]
                mov     [ebp+var_4C], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_90]
                add     eax, 7Ah
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_A4], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_90]
                add     eax, 96h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A8], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_486250      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4863C0      proc near               ; CODE XREF: sub_486080+188↑p
                                        ; sub_49B610+132↓p ...

var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_34          = dword ptr -34h
var_28          = dword ptr -28h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F759D0 SIZE 00000067 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4863C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 3Ch
                mov     [ebp+var_48], ecx
                mov     [ebp+var_4], 4
                mov     eax, [ebp+var_48]
                add     eax, 96h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     ecx, [ebp+var_48]
                add     ecx, 7Ah
                mov     [ebp+var_1C], ecx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     edx, [ebp+var_48]
                add     edx, 56h
                mov     [ebp+var_28], edx
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     eax, [ebp+var_48]
                add     eax, 3Ah
                mov     [ebp+var_34], eax
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_34]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_48]
                add     ecx, 1Eh
                mov     [ebp+var_40], ecx
                mov     byte ptr [ebp+var_4], 9
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_48]
                add     edx, 2
                mov     [ebp+var_44], edx
                mov     [ebp+var_4], 0Ah
                push    0
                push    1
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4863C0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4864C0      proc near               ; CODE XREF: sub_486080+179↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 2
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 2
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 1Eh
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 1Eh
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ah
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 3Ah
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 56h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 56h
                call    sub_4A0090
                mov     edx, [ebp+var_88]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+72h]
                mov     [edx+72h], ecx
                mov     edx, [ebp+var_88]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+76h]
                mov     [edx+76h], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 7Ah
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 7Ah
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 96h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 96h
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_4864C0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4865C0      proc near               ; CODE XREF: sub_45E870+1005↑p

var_160         = dword ptr -160h
var_15C         = dword ptr -15Ch
var_134         = dword ptr -134h
var_12D         = byte ptr -12Dh
var_12C         = byte ptr -12Ch
var_12A         = byte ptr -12Ah
var_128         = byte ptr -128h
var_124         = byte ptr -124h
var_120         = byte ptr -120h
var_11C         = byte ptr -11Ch
var_11B         = byte ptr -11Bh
var_117         = byte ptr -117h
var_115         = byte ptr -115h
var_113         = byte ptr -113h
var_F7          = byte ptr -0F7h
var_DB          = byte ptr -0DBh
var_BF          = byte ptr -0BFh
var_BD          = byte ptr -0BDh
var_A1          = byte ptr -0A1h
var_85          = byte ptr -85h
var_83          = byte ptr -83h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75A50 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4865C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 154h
                mov     [ebp+var_15C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_134], eax
                mov     ecx, [ebp+var_15C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_486615
                mov     [ebp+var_160], offset byte_110A50C
                jmp     short loc_486623
; ---------------------------------------------------------------------------

loc_486615:                             ; CODE XREF: sub_4865C0+47↑j
                mov     edx, [ebp+var_15C]
                mov     eax, [edx]
                mov     [ebp+var_160], eax

loc_486623:                             ; CODE XREF: sub_4865C0+53↑j
                push    0
                mov     ecx, [ebp+var_134]
                push    ecx
                push    offset aTbSocialItem ; "tb_Social_Item"
                mov     edx, [ebp+var_160]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_486658
; ---------------------------------------------------------------------------

loc_48664F:                             ; CODE XREF: sub_4865C0+205↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_486658:                             ; CODE XREF: sub_4865C0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4867CA
                lea     ecx, [ebp+var_12C]
                call    sub_486810
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_12C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_12A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_128]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_124]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_120]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_11C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_11B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_117]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_115]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    0FFh
                lea     eax, [ebp+var_113]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     ecx, [ebp+var_F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_DB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_BF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                push    0FFh
                lea     ecx, [ebp+var_BD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    0FFh
                lea     edx, [ebp+var_A1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_85]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                push    0FFh
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_12C]
                push    edx
                lea     eax, [ebp+var_12C]
                push    eax
                mov     ecx, [ebp+var_15C]
                add     ecx, 0BA0h
                call    sub_49B840
                mov     ecx, eax
                call    sub_486A90
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_12C]
                call    sub_486980
                jmp     loc_48664F
; ---------------------------------------------------------------------------

loc_4867CA:                             ; CODE XREF: sub_4865C0+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_15C]
                call    read_and_verify_checksum
                mov     [ebp+var_12D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_12D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4865C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_486810      proc near               ; CODE XREF: sub_4865C0+AA↑p
                                        ; sub_49B840+A6↓p

var_A8          = dword ptr -0A8h
var_A4          = dword ptr -0A4h
var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_65          = byte ptr -65h
var_64          = dword ptr -64h
var_5C          = dword ptr -5Ch
var_4D          = byte ptr -4Dh
var_4C          = dword ptr -4Ch
var_44          = dword ptr -44h
var_3D          = byte ptr -3Dh
var_3C          = dword ptr -3Ch
var_34          = dword ptr -34h
var_25          = byte ptr -25h
var_24          = dword ptr -24h
var_1C          = dword ptr -1Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75A70 SIZE 0000007C BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_486810
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 9Ch
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 19h
                mov     [ebp+var_1C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_1C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 35h
                mov     [ebp+var_34], eax
                lea     ecx, [ebp+var_25]
                mov     [ebp+var_24], ecx
                mov     edx, [ebp+var_34]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_34]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 51h
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_3D]
                mov     [ebp+var_3C], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 6Fh
                mov     [ebp+var_5C], eax
                lea     ecx, [ebp+var_4D]
                mov     [ebp+var_4C], ecx
                mov     edx, [ebp+var_5C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_5C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 7
                mov     eax, [ebp+var_90]
                add     eax, 8Bh
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_65]
                mov     [ebp+var_64], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_A4], edx
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     eax, [ebp+var_90]
                add     eax, 0A9h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A8], edx
                mov     byte ptr [ebp+var_4], 0Ah
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 9
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_486810      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_486980      proc near               ; CODE XREF: sub_4865C0+200↑p
                                        ; sub_49B840+132↓p ...

var_48          = dword ptr -48h
var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_34          = dword ptr -34h
var_28          = dword ptr -28h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75B00 SIZE 0000006A BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_486980
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 3Ch
                mov     [ebp+var_48], ecx
                mov     [ebp+var_4], 4
                mov     eax, [ebp+var_48]
                add     eax, 0A9h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 4
                mov     byte ptr [ebp+var_4], 3
                mov     ecx, [ebp+var_48]
                add     ecx, 8Bh
                mov     [ebp+var_1C], ecx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 2
                mov     edx, [ebp+var_48]
                add     edx, 6Fh
                mov     [ebp+var_28], edx
                mov     byte ptr [ebp+var_4], 7
                push    0
                push    1
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     eax, [ebp+var_48]
                add     eax, 51h
                mov     [ebp+var_34], eax
                mov     byte ptr [ebp+var_4], 8
                push    0
                push    1
                mov     ecx, [ebp+var_34]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_48]
                add     ecx, 35h
                mov     [ebp+var_40], ecx
                mov     byte ptr [ebp+var_4], 9
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_48]
                add     edx, 19h
                mov     [ebp+var_44], edx
                mov     [ebp+var_4], 0Ah
                push    0
                push    1
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_486980      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_486A90      proc near               ; CODE XREF: sub_4865C0+1F1↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2]
                mov     [eax+2], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+4]
                mov     [eax+4], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+8]
                mov     [eax+8], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+10h]
                mov     [eax+10h], dl
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+11h]
                mov     [eax+11h], edx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+15h]
                mov     [eax+15h], dx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+17h]
                mov     [eax+17h], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 19h
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 19h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 35h
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 35h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 51h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 51h
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+6Dh]
                mov     [eax+6Dh], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 6Fh
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 6Fh
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 8Bh
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 8Bh
                call    sub_4A0090
                mov     ecx, [ebp+var_88]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+0A7h]
                mov     [ecx+0A7h], ax
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 0A9h
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 0A9h
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_486A90      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_486C20      proc near               ; CODE XREF: sub_45E870+101B↑p

var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0ACh
                mov     [ebp+var_B4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_B4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_486C72
                mov     [ebp+var_B8], offset byte_110A50C
                jmp     short loc_486C80
; ---------------------------------------------------------------------------

loc_486C72:                             ; CODE XREF: sub_486C20+44↑j
                mov     edx, [ebp+var_B4]
                mov     eax, [edx]
                mov     [ebp+var_B8], eax

loc_486C80:                             ; CODE XREF: sub_486C20+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbSocialMotion ; "tb_Social_Motion"
                mov     edx, [ebp+var_B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_486CB2
; ---------------------------------------------------------------------------

loc_486CA9:                             ; CODE XREF: sub_486C20+F2↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_486CB2:                             ; CODE XREF: sub_486C20+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_486D14
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_64+1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68]
                push    ecx
                mov     ecx, [ebp+var_B4]
                add     ecx, 0BB0h
                call    sub_49BA40
                mov     edx, [ebp+var_68]
                mov     [eax], edx
                mov     cx, [ebp+var_64]
                mov     [eax+4], cx
                mov     dl, [ebp+var_62]
                mov     [eax+6], dl
                jmp     short loc_486CA9
; ---------------------------------------------------------------------------

loc_486D14:                             ; CODE XREF: sub_486C20+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_B4]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_486C20      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_486D50      proc near               ; CODE XREF: sub_45E870+1031↑p

var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_94          = dword ptr -94h
var_8D          = byte ptr -8Dh
var_8C          = byte ptr -8Ch
var_88          = byte ptr -88h
var_87          = byte ptr -87h
var_86          = byte ptr -86h
var_85          = byte ptr -85h
var_81          = byte ptr -81h
var_7D          = byte ptr -7Dh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_69          = byte ptr -69h
var_67          = byte ptr -67h
var_63          = byte ptr -63h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B0h
                push    esi
                push    edi
                mov     [ebp+var_B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_94], eax
                mov     ecx, [ebp+var_B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_486DA7
                mov     [ebp+var_BC], offset byte_110A50C
                jmp     short loc_486DB5
; ---------------------------------------------------------------------------

loc_486DA7:                             ; CODE XREF: sub_486D50+49↑j
                mov     edx, [ebp+var_B8]
                mov     eax, [edx]
                mov     [ebp+var_BC], eax

loc_486DB5:                             ; CODE XREF: sub_486D50+55↑j
                push    0
                mov     ecx, [ebp+var_94]
                push    ecx
                push    offset aTbSocket ; "tb_Socket"
                mov     edx, [ebp+var_BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_486DEA
; ---------------------------------------------------------------------------

loc_486DE1:                             ; CODE XREF: sub_486D50+196↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_486DEA:                             ; CODE XREF: sub_486D50+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_486EEB
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_87]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_86]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_85]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_81]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_77]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_71]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_69]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_67]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_63]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_8C]
                push    eax
                mov     ecx, [ebp+var_B8]
                add     ecx, 0BC0h
                call    sub_49BBB0
                mov     ecx, 0Ah
                lea     esi, [ebp+var_8C]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_486DE1
; ---------------------------------------------------------------------------

loc_486EEB:                             ; CODE XREF: sub_486D50+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_B8]
                call    read_and_verify_checksum
                mov     [ebp+var_8D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_8D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_486D50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_486F30      proc near               ; CODE XREF: sub_45E870+1047↑p

var_D4          = dword ptr -0D4h
var_D0          = dword ptr -0D0h
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = word ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C8h
                mov     [ebp+var_D0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_D0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_486F82
                mov     [ebp+var_D4], offset byte_110A50C
                jmp     short loc_486F90
; ---------------------------------------------------------------------------

loc_486F82:                             ; CODE XREF: sub_486F30+44↑j
                mov     edx, [ebp+var_D0]
                mov     eax, [edx]
                mov     [ebp+var_D4], eax

loc_486F90:                             ; CODE XREF: sub_486F30+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbSoulGuage ; "tb_Soul_Guage"
                mov     edx, [ebp+var_D4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_486FC2
; ---------------------------------------------------------------------------

loc_486FB9:                             ; CODE XREF: sub_486F30+12C↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_486FC2:                             ; CODE XREF: sub_486F30+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_487061
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_70+1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_70+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_68+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_68+2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_70]
                push    edx
                mov     ecx, [ebp+var_D0]
                add     ecx, 0BD0h
                call    sub_49BD40
                mov     ecx, [ebp+var_70]
                mov     [eax], ecx
                mov     edx, [ebp+var_6C]
                mov     [eax+4], edx
                mov     ecx, [ebp+var_68]
                mov     [eax+8], ecx
                mov     dx, [ebp+var_64]
                mov     [eax+0Ch], dx
                jmp     loc_486FB9
; ---------------------------------------------------------------------------

loc_487061:                             ; CODE XREF: sub_486F30+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_D0]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_486F30      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4870A0      proc near               ; CODE XREF: sub_45E870+105D↑p

var_174         = dword ptr -174h
var_170         = dword ptr -170h
var_144         = dword ptr -144h
var_13D         = byte ptr -13Dh
var_13C         = byte ptr -13Ch
var_13A         = byte ptr -13Ah
var_138         = byte ptr -138h
var_136         = byte ptr -136h
var_134         = byte ptr -134h
var_132         = byte ptr -132h
var_130         = byte ptr -130h
var_12E         = byte ptr -12Eh
var_12C         = byte ptr -12Ch
var_12A         = byte ptr -12Ah
var_126         = byte ptr -126h
var_122         = byte ptr -122h
var_11E         = byte ptr -11Eh
var_11A         = byte ptr -11Ah
var_116         = byte ptr -116h
var_114         = byte ptr -114h
var_112         = byte ptr -112h
var_110         = byte ptr -110h
var_10E         = byte ptr -10Eh
var_10C         = byte ptr -10Ch
var_F0          = byte ptr -0F0h
var_D4          = byte ptr -0D4h
var_B8          = byte ptr -0B8h
var_9C          = byte ptr -9Ch
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7C          = byte ptr -7Ch
var_7A          = byte ptr -7Ah
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_75          = byte ptr -75h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_6B          = byte ptr -6Bh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75B80 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4870A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 168h
                mov     [ebp+var_170], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_144], eax
                mov     ecx, [ebp+var_170]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4870F5
                mov     [ebp+var_174], offset byte_110A50C
                jmp     short loc_487103
; ---------------------------------------------------------------------------

loc_4870F5:                             ; CODE XREF: sub_4870A0+47↑j
                mov     edx, [ebp+var_170]
                mov     eax, [edx]
                mov     [ebp+var_174], eax

loc_487103:                             ; CODE XREF: sub_4870A0+53↑j
                push    0
                mov     ecx, [ebp+var_144]
                push    ecx
                push    offset aTbSoulMetry ; "tb_soul_metry"
                mov     edx, [ebp+var_174]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_487138
; ---------------------------------------------------------------------------

loc_48712F:                             ; CODE XREF: sub_4870A0+306↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_487138:                             ; CODE XREF: sub_4870A0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4873AB
                push    offset sub_93E020
                push    offset sub_48C660
                push    5
                push    1Ch
                lea     eax, [ebp+var_10C]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_13C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_13A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_138]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_136]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_132]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_130]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_12E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_12C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_12A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_126]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_122]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_11E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_11A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_116]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_114]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_112]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_110]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_10E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     edx, [ebp+var_10C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_F0]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_D4]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_75]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_13C]
                push    eax
                lea     ecx, [ebp+var_13C]
                push    ecx
                mov     ecx, [ebp+var_170]
                add     ecx, 0BE0h
                call    sub_49BEE0
                mov     ecx, eax
                call    sub_487410
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    5
                push    1Ch
                lea     edx, [ebp+var_10C]
                push    edx
                call    sub_ED9E2A
                jmp     loc_48712F
; ---------------------------------------------------------------------------

loc_4873AB:                             ; CODE XREF: sub_4870A0+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_170]
                call    read_and_verify_checksum
                mov     [ebp+var_13D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_13D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4870A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4873F0      proc near               ; CODE XREF: sub_4870A0+AEEAEE↓j
                                        ; sub_49BEE0+ADAEC6↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    5
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 30h
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_4873F0      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_487410      proc near               ; CODE XREF: sub_4870A0+2E8↑p

var_58          = dword ptr -58h
var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_18          = dword ptr -18h
var_14          = dword ptr -14h
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_8           = dword ptr -8
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 58h
                push    esi
                mov     [ebp+var_58], ecx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2]
                mov     [eax+2], dx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+4]
                mov     [eax+4], dx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+6]
                mov     [eax+6], dx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+8]
                mov     [eax+8], dx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Ah]
                mov     [eax+0Ah], dx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Ch]
                mov     [eax+0Ch], dx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Eh]
                mov     [eax+0Eh], dx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+10h]
                mov     [eax+10h], dx
                mov     [ebp+var_4], 0
                jmp     short loc_4874A8
; ---------------------------------------------------------------------------

loc_48749F:                             ; CODE XREF: sub_487410+B4↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_4874A8:                             ; CODE XREF: sub_487410+8D↑j
                cmp     [ebp+var_4], 5
                jnb     short loc_4874C6
                mov     ecx, [ebp+var_4]
                mov     edx, [ebp+var_58]
                mov     eax, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     ax, [esi+eax*2+8]
                mov     [edx+ecx*2+8], ax
                jmp     short loc_48749F
; ---------------------------------------------------------------------------

loc_4874C6:                             ; CODE XREF: sub_487410+9C↑j
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+12h]
                mov     [ecx+12h], eax
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+16h]
                mov     [ecx+16h], eax
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1Ah]
                mov     [ecx+1Ah], eax
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+1Eh]
                mov     [ecx+1Eh], eax
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+22h]
                mov     [ecx+22h], eax
                mov     [ebp+var_8], 0
                jmp     short loc_487514
; ---------------------------------------------------------------------------

loc_48750B:                             ; CODE XREF: sub_487410+11E↓j
                mov     ecx, [ebp+var_8]
                add     ecx, 1
                mov     [ebp+var_8], ecx

loc_487514:                             ; CODE XREF: sub_487410+F9↑j
                cmp     [ebp+var_8], 5
                jnb     short loc_487530
                mov     edx, [ebp+var_8]
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+var_8]
                mov     esi, [ebp+arg_0]
                mov     ecx, [esi+ecx*4+12h]
                mov     [eax+edx*4+12h], ecx
                jmp     short loc_48750B
; ---------------------------------------------------------------------------

loc_487530:                             ; CODE XREF: sub_487410+108↑j
                mov     edx, [ebp+var_58]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+26h]
                mov     [edx+26h], cx
                mov     edx, [ebp+var_58]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+28h]
                mov     [edx+28h], cx
                mov     edx, [ebp+var_58]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+2Ah]
                mov     [edx+2Ah], cx
                mov     edx, [ebp+var_58]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+2Ch]
                mov     [edx+2Ch], cx
                mov     edx, [ebp+var_58]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+2Eh]
                mov     [edx+2Eh], cx
                mov     [ebp+var_C], 0
                jmp     short loc_487588
; ---------------------------------------------------------------------------

loc_48757F:                             ; CODE XREF: sub_487410+194↓j
                mov     edx, [ebp+var_C]
                add     edx, 1
                mov     [ebp+var_C], edx

loc_487588:                             ; CODE XREF: sub_487410+16D↑j
                cmp     [ebp+var_C], 5
                jnb     short loc_4875A6
                mov     eax, [ebp+var_C]
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+var_C]
                mov     esi, [ebp+arg_0]
                mov     dx, [esi+edx*2+26h]
                mov     [ecx+eax*2+26h], dx
                jmp     short loc_48757F
; ---------------------------------------------------------------------------

loc_4875A6:                             ; CODE XREF: sub_487410+17C↑j
                mov     [ebp+var_10], 0
                jmp     short loc_4875B8
; ---------------------------------------------------------------------------

loc_4875AF:                             ; CODE XREF: sub_487410+1D7↓j
                mov     eax, [ebp+var_10]
                add     eax, 1
                mov     [ebp+var_10], eax

loc_4875B8:                             ; CODE XREF: sub_487410+19D↑j
                cmp     [ebp+var_10], 5
                jnb     short loc_4875E9
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+var_10]
                imul    edx, 1Ch
                mov     eax, [ebp+arg_0]
                lea     ecx, [eax+edx+30h]
                push    ecx
                mov     edx, [ebp+var_10]
                imul    edx, 1Ch
                mov     eax, [ebp+var_58]
                lea     ecx, [eax+edx+30h]
                call    sub_4A0090
                jmp     short loc_4875AF
; ---------------------------------------------------------------------------

loc_4875E9:                             ; CODE XREF: sub_487410+1AC↑j
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+0BCh]
                mov     [ecx+0BCh], ax
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+0BEh]
                mov     [ecx+0BEh], ax
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+0C0h]
                mov     [ecx+0C0h], ax
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+0C2h]
                mov     [ecx+0C2h], ax
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+0C4h]
                mov     [ecx+0C4h], ax
                mov     [ebp+var_14], 0
                jmp     short loc_48765F
; ---------------------------------------------------------------------------

loc_487656:                             ; CODE XREF: sub_487410+271↓j
                mov     ecx, [ebp+var_14]
                add     ecx, 1
                mov     [ebp+var_14], ecx

loc_48765F:                             ; CODE XREF: sub_487410+244↑j
                cmp     [ebp+var_14], 5
                jnb     short loc_487683
                mov     edx, [ebp+var_14]
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+var_14]
                mov     esi, [ebp+arg_0]
                mov     cx, [esi+ecx*2+0BCh]
                mov     [eax+edx*2+0BCh], cx
                jmp     short loc_487656
; ---------------------------------------------------------------------------

loc_487683:                             ; CODE XREF: sub_487410+253↑j
                mov     edx, [ebp+var_58]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0C6h]
                mov     [edx+0C6h], cl
                mov     edx, [ebp+var_58]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+0C7h]
                mov     [edx+0C7h], cl
                mov     [ebp+var_18], 0
                jmp     short loc_4876B9
; ---------------------------------------------------------------------------

loc_4876B0:                             ; CODE XREF: sub_487410+2C7↓j
                mov     edx, [ebp+var_18]
                add     edx, 1
                mov     [ebp+var_18], edx

loc_4876B9:                             ; CODE XREF: sub_487410+29E↑j
                cmp     [ebp+var_18], 2
                jnb     short loc_4876D9
                mov     eax, [ebp+var_58]
                add     eax, [ebp+var_18]
                mov     ecx, [ebp+arg_0]
                add     ecx, [ebp+var_18]
                mov     dl, [ecx+0C6h]
                mov     [eax+0C6h], dl
                jmp     short loc_4876B0
; ---------------------------------------------------------------------------

loc_4876D9:                             ; CODE XREF: sub_487410+2AD↑j
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0C8h]
                mov     [eax+0C8h], edx
                mov     eax, [ebp+var_58]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0CCh]
                mov     [eax+0CCh], edx
                mov     [ebp+var_1C], 0
                jmp     short loc_48770F
; ---------------------------------------------------------------------------

loc_487706:                             ; CODE XREF: sub_487410+31F↓j
                mov     eax, [ebp+var_1C]
                add     eax, 1
                mov     [ebp+var_1C], eax

loc_48770F:                             ; CODE XREF: sub_487410+2F4↑j
                cmp     [ebp+var_1C], 2
                jnb     short loc_487731
                mov     ecx, [ebp+var_1C]
                mov     edx, [ebp+var_58]
                mov     eax, [ebp+var_1C]
                mov     esi, [ebp+arg_0]
                mov     eax, [esi+eax*4+0C8h]
                mov     [edx+ecx*4+0C8h], eax
                jmp     short loc_487706
; ---------------------------------------------------------------------------

loc_487731:                             ; CODE XREF: sub_487410+303↑j
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0D0h]
                mov     [ecx+0D0h], al
                mov     ecx, [ebp+var_58]
                mov     edx, [ebp+arg_0]
                mov     al, [edx+0D1h]
                mov     [ecx+0D1h], al
                mov     [ebp+var_20], 0
                jmp     short loc_487767
; ---------------------------------------------------------------------------

loc_48775E:                             ; CODE XREF: sub_487410+375↓j
                mov     ecx, [ebp+var_20]
                add     ecx, 1
                mov     [ebp+var_20], ecx

loc_487767:                             ; CODE XREF: sub_487410+34C↑j
                cmp     [ebp+var_20], 2
                jnb     short loc_487787
                mov     edx, [ebp+var_58]
                add     edx, [ebp+var_20]
                mov     eax, [ebp+arg_0]
                add     eax, [ebp+var_20]
                mov     cl, [eax+0D0h]
                mov     [edx+0D0h], cl
                jmp     short loc_48775E
; ---------------------------------------------------------------------------

loc_487787:                             ; CODE XREF: sub_487410+35B↑j
                mov     eax, [ebp+var_58]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_487410      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4877A0      proc near               ; CODE XREF: sub_45E870+1073↑p

var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_128         = dword ptr -128h
var_118         = dword ptr -118h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = word ptr -80h
var_7E          = byte ptr -7Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75BA0 SIZE 00000026 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48A8A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 128h
                mov     [ebp+var_12C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_12C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4877F5
                mov     [ebp+var_130], offset byte_110A50C
                jmp     short loc_487803
; ---------------------------------------------------------------------------

loc_4877F5:                             ; CODE XREF: sub_4877A0+47↑j
                mov     edx, [ebp+var_12C]
                mov     eax, [edx]
                mov     [ebp+var_130], eax

loc_487803:                             ; CODE XREF: sub_4877A0+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbSoulMetryStr ; "tb_soul_metry_string"
                mov     edx, [ebp+var_130]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_487838
; ---------------------------------------------------------------------------

loc_48782F:                             ; CODE XREF: sub_4877A0+164↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_487838:                             ; CODE XREF: sub_4877A0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_487909
                lea     eax, [ebp+var_7E]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_134], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_12C]
                add     ecx, 0BF0h
                call    sub_49D4E0
                mov     [ebp+var_118], eax
                mov     eax, [ebp+var_118]
                mov     cx, [ebp+var_80]
                mov     [eax], cx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7E]
                push    eax
                mov     ecx, [ebp+var_118]
                add     ecx, 2
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7E]
                mov     [ebp+var_128], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_128]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_48782F
; ---------------------------------------------------------------------------

loc_487909:                             ; CODE XREF: sub_4877A0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_12C]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4877A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_487950      proc near               ; CODE XREF: sub_4877A0+AEE416↓j
                                        ; sub_49D4E0+AD9A1B↓j

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_8FF940
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     eax, [ebp+var_20]
                add     eax, 2
                mov     [ebp+var_1C], eax
                mov     [ebp+var_4], 0
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_487950      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4879A0      proc near               ; CODE XREF: sub_45E870+1089↑p

var_E0          = dword ptr -0E0h
var_DC          = dword ptr -0DCh
var_B4          = dword ptr -0B4h
var_AD          = byte ptr -0ADh
var_AC          = byte ptr -0ACh
var_A8          = byte ptr -0A8h
var_A4          = byte ptr -0A4h
var_A3          = byte ptr -0A3h
var_A2          = byte ptr -0A2h
var_A0          = byte ptr -0A0h
var_9C          = byte ptr -9Ch
var_9A          = byte ptr -9Ah
var_96          = byte ptr -96h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D4h
                push    esi
                push    edi
                mov     [ebp+var_DC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_B4], eax
                mov     ecx, [ebp+var_DC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4879F7
                mov     [ebp+var_E0], offset byte_110A50C
                jmp     short loc_487A05
; ---------------------------------------------------------------------------

loc_4879F7:                             ; CODE XREF: sub_4879A0+49↑j
                mov     edx, [ebp+var_DC]
                mov     eax, [edx]
                mov     [ebp+var_E0], eax

loc_487A05:                             ; CODE XREF: sub_4879A0+55↑j
                push    0
                mov     ecx, [ebp+var_B4]
                push    ecx
                push    offset aTbSoulstoneLev ; "tb_SoulStone_LevelUp"
                mov     edx, [ebp+var_E0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_487A3A
; ---------------------------------------------------------------------------

loc_487A31:                             ; CODE XREF: sub_4879A0+1DD↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_487A3A:                             ; CODE XREF: sub_4879A0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_487B82
                lea     eax, [ebp+var_AC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_A4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_A3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_A2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_A0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_9A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_96]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_92]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_86]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_82]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_76]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AC]
                push    ecx
                mov     ecx, [ebp+var_DC]
                add     ecx, 0C00h
                call    sub_49C140
                mov     ecx, 10h
                lea     esi, [ebp+var_AC]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_487A31
; ---------------------------------------------------------------------------

loc_487B82:                             ; CODE XREF: sub_4879A0+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_DC]
                call    read_and_verify_checksum
                mov     [ebp+var_AD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_AD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4879A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_487BC0      proc near               ; CODE XREF: sub_45E870+109F↑p

var_B8          = dword ptr -0B8h
var_B4          = dword ptr -0B4h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7C          = byte ptr -7Ch
var_7A          = byte ptr -7Ah
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_69          = byte ptr -69h
var_68          = byte ptr -68h
var_67          = byte ptr -67h
var_66          = byte ptr -66h
var_65          = byte ptr -65h
var_64          = byte ptr -64h
var_63          = byte ptr -63h
var_62          = byte ptr -62h
var_61          = byte ptr -61h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0ACh
                push    esi
                push    edi
                mov     [ebp+var_B4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_B4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_487C17
                mov     [ebp+var_B8], offset byte_110A50C
                jmp     short loc_487C25
; ---------------------------------------------------------------------------

loc_487C17:                             ; CODE XREF: sub_487BC0+49↑j
                mov     edx, [ebp+var_B4]
                mov     eax, [edx]
                mov     [ebp+var_B8], eax

loc_487C25:                             ; CODE XREF: sub_487BC0+55↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbSpecialmazeO ; "tb_SpecialMaze_Open"
                mov     edx, [ebp+var_B8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_487C5A
; ---------------------------------------------------------------------------

loc_487C51:                             ; CODE XREF: sub_487BC0+1C3↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_487C5A:                             ; CODE XREF: sub_487BC0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_487D88
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_78]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_72]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_70]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_69]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_67]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_66]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_65]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_63]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_62]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_61]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_80]
                push    eax
                mov     ecx, [ebp+var_B4]
                add     ecx, 0C10h
                call    sub_49C310
                mov     ecx, 8
                lea     esi, [ebp+var_80]
                mov     edi, eax
                rep movsd
                jmp     loc_487C51
; ---------------------------------------------------------------------------

loc_487D88:                             ; CODE XREF: sub_487BC0+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_B4]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_487BC0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_487DD0      proc near               ; CODE XREF: sub_45E870+10B5↑p

var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_E8          = dword ptr -0E8h
var_CC          = dword ptr -0CCh
var_C5          = byte ptr -0C5h
var_C4          = byte ptr -0C4h
var_C0          = byte ptr -0C0h
var_BF          = byte ptr -0BFh
var_BE          = byte ptr -0BEh
var_BD          = byte ptr -0BDh
var_B9          = byte ptr -0B9h
var_B5          = byte ptr -0B5h
var_B1          = byte ptr -0B1h
var_95          = byte ptr -95h
var_94          = byte ptr -94h
var_93          = byte ptr -93h
var_92          = byte ptr -92h
var_8E          = byte ptr -8Eh
var_8A          = byte ptr -8Ah
var_86          = byte ptr -86h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75BD0 SIZE 00000034 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_487DD0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E4h
                mov     [ebp+var_EC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_CC], eax
                mov     ecx, [ebp+var_EC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_487E25
                mov     [ebp+var_F0], offset byte_110A50C
                jmp     short loc_487E33
; ---------------------------------------------------------------------------

loc_487E25:                             ; CODE XREF: sub_487DD0+47↑j
                mov     edx, [ebp+var_EC]
                mov     eax, [edx]
                mov     [ebp+var_F0], eax

loc_487E33:                             ; CODE XREF: sub_487DD0+53↑j
                push    0
                mov     ecx, [ebp+var_CC]
                push    ecx
                push    offset aTbSpeech ; "tb_Speech"
                mov     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_487E68
; ---------------------------------------------------------------------------

loc_487E5F:                             ; CODE XREF: sub_487DD0+209↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_487E68:                             ; CODE XREF: sub_487DD0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_487FDE
                lea     ecx, [ebp+var_B1]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_86]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_C4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_BF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_BE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_BD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_B1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_95]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_93]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_92]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     edx, [ebp+var_86]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_C4]
                push    eax
                lea     ecx, [ebp+var_C4]
                push    ecx
                mov     ecx, [ebp+var_EC]
                add     ecx, 0C20h
                call    sub_49C4B0
                mov     ecx, eax
                call    sub_4880A0
                mov     byte ptr [ebp+var_4], 3
                lea     edx, [ebp+var_86]
                mov     [ebp+var_E8], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_E8]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_B1]
                call    sub_93E020
                jmp     loc_487E5F
; ---------------------------------------------------------------------------

loc_487FDE:                             ; CODE XREF: sub_487DD0+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_EC]
                call    read_and_verify_checksum
                mov     [ebp+var_C5], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_C5]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_487DD0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_488020      proc near               ; CODE XREF: sub_49C4B0+11F↓p
                                        ; sub_49C4B0+131↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75C10 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488020
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 3Eh
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 13h
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_488020      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4880A0      proc near               ; CODE XREF: sub_487DD0+1CE↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+5]
                mov     [eax+5], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+6]
                mov     [eax+6], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+7]
                mov     [eax+7], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Bh]
                mov     [eax+0Bh], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Fh]
                mov     [eax+0Fh], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 13h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 13h
                call    sub_4A0090
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+2Fh]
                mov     [edx+2Fh], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+30h]
                mov     [edx+30h], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+31h]
                mov     [edx+31h], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+32h]
                mov     [edx+32h], ecx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+36h]
                mov     [edx+36h], ecx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+3Ah]
                mov     [edx+3Ah], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 3Eh
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 3Eh
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_4880A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_488190      proc near               ; CODE XREF: sub_45E870+10CB↑p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_11C         = dword ptr -11Ch
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = dword ptr -80h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488190
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 12Ch
                mov     [ebp+var_130], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_130]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4881E5
                mov     [ebp+var_134], offset byte_110A50C
                jmp     short loc_4881F3
; ---------------------------------------------------------------------------

loc_4881E5:                             ; CODE XREF: sub_488190+47↑j
                mov     edx, [ebp+var_130]
                mov     eax, [edx]
                mov     [ebp+var_134], eax

loc_4881F3:                             ; CODE XREF: sub_488190+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbSpeechString ; "tb_Speech_String"
                mov     edx, [ebp+var_134]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_488228
; ---------------------------------------------------------------------------

loc_48821F:                             ; CODE XREF: sub_488190+162↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_488228:                             ; CODE XREF: sub_488190+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4882F7
                lea     eax, [ebp+var_7C]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_138], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_130]
                add     ecx, 0C30h
                call    sub_49C730
                mov     [ebp+var_11C], eax
                mov     eax, [ebp+var_11C]
                mov     ecx, [ebp+var_80]
                mov     [eax], ecx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7C]
                push    eax
                mov     ecx, [ebp+var_11C]
                add     ecx, 4
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7C]
                mov     [ebp+var_12C], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_12C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_48821F
; ---------------------------------------------------------------------------

loc_4882F7:                             ; CODE XREF: sub_488190+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_130]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_488190      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_488330      proc near               ; CODE XREF: sub_45E870+10E1↑p

var_D0          = dword ptr -0D0h
var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_A4          = dword ptr -0A4h
var_9D          = byte ptr -9Dh
var_9C          = byte ptr -9Ch
var_9B          = byte ptr -9Bh
var_7F          = byte ptr -7Fh
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_66          = byte ptr -66h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75C40 SIZE 0000001E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488330
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C4h
                mov     [ebp+var_CC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A4], eax
                mov     ecx, [ebp+var_CC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_488385
                mov     [ebp+var_D0], offset byte_110A50C
                jmp     short loc_488393
; ---------------------------------------------------------------------------

loc_488385:                             ; CODE XREF: sub_488330+47↑j
                mov     edx, [ebp+var_CC]
                mov     eax, [edx]
                mov     [ebp+var_D0], eax

loc_488393:                             ; CODE XREF: sub_488330+53↑j
                push    0
                mov     ecx, [ebp+var_A4]
                push    ecx
                push    offset aTbSpeechTag ; "tb_Speech_tag"
                mov     edx, [ebp+var_D0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4883C8
; ---------------------------------------------------------------------------

loc_4883BF:                             ; CODE XREF: sub_488330+183↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4883C8:                             ; CODE XREF: sub_488330+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4884B8
                lea     ecx, [ebp+var_9B]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     ecx, [ebp+var_9B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_7F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_66]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     edx, [ebp+var_9C]
                push    edx
                mov     ecx, [ebp+var_CC]
                add     ecx, 0C40h
                call    sub_49C910
                mov     ecx, eax
                call    sub_4884F0
                mov     byte ptr [ebp+var_4], 0
                lea     eax, [ebp+var_9B]
                mov     [ebp+var_C8], eax
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_C8]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_4883BF
; ---------------------------------------------------------------------------

loc_4884B8:                             ; CODE XREF: sub_488330+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_CC]
                call    read_and_verify_checksum
                mov     [ebp+var_9D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_9D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_488330      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4884F0      proc near               ; CODE XREF: sub_488330+157↑p

var_3C          = dword ptr -3Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 3Ch
                push    esi
                mov     [ebp+var_3C], ecx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 1
                push    ecx
                mov     ecx, [ebp+var_3C]
                add     ecx, 1
                call    sub_4A0090
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+1Dh]
                mov     [edx+1Dh], cl
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+1Eh]
                mov     [edx+1Eh], ecx
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+22h]
                mov     [edx+22h], ecx
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+26h]
                mov     [edx+26h], ecx
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2Ah]
                mov     [edx+2Ah], ecx
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+2Eh]
                mov     [edx+2Eh], ecx
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+32h]
                mov     [edx+32h], ecx
                mov     edx, [ebp+var_3C]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+36h]
                mov     [edx+36h], ecx
                mov     [ebp+var_4], 0
                jmp     short loc_488590
; ---------------------------------------------------------------------------

loc_488587:                             ; CODE XREF: sub_4884F0+BA↓j
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_488590:                             ; CODE XREF: sub_4884F0+95↑j
                cmp     [ebp+var_4], 6
                jnb     short loc_4885AC
                mov     eax, [ebp+var_4]
                mov     ecx, [ebp+var_3C]
                mov     edx, [ebp+var_4]
                mov     esi, [ebp+arg_0]
                mov     edx, [esi+edx*4+1Eh]
                mov     [ecx+eax*4+1Eh], edx
                jmp     short loc_488587
; ---------------------------------------------------------------------------

loc_4885AC:                             ; CODE XREF: sub_4884F0+A4↑j
                mov     eax, [ebp+var_3C]
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn    4
sub_4884F0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4885C0      proc near               ; CODE XREF: sub_45E870+10F7↑p

var_170         = dword ptr -170h
var_16C         = dword ptr -16Ch
var_12C         = dword ptr -12Ch
var_125         = byte ptr -125h
var_124         = byte ptr -124h
var_122         = byte ptr -122h
var_11E         = byte ptr -11Eh
var_11A         = byte ptr -11Ah
var_116         = byte ptr -116h
var_112         = byte ptr -112h
var_10E         = byte ptr -10Eh
var_10A         = byte ptr -10Ah
var_106         = byte ptr -106h
var_102         = byte ptr -102h
var_FE          = byte ptr -0FEh
var_FA          = byte ptr -0FAh
var_F6          = byte ptr -0F6h
var_F2          = byte ptr -0F2h
var_EE          = byte ptr -0EEh
var_EA          = byte ptr -0EAh
var_E6          = byte ptr -0E6h
var_E2          = byte ptr -0E2h
var_DE          = byte ptr -0DEh
var_DA          = byte ptr -0DAh
var_D6          = byte ptr -0D6h
var_D2          = byte ptr -0D2h
var_CE          = byte ptr -0CEh
var_CA          = byte ptr -0CAh
var_C6          = byte ptr -0C6h
var_C2          = byte ptr -0C2h
var_BE          = byte ptr -0BEh
var_BA          = byte ptr -0BAh
var_B6          = byte ptr -0B6h
var_B2          = byte ptr -0B2h
var_AE          = byte ptr -0AEh
var_AA          = byte ptr -0AAh
var_A6          = byte ptr -0A6h
var_A2          = byte ptr -0A2h
var_9E          = byte ptr -9Eh
var_9A          = byte ptr -9Ah
var_96          = byte ptr -96h
var_95          = byte ptr -95h
var_94          = byte ptr -94h
var_93          = byte ptr -93h
var_92          = byte ptr -92h
var_91          = byte ptr -91h
var_90          = byte ptr -90h
var_8F          = byte ptr -8Fh
var_8E          = byte ptr -8Eh
var_8D          = byte ptr -8Dh
var_8C          = byte ptr -8Ch
var_8B          = byte ptr -8Bh
var_8A          = byte ptr -8Ah
var_86          = byte ptr -86h
var_82          = byte ptr -82h
var_7E          = byte ptr -7Eh
var_7A          = byte ptr -7Ah
var_76          = byte ptr -76h
var_72          = byte ptr -72h
var_6E          = byte ptr -6Eh
var_6A          = byte ptr -6Ah
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 164h
                push    esi
                push    edi
                mov     [ebp+var_16C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_12C], eax
                mov     ecx, [ebp+var_16C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_488617
                mov     [ebp+var_170], offset byte_110A50C
                jmp     short loc_488625
; ---------------------------------------------------------------------------

loc_488617:                             ; CODE XREF: sub_4885C0+49↑j
                mov     edx, [ebp+var_16C]
                mov     eax, [edx]
                mov     [ebp+var_170], eax

loc_488625:                             ; CODE XREF: sub_4885C0+55↑j
                push    0
                mov     ecx, [ebp+var_12C]
                push    ecx
                push    offset aTbStatus ; "tb_Status"
                mov     edx, [ebp+var_170]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48865A
; ---------------------------------------------------------------------------

loc_488651:                             ; CODE XREF: sub_4885C0+46C↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48865A:                             ; CODE XREF: sub_4885C0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_488A31
                lea     eax, [ebp+var_124]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_122]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_11E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_11A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_116]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_112]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_10E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_10A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_106]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_102]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_FE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_FA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_F6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_F2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_EE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_EA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_E6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_E2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_DE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_DA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_D6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_D2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_CE]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_CA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_C6]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_C2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_BE]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_BA]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_B6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_B2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_AE]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_AA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_A6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_A2]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_9E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_9A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_96]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_95]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_94]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_93]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_92]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_91]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_90]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_8F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_8E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_8B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_82]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_76]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_6A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_124]
                push    eax
                mov     ecx, [ebp+var_16C]
                add     ecx, 0C50h
                call    sub_49CBB0
                mov     ecx, 2Fh
                lea     esi, [ebp+var_124]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_488651
; ---------------------------------------------------------------------------

loc_488A31:                             ; CODE XREF: sub_4885C0+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_16C]
                call    read_and_verify_checksum
                mov     [ebp+var_125], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_125]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4885C0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_488A70      proc near               ; CODE XREF: sub_45E870+110D↑p

var_144         = dword ptr -144h
var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_124         = dword ptr -124h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_80          = byte ptr -80h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4897D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 138h
                mov     [ebp+var_13C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_13C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_488AC5
                mov     [ebp+var_140], offset byte_110A50C
                jmp     short loc_488AD3
; ---------------------------------------------------------------------------

loc_488AC5:                             ; CODE XREF: sub_488A70+47↑j
                mov     edx, [ebp+var_13C]
                mov     eax, [edx]
                mov     [ebp+var_140], eax

loc_488AD3:                             ; CODE XREF: sub_488A70+53↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbSubweapon ; "tb_SubWeapon"
                mov     edx, [ebp+var_140]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_488B08
; ---------------------------------------------------------------------------

loc_488AFF:                             ; CODE XREF: sub_488A70+182↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_488B08:                             ; CODE XREF: sub_488A70+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_488BF7
                lea     eax, [ebp+var_80]
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_144], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_84]
                push    eax
                mov     ecx, [ebp+var_13C]
                add     ecx, 0C60h
                call    sub_49CD60
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_124]
                mov     edx, [ebp+var_84]
                mov     [ecx], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                lea     ecx, [ebp+var_80]
                push    ecx
                mov     ecx, [ebp+var_124]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, [ebp+var_124]
                mov     eax, [ebp+var_64]
                mov     [edx+20h], eax
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_80]
                mov     [ebp+var_138], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_138]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_488AFF
; ---------------------------------------------------------------------------

loc_488BF7:                             ; CODE XREF: sub_488A70+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_13C]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_488A70      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_488C30      proc near               ; CODE XREF: sub_45E870+1123↑p

var_234         = dword ptr -234h
var_230         = dword ptr -230h
var_E4          = dword ptr -0E4h
var_DD          = byte ptr -0DDh
var_DC          = byte ptr -0DCh
var_DB          = byte ptr -0DBh
var_D9          = byte ptr -0D9h
var_D7          = byte ptr -0D7h
var_BB          = byte ptr -0BBh
var_9F          = byte ptr -9Fh
var_83          = byte ptr -83h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75C70 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488C30
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 228h
                mov     [ebp+var_230], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_E4], eax
                mov     ecx, [ebp+var_230]
                cmp     dword ptr [ecx], 0
                jnz     short loc_488C85
                mov     [ebp+var_234], offset byte_110A50C
                jmp     short loc_488C93
; ---------------------------------------------------------------------------

loc_488C85:                             ; CODE XREF: sub_488C30+47↑j
                mov     edx, [ebp+var_230]
                mov     eax, [edx]
                mov     [ebp+var_234], eax

loc_488C93:                             ; CODE XREF: sub_488C30+53↑j
                push    0
                mov     ecx, [ebp+var_E4]
                push    ecx
                push    offset aTbSystemmail ; "tb_SystemMail"
                mov     edx, [ebp+var_234]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_488CC8
; ---------------------------------------------------------------------------

loc_488CBF:                             ; CODE XREF: sub_488C30+165↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_488CC8:                             ; CODE XREF: sub_488C30+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_488D9A
                lea     ecx, [ebp+var_DC]
                call    sub_488DE0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_DC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_DB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_D9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     eax, [ebp+var_D7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_BB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_9F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_83]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_DC]
                push    ecx
                lea     edx, [ebp+var_DC]
                push    edx
                mov     ecx, [ebp+var_230]
                add     ecx, 0C70h
                call    sub_49CF60
                mov     ecx, eax
                call    sub_488FB0
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_DC]
                call    sub_488EF0
                jmp     loc_488CBF
; ---------------------------------------------------------------------------

loc_488D9A:                             ; CODE XREF: sub_488C30+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_230]
                call    read_and_verify_checksum
                mov     [ebp+var_DD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_DD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_488C30      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_488DE0      proc near               ; CODE XREF: sub_488C30+AA↑p
                                        ; sub_49CF60+A6↓p

var_A0          = dword ptr -0A0h
var_9C          = dword ptr -9Ch
var_98          = dword ptr -98h
var_94          = dword ptr -94h
var_90          = dword ptr -90h
var_8C          = dword ptr -8Ch
var_75          = byte ptr -75h
var_74          = dword ptr -74h
var_6C          = dword ptr -6Ch
var_55          = byte ptr -55h
var_54          = dword ptr -54h
var_4C          = dword ptr -4Ch
var_35          = byte ptr -35h
var_34          = dword ptr -34h
var_2C          = dword ptr -2Ch
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75C90 SIZE 0000004D BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488DE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 94h
                mov     [ebp+var_90], ecx
                mov     eax, [ebp+var_90]
                add     eax, 5
                mov     [ebp+var_2C], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_2C]
                mov     [ebp+var_94], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_90]
                add     eax, 21h
                mov     [ebp+var_4C], eax
                lea     ecx, [ebp+var_35]
                mov     [ebp+var_34], ecx
                mov     edx, [ebp+var_4C]
                mov     [ebp+var_98], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_4C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_90]
                add     eax, 3Dh
                mov     [ebp+var_6C], eax
                lea     ecx, [ebp+var_55]
                mov     [ebp+var_54], ecx
                mov     edx, [ebp+var_6C]
                mov     [ebp+var_9C], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_6C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     eax, [ebp+var_90]
                add     eax, 59h
                mov     [ebp+var_8C], eax
                lea     ecx, [ebp+var_75]
                mov     [ebp+var_74], ecx
                mov     edx, [ebp+var_8C]
                mov     [ebp+var_A0], edx
                mov     byte ptr [ebp+var_4], 6
                push    0
                push    0
                mov     ecx, [ebp+var_8C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 5
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_90]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_488DE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_488EF0      proc near               ; CODE XREF: sub_488C30+160↑p
                                        ; sub_49CF60+130↓p ...

var_58          = dword ptr -58h
var_54          = dword ptr -54h
var_40          = dword ptr -40h
var_2C          = dword ptr -2Ch
var_18          = dword ptr -18h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75CF0 SIZE 00000041 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_488EF0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 4Ch
                mov     [ebp+var_58], ecx
                mov     [ebp+var_4], 2
                mov     eax, [ebp+var_58]
                add     eax, 59h
                mov     [ebp+var_18], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_18]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 2
                mov     byte ptr [ebp+var_4], 1
                mov     ecx, [ebp+var_58]
                add     ecx, 3Dh
                mov     [ebp+var_2C], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     edx, [ebp+var_58]
                add     edx, 21h
                mov     [ebp+var_40], edx
                mov     byte ptr [ebp+var_4], 5
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_58]
                add     eax, 5
                mov     [ebp+var_54], eax
                mov     [ebp+var_4], 6
                push    0
                push    1
                mov     ecx, [ebp+var_54]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_488EF0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_488FB0      proc near               ; CODE XREF: sub_488C30+151↑p

var_78          = dword ptr -78h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 78h
                mov     [ebp+var_78], ecx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+1]
                mov     [eax+1], dx
                mov     eax, [ebp+var_78]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+3]
                mov     [eax+3], dx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 5
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 5
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 21h
                push    eax
                mov     ecx, [ebp+var_78]
                add     ecx, 21h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Dh
                push    edx
                mov     ecx, [ebp+var_78]
                add     ecx, 3Dh
                call    sub_4A0090
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 59h
                push    ecx
                mov     ecx, [ebp+var_78]
                add     ecx, 59h
                call    sub_4A0090
                mov     eax, [ebp+var_78]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_488FB0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_489060      proc near               ; CODE XREF: sub_45E870+1139↑p

var_138         = dword ptr -138h
var_134         = dword ptr -134h
var_104         = dword ptr -104h
var_FD          = byte ptr -0FDh
var_FC          = byte ptr -0FCh
var_F8          = byte ptr -0F8h
var_F7          = byte ptr -0F7h
var_F5          = byte ptr -0F5h
var_F1          = byte ptr -0F1h
var_F0          = byte ptr -0F0h
var_EC          = byte ptr -0ECh
var_EB          = byte ptr -0EBh
var_E7          = byte ptr -0E7h
var_E3          = byte ptr -0E3h
var_DF          = byte ptr -0DFh
var_DB          = byte ptr -0DBh
var_D7          = byte ptr -0D7h
var_D3          = byte ptr -0D3h
var_CF          = byte ptr -0CFh
var_CB          = byte ptr -0CBh
var_C7          = byte ptr -0C7h
var_C3          = byte ptr -0C3h
var_BF          = byte ptr -0BFh
var_BB          = byte ptr -0BBh
var_B7          = byte ptr -0B7h
var_B3          = byte ptr -0B3h
var_AF          = byte ptr -0AFh
var_AB          = byte ptr -0ABh
var_A7          = byte ptr -0A7h
var_A3          = byte ptr -0A3h
var_9F          = byte ptr -9Fh
var_9B          = byte ptr -9Bh
var_97          = byte ptr -97h
var_93          = byte ptr -93h
var_8F          = byte ptr -8Fh
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_83          = byte ptr -83h
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 12Ch
                push    esi
                push    edi
                mov     [ebp+var_134], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_104], eax
                mov     ecx, [ebp+var_134]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4890B7
                mov     [ebp+var_138], offset byte_110A50C
                jmp     short loc_4890C5
; ---------------------------------------------------------------------------

loc_4890B7:                             ; CODE XREF: sub_489060+49↑j
                mov     edx, [ebp+var_134]
                mov     eax, [edx]
                mov     [ebp+var_138], eax

loc_4890C5:                             ; CODE XREF: sub_489060+55↑j
                push    0
                mov     ecx, [ebp+var_104]
                push    ecx
                push    offset aTbTalk  ; "tb_Talk"
                mov     edx, [ebp+var_138]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4890FA
; ---------------------------------------------------------------------------

loc_4890F1:                             ; CODE XREF: sub_489060+308↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4890FA:                             ; CODE XREF: sub_489060+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48936D
                lea     eax, [ebp+var_FC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_F8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_F7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_F5]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_F1]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_EC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_EB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_E7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_E3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_DF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_DB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_D7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_D3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_CF]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_CB]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_C7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_C3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_BF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_BB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_B7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_B3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AF]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_AB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_A3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_9F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_9B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_97]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_93]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_8F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_8B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_87]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_83]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_FC]
                push    eax
                mov     ecx, [ebp+var_134]
                add     ecx, 0C80h
                call    sub_49D190
                mov     ecx, 24h
                lea     esi, [ebp+var_FC]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_4890F1
; ---------------------------------------------------------------------------

loc_48936D:                             ; CODE XREF: sub_489060+A0↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_134]
                call    read_and_verify_checksum
                mov     [ebp+var_FD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_FD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_489060      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4893B0      proc near               ; CODE XREF: sub_45E870+114F↑p

var_CC          = dword ptr -0CCh
var_C8          = dword ptr -0C8h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = byte ptr -94h
var_92          = byte ptr -92h
var_90          = byte ptr -90h
var_8E          = byte ptr -8Eh
var_8C          = byte ptr -8Ch
var_8A          = byte ptr -8Ah
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_84          = byte ptr -84h
var_82          = byte ptr -82h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7C          = byte ptr -7Ch
var_7A          = byte ptr -7Ah
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_66          = byte ptr -66h
var_64          = byte ptr -64h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0C0h
                push    esi
                push    edi
                mov     [ebp+var_C8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_9C], eax
                mov     ecx, [ebp+var_C8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_489407
                mov     [ebp+var_CC], offset byte_110A50C
                jmp     short loc_489415
; ---------------------------------------------------------------------------

loc_489407:                             ; CODE XREF: sub_4893B0+49↑j
                mov     edx, [ebp+var_C8]
                mov     eax, [edx]
                mov     [ebp+var_CC], eax

loc_489415:                             ; CODE XREF: sub_4893B0+55↑j
                push    0
                mov     ecx, [ebp+var_9C]
                push    ecx
                push    offset aTbTalkList ; "tb_Talk_List"
                mov     edx, [ebp+var_CC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48944A
; ---------------------------------------------------------------------------

loc_489441:                             ; CODE XREF: sub_4893B0+223↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48944A:                             ; CODE XREF: sub_4893B0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_4895D8
                lea     eax, [ebp+var_94]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_92]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_8E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_8C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_8A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_84]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_82]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_66]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_62]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_94]
                push    edx
                mov     ecx, [ebp+var_C8]
                add     ecx, 0C90h
                call    sub_49D360
                mov     ecx, 0Dh
                lea     esi, [ebp+var_94]
                mov     edi, eax
                rep movsd
                jmp     loc_489441
; ---------------------------------------------------------------------------

loc_4895D8:                             ; CODE XREF: sub_4893B0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_C8]
                call    read_and_verify_checksum
                mov     [ebp+var_95], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_95]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4893B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_489620      proc near               ; CODE XREF: sub_45E870+1165↑p

var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_128         = dword ptr -128h
var_118         = dword ptr -118h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = word ptr -80h
var_7E          = byte ptr -7Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48A8A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 128h
                mov     [ebp+var_12C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_12C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_489675
                mov     [ebp+var_130], offset byte_110A50C
                jmp     short loc_489683
; ---------------------------------------------------------------------------

loc_489675:                             ; CODE XREF: sub_489620+47↑j
                mov     edx, [ebp+var_12C]
                mov     eax, [edx]
                mov     [ebp+var_130], eax

loc_489683:                             ; CODE XREF: sub_489620+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbTalkString ; "tb_Talk_String"
                mov     edx, [ebp+var_130]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_4896B8
; ---------------------------------------------------------------------------

loc_4896AF:                             ; CODE XREF: sub_489620+164↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_4896B8:                             ; CODE XREF: sub_489620+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_489789
                lea     eax, [ebp+var_7E]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_134], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_12C]
                add     ecx, 0CA0h
                call    sub_49D4E0
                mov     [ebp+var_118], eax
                mov     eax, [ebp+var_118]
                mov     cx, [ebp+var_80]
                mov     [eax], cx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7E]
                push    eax
                mov     ecx, [ebp+var_118]
                add     ecx, 2
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7E]
                mov     [ebp+var_128], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_128]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_4896AF
; ---------------------------------------------------------------------------

loc_489789:                             ; CODE XREF: sub_489620+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_12C]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_489620      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4897D0      proc near               ; CODE XREF: sub_45E870+117B↑p

var_144         = dword ptr -144h
var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_124         = dword ptr -124h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_80          = byte ptr -80h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_4897D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 138h
                mov     [ebp+var_13C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_13C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_489825
                mov     [ebp+var_140], offset byte_110A50C
                jmp     short loc_489833
; ---------------------------------------------------------------------------

loc_489825:                             ; CODE XREF: sub_4897D0+47↑j
                mov     edx, [ebp+var_13C]
                mov     eax, [edx]
                mov     [ebp+var_140], eax

loc_489833:                             ; CODE XREF: sub_4897D0+53↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbTime  ; "tb_Time"
                mov     edx, [ebp+var_140]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_489868
; ---------------------------------------------------------------------------

loc_48985F:                             ; CODE XREF: sub_4897D0+188↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_489868:                             ; CODE XREF: sub_4897D0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48995D
                lea     eax, [ebp+var_80]
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_144], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int32
                push    1FFh
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_84]
                push    eax
                mov     ecx, [ebp+var_13C]
                add     ecx, 0CB0h
                call    sub_49D690
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_124]
                mov     edx, [ebp+var_84]
                mov     [ecx], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                lea     ecx, [ebp+var_80]
                push    ecx
                mov     ecx, [ebp+var_124]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, [ebp+var_124]
                movss   xmm0, [ebp+var_64]
                movss   dword ptr [edx+20h], xmm0
                mov     byte ptr [ebp+var_4], 0
                lea     eax, [ebp+var_80]
                mov     [ebp+var_138], eax
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_138]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_48985F
; ---------------------------------------------------------------------------

loc_48995D:                             ; CODE XREF: sub_4897D0+9E↑j
                lea     ecx, [ebp+var_5C]
                push    ecx
                mov     ecx, [ebp+var_13C]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_4897D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_4899A0      proc near               ; CODE XREF: sub_45E870+1191↑p

var_C4          = dword ptr -0C4h
var_C0          = dword ptr -0C0h
var_A0          = dword ptr -0A0h
var_99          = byte ptr -99h
var_98          = byte ptr -98h
var_94          = byte ptr -94h
var_90          = byte ptr -90h
var_8F          = byte ptr -8Fh
var_8E          = byte ptr -8Eh
var_8C          = byte ptr -8Ch
var_8B          = byte ptr -8Bh
var_87          = byte ptr -87h
var_86          = byte ptr -86h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_83          = byte ptr -83h
var_82          = byte ptr -82h
var_81          = byte ptr -81h
var_7F          = byte ptr -7Fh
var_7D          = byte ptr -7Dh
var_7B          = byte ptr -7Bh
var_79          = byte ptr -79h
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_67          = byte ptr -67h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B8h
                push    esi
                push    edi
                mov     [ebp+var_C0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A0], eax
                mov     ecx, [ebp+var_C0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_4899F7
                mov     [ebp+var_C4], offset byte_110A50C
                jmp     short loc_489A05
; ---------------------------------------------------------------------------

loc_4899F7:                             ; CODE XREF: sub_4899A0+49↑j
                mov     edx, [ebp+var_C0]
                mov     eax, [edx]
                mov     [ebp+var_C4], eax

loc_489A05:                             ; CODE XREF: sub_4899A0+55↑j
                push    0
                mov     ecx, [ebp+var_A0]
                push    ecx
                push    offset aTbTitleInfo ; "tb_Title_Info"
                mov     edx, [ebp+var_C4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_489A3A
; ---------------------------------------------------------------------------

loc_489A31:                             ; CODE XREF: sub_4899A0+216↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_489A3A:                             ; CODE XREF: sub_4899A0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_489BBB
                lea     eax, [ebp+var_98]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_94]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_90]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_8E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_8C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_8B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_87]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_86]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_85]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_84]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_83]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_82]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_81]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_79]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     ecx, [ebp+var_67]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_float32
                fstp    st
                lea     edx, [ebp+var_98]
                push    edx
                mov     ecx, [ebp+var_C0]
                add     ecx, 0CC0h
                call    sub_49B000
                mov     ecx, 0Dh
                lea     esi, [ebp+var_98]
                mov     edi, eax
                rep movsd
                movsb
                jmp     loc_489A31
; ---------------------------------------------------------------------------

loc_489BBB:                             ; CODE XREF: sub_4899A0+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_C0]
                call    read_and_verify_checksum
                mov     [ebp+var_99], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_99]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_4899A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_489C00      proc near               ; CODE XREF: sub_45E870+11A7↑p

var_10C         = dword ptr -10Ch
var_108         = dword ptr -108h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = byte ptr -80h
var_7C          = byte ptr -7Ch
var_78          = byte ptr -78h
var_74          = byte ptr -74h
var_70          = byte ptr -70h
var_6C          = byte ptr -6Ch
var_68          = byte ptr -68h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 100h
                push    esi
                push    edi
                mov     [ebp+var_108], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_108]
                cmp     dword ptr [ecx], 0
                jnz     short loc_489C57
                mov     [ebp+var_10C], offset byte_110A50C
                jmp     short loc_489C65
; ---------------------------------------------------------------------------

loc_489C57:                             ; CODE XREF: sub_489C00+49↑j
                mov     edx, [ebp+var_108]
                mov     eax, [edx]
                mov     [ebp+var_10C], eax

loc_489C65:                             ; CODE XREF: sub_489C00+55↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbTitleReward ; "tb_Title_Reward"
                mov     edx, [ebp+var_10C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_489C9A
; ---------------------------------------------------------------------------

loc_489C91:                             ; CODE XREF: sub_489C00+127↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_489C9A:                             ; CODE XREF: sub_489C00+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_489D2C
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_78]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_74]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_108]
                add     ecx, 0CD0h
                call    sub_49D890
                mov     ecx, 8
                lea     esi, [ebp+var_80]
                mov     edi, eax
                rep movsd
                jmp     loc_489C91
; ---------------------------------------------------------------------------

loc_489D2C:                             ; CODE XREF: sub_489C00+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_108]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_489C00      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_489D70      proc near               ; CODE XREF: sub_45E870+11BD↑p

var_1EC         = dword ptr -1ECh
var_1E8         = dword ptr -1E8h
var_C4          = dword ptr -0C4h
var_BD          = byte ptr -0BDh
var_BC          = byte ptr -0BCh
var_B8          = byte ptr -0B8h
var_9C          = byte ptr -9Ch
var_80          = byte ptr -80h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75D80 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_489D70
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1E0h
                mov     [ebp+var_1E8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_C4], eax
                mov     ecx, [ebp+var_1E8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_489DC5
                mov     [ebp+var_1EC], offset byte_110A50C
                jmp     short loc_489DD3
; ---------------------------------------------------------------------------

loc_489DC5:                             ; CODE XREF: sub_489D70+47↑j
                mov     edx, [ebp+var_1E8]
                mov     eax, [edx]
                mov     [ebp+var_1EC], eax

loc_489DD3:                             ; CODE XREF: sub_489D70+53↑j
                push    0
                mov     ecx, [ebp+var_C4]
                push    ecx
                push    offset aTbTitleString ; "tb_Title_String"
                mov     edx, [ebp+var_1EC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_489E08
; ---------------------------------------------------------------------------

loc_489DFF:                             ; CODE XREF: sub_489D70+130↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_489E08:                             ; CODE XREF: sub_489D70+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_489EA5
                lea     ecx, [ebp+var_BC]
                call    sub_489EE0
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_B8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_9C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_BC]
                push    ecx
                lea     edx, [ebp+var_BC]
                push    edx
                mov     ecx, [ebp+var_1E8]
                add     ecx, 0CE0h
                call    sub_49DA00
                mov     ecx, eax
                call    sub_48A040
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_BC]
                call    sub_489FA0
                jmp     loc_489DFF
; ---------------------------------------------------------------------------

loc_489EA5:                             ; CODE XREF: sub_489D70+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_1E8]
                call    read_and_verify_checksum
                mov     [ebp+var_BD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_BD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_489D70      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_489EE0      proc near               ; CODE XREF: sub_489D70+AA↑p
                                        ; sub_49DA00+A1↓p

var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_4D          = byte ptr -4Dh
var_4C          = dword ptr -4Ch
var_44          = dword ptr -44h
var_31          = byte ptr -31h
var_30          = dword ptr -30h
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75DA0 SIZE 0000002E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_489EE0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 64h
                mov     [ebp+var_64], ecx
                mov     eax, [ebp+var_64]
                add     eax, 4
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_68], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_64]
                add     eax, 20h
                mov     [ebp+var_44], eax
                lea     ecx, [ebp+var_31]
                mov     [ebp+var_30], ecx
                mov     edx, [ebp+var_44]
                mov     [ebp+var_6C], edx
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    0
                mov     ecx, [ebp+var_44]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     eax, [ebp+var_64]
                add     eax, 3Ch
                mov     [ebp+var_60], eax
                lea     ecx, [ebp+var_4D]
                mov     [ebp+var_4C], ecx
                mov     edx, [ebp+var_60]
                mov     [ebp+var_70], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    0
                mov     ecx, [ebp+var_60]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_64]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_489EE0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_489FA0      proc near               ; CODE XREF: sub_489D70+12B↑p
                                        ; sub_49DA00+11F↓p ...

var_44          = dword ptr -44h
var_40          = dword ptr -40h
var_30          = dword ptr -30h
var_20          = dword ptr -20h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75DE0 SIZE 0000002E BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_489FA0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 38h
                mov     [ebp+var_44], ecx
                mov     [ebp+var_4], 1
                mov     eax, [ebp+var_44]
                add     eax, 3Ch
                mov     [ebp+var_20], eax
                mov     byte ptr [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_20]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 1
                mov     byte ptr [ebp+var_4], 0
                mov     ecx, [ebp+var_44]
                add     ecx, 20h
                mov     [ebp+var_30], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_30]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     edx, [ebp+var_44]
                add     edx, 4
                mov     [ebp+var_40], edx
                mov     [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_40]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_489FA0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48A040      proc near               ; CODE XREF: sub_489D70+11C↑p

var_88          = dword ptr -88h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 88h
                mov     [ebp+var_88], ecx
                mov     eax, [ebp+var_88]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 4
                push    ecx
                mov     ecx, [ebp+var_88]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 20h
                push    eax
                mov     ecx, [ebp+var_88]
                add     ecx, 20h
                call    sub_4A0090
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+arg_0]
                add     edx, 3Ch
                push    edx
                mov     ecx, [ebp+var_88]
                add     ecx, 3Ch
                call    sub_4A0090
                mov     eax, [ebp+var_88]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_48A040      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48A0D0      proc near               ; CODE XREF: sub_45E870+11D3↑p

var_1BC         = dword ptr -1BCh
var_1B8         = dword ptr -1B8h
var_A4          = dword ptr -0A4h
var_9D          = byte ptr -9Dh
var_9C          = byte ptr -9Ch
var_98          = byte ptr -98h
var_7C          = byte ptr -7Ch
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48A0D0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 1B0h
                mov     [ebp+var_1B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_A4], eax
                mov     ecx, [ebp+var_1B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48A125
                mov     [ebp+var_1BC], offset byte_110A50C
                jmp     short loc_48A133
; ---------------------------------------------------------------------------

loc_48A125:                             ; CODE XREF: sub_48A0D0+47↑j
                mov     edx, [ebp+var_1B8]
                mov     eax, [edx]
                mov     [ebp+var_1BC], eax

loc_48A133:                             ; CODE XREF: sub_48A0D0+53↑j
                push    0
                mov     ecx, [ebp+var_A4]
                push    ecx
                push    offset aTbTooltipStrin ; "tb_Tooltip_String"
                mov     edx, [ebp+var_1BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48A168
; ---------------------------------------------------------------------------

loc_48A15F:                             ; CODE XREF: sub_48A0D0+118↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48A168:                             ; CODE XREF: sub_48A0D0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_48A1ED
                lea     ecx, [ebp+var_9C]
                call    sub_460790
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_98]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_9C]
                push    eax
                lea     ecx, [ebp+var_9C]
                push    ecx
                mov     ecx, [ebp+var_1B8]
                add     ecx, 0CF0h
                call    sub_4978B0
                mov     ecx, eax
                call    sub_48A230
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_9C]
                call    sub_A56C70
                jmp     loc_48A15F
; ---------------------------------------------------------------------------

loc_48A1ED:                             ; CODE XREF: sub_48A0D0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_1B8]
                call    read_and_verify_checksum
                mov     [ebp+var_9D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_9D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48A0D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48A230      proc near               ; CODE XREF: sub_460630+101↑p
                                        ; sub_47B2C0+104↑p ...

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 4
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 4
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 20h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 20h
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_48A230      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48A290      proc near               ; CODE XREF: sub_45E870+11E9↑p

var_100         = dword ptr -100h
var_FC          = dword ptr -0FCh
var_F8          = dword ptr -0F8h
var_D4          = dword ptr -0D4h
var_CD          = byte ptr -0CDh
var_CC          = byte ptr -0CCh
var_CA          = byte ptr -0CAh
var_C9          = byte ptr -0C9h
var_C8          = byte ptr -0C8h
var_C6          = byte ptr -0C6h
var_C5          = byte ptr -0C5h
var_C1          = byte ptr -0C1h
var_C0          = byte ptr -0C0h
var_BC          = byte ptr -0BCh
var_B8          = byte ptr -0B8h
var_9C          = byte ptr -9Ch
var_9B          = byte ptr -9Bh
var_97          = byte ptr -97h
var_96          = byte ptr -96h
var_94          = byte ptr -94h
var_92          = byte ptr -92h
var_90          = byte ptr -90h
var_8E          = byte ptr -8Eh
var_8C          = byte ptr -8Ch
var_8A          = byte ptr -8Ah
var_89          = byte ptr -89h
var_87          = byte ptr -87h
var_85          = byte ptr -85h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75E20 SIZE 00000034 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48A290
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0F4h
                mov     [ebp+var_FC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_D4], eax
                mov     ecx, [ebp+var_FC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48A2E5
                mov     [ebp+var_100], offset byte_110A50C
                jmp     short loc_48A2F3
; ---------------------------------------------------------------------------

loc_48A2E5:                             ; CODE XREF: sub_48A290+47↑j
                mov     edx, [ebp+var_FC]
                mov     eax, [edx]
                mov     [ebp+var_100], eax

loc_48A2F3:                             ; CODE XREF: sub_48A290+53↑j
                push    0
                mov     ecx, [ebp+var_D4]
                push    ecx
                push    offset aTbTransportInf ; "tb_Transport_Info"
                mov     edx, [ebp+var_100]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48A328
; ---------------------------------------------------------------------------

loc_48A31F:                             ; CODE XREF: sub_48A290+281↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48A328:                             ; CODE XREF: sub_48A290+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48A516
                lea     ecx, [ebp+var_B8]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_85]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_CC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_CA]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_C9]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_C8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_C6]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_C5]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_C1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_C0]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     eax, [ebp+var_B8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_9C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_9B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_97]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_96]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_94]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_92]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_90]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     edx, [ebp+var_8E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_8C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     ecx, [ebp+var_8A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_89]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_int16
                lea     eax, [ebp+var_87]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_int16
                push    1FFh
                lea     ecx, [ebp+var_85]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_CC]
                push    edx
                lea     eax, [ebp+var_CC]
                push    eax
                mov     ecx, [ebp+var_FC]
                add     ecx, 0D00h
                call    sub_49DC20
                mov     ecx, eax
                call    sub_48A5D0
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_85]
                mov     [ebp+var_F8], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_F8]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_B8]
                call    sub_93E020
                jmp     loc_48A31F
; ---------------------------------------------------------------------------

loc_48A516:                             ; CODE XREF: sub_48A290+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_FC]
                call    read_and_verify_checksum
                mov     [ebp+var_CD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_CD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48A290      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48A550      proc near               ; CODE XREF: sub_49DC20+126↓p
                                        ; sub_49DC20+138↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F7F400 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_6868C0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 47h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 14h
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48A550      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48A5D0      proc near               ; CODE XREF: sub_48A290+246↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx]
                mov     [eax], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+2]
                mov     [eax+2], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+3]
                mov     [eax+3], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+4]
                mov     [eax+4], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+6]
                mov     [eax+6], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+7]
                mov     [eax+7], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Bh]
                mov     [eax+0Bh], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Ch]
                mov     [eax+0Ch], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+10h]
                mov     [eax+10h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 14h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 14h
                call    sub_4A0090
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+30h]
                mov     [edx+30h], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     ecx, [eax+31h]
                mov     [edx+31h], ecx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+35h]
                mov     [edx+35h], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+36h]
                mov     [edx+36h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+38h]
                mov     [edx+38h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+3Ah]
                mov     [edx+3Ah], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+3Ch]
                mov     [edx+3Ch], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+3Eh]
                mov     [edx+3Eh], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+40h]
                mov     [edx+40h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cl, [eax+42h]
                mov     [edx+42h], cl
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+43h]
                mov     [edx+43h], cx
                mov     edx, [ebp+var_70]
                mov     eax, [ebp+arg_0]
                mov     cx, [eax+45h]
                mov     [edx+45h], cx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 47h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 47h
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_48A5D0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48A730      proc near               ; CODE XREF: sub_45E870+11FF↑p

var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_80          = dword ptr -80h
var_79          = byte ptr -79h
var_78          = dword ptr -78h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_67          = byte ptr -67h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E4h
                mov     [ebp+var_EC], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_80], eax
                mov     ecx, [ebp+var_EC]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48A782
                mov     [ebp+var_F0], offset byte_110A50C
                jmp     short loc_48A790
; ---------------------------------------------------------------------------

loc_48A782:                             ; CODE XREF: sub_48A730+44↑j
                mov     edx, [ebp+var_EC]
                mov     eax, [edx]
                mov     [ebp+var_F0], eax

loc_48A790:                             ; CODE XREF: sub_48A730+50↑j
                push    0
                mov     ecx, [ebp+var_80]
                push    ecx
                push    offset aTbTransportNpc ; "tb_Transport_NPC_Pos"
                mov     edx, [ebp+var_F0]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48A7C2
; ---------------------------------------------------------------------------

loc_48A7B9:                             ; CODE XREF: sub_48A730+12A↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48A7C2:                             ; CODE XREF: sub_48A730+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48A85F
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_78+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_78+3]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_73]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_67]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_78]
                push    ecx
                mov     ecx, [ebp+var_EC]
                add     ecx, 0D10h
                call    sub_49DEB0
                mov     edx, [ebp+var_78]
                mov     [eax], edx
                mov     ecx, [ebp-74h]
                mov     [eax+4], ecx
                mov     edx, [ebp-70h]
                mov     [eax+8], edx
                mov     ecx, [ebp-6Ch]
                mov     [eax+0Ch], ecx
                mov     edx, [ebp-68h]
                mov     [eax+10h], edx
                mov     cl, [ebp+var_64]
                mov     [eax+14h], cl
                jmp     loc_48A7B9
; ---------------------------------------------------------------------------

loc_48A85F:                             ; CODE XREF: sub_48A730+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_EC]
                call    read_and_verify_checksum
                mov     [ebp+var_79], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_79]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48A730      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48A8A0      proc near               ; CODE XREF: sub_45E870+1215↑p

var_134         = dword ptr -134h
var_130         = dword ptr -130h
var_12C         = dword ptr -12Ch
var_128         = dword ptr -128h
var_118         = dword ptr -118h
var_98          = dword ptr -98h
var_91          = byte ptr -91h
var_90          = dword ptr -90h
var_88          = dword ptr -88h
var_81          = byte ptr -81h
var_80          = word ptr -80h
var_7E          = byte ptr -7Eh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48A8A0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 128h
                mov     [ebp+var_12C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_88], eax
                mov     ecx, [ebp+var_12C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48A8F5
                mov     [ebp+var_130], offset byte_110A50C
                jmp     short loc_48A903
; ---------------------------------------------------------------------------

loc_48A8F5:                             ; CODE XREF: sub_48A8A0+47↑j
                mov     edx, [ebp+var_12C]
                mov     eax, [edx]
                mov     [ebp+var_130], eax

loc_48A903:                             ; CODE XREF: sub_48A8A0+53↑j
                push    0
                mov     ecx, [ebp+var_88]
                push    ecx
                push    offset aTbUiImg ; "tb_UI_Img"
                mov     edx, [ebp+var_130]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48A938
; ---------------------------------------------------------------------------

loc_48A92F:                             ; CODE XREF: sub_48A8A0+164↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48A938:                             ; CODE XREF: sub_48A8A0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48AA09
                lea     eax, [ebp+var_7E]
                mov     [ebp+var_98], eax
                lea     ecx, [ebp+var_91]
                mov     [ebp+var_90], ecx
                mov     edx, [ebp+var_98]
                mov     [ebp+var_134], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_98]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_80]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                push    1FFh
                lea     ecx, [ebp+var_7E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_80]
                push    edx
                mov     ecx, [ebp+var_12C]
                add     ecx, 0D20h
                call    sub_49D4E0
                mov     [ebp+var_118], eax
                mov     eax, [ebp+var_118]
                mov     cx, [ebp+var_80]
                mov     [eax], cx
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7E]
                push    eax
                mov     ecx, [ebp+var_118]
                add     ecx, 2
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7E]
                mov     [ebp+var_128], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_128]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_48A92F
; ---------------------------------------------------------------------------

loc_48AA09:                             ; CODE XREF: sub_48A8A0+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_12C]
                call    read_and_verify_checksum
                mov     [ebp+var_81], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_81]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48A8A0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48AA50      proc near               ; CODE XREF: sub_45E870+122B↑p

var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_85          = byte ptr -85h
var_83          = byte ptr -83h
var_81          = byte ptr -81h
var_7F          = byte ptr -7Fh
var_7E          = byte ptr -7Eh
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_7B          = byte ptr -7Bh
var_79          = byte ptr -79h
var_77          = byte ptr -77h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_66          = byte ptr -66h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A8h
                push    esi
                push    edi
                mov     [ebp+var_B0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_B0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48AAA7
                mov     [ebp+var_B4], offset byte_110A50C
                jmp     short loc_48AAB5
; ---------------------------------------------------------------------------

loc_48AAA7:                             ; CODE XREF: sub_48AA50+49↑j
                mov     edx, [ebp+var_B0]
                mov     eax, [edx]
                mov     [ebp+var_B4], eax

loc_48AAB5:                             ; CODE XREF: sub_48AA50+55↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbUiPopup ; "tb_UI_PopUp"
                mov     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48AAEA
; ---------------------------------------------------------------------------

loc_48AAE1:                             ; CODE XREF: sub_48AA50+1E6↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48AAEA:                             ; CODE XREF: sub_48AA50+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48AC3B
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_85]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_83]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_81]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_7D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_7C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_7B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_79]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_77]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_76]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_74]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_72]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6E]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6C]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6A]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_66]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_64]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_88]
                push    ecx
                mov     ecx, [ebp+var_B0]
                add     ecx, 0D30h
                call    sub_49E030
                mov     ecx, 9
                lea     esi, [ebp+var_88]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_48AAE1
; ---------------------------------------------------------------------------

loc_48AC3B:                             ; CODE XREF: sub_48AA50+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_B0]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_48AA50      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48AC80      proc near               ; CODE XREF: sub_45E870+1241↑p

var_144         = dword ptr -144h
var_140         = dword ptr -140h
var_13C         = dword ptr -13Ch
var_138         = dword ptr -138h
var_124         = dword ptr -124h
var_9C          = dword ptr -9Ch
var_95          = byte ptr -95h
var_94          = dword ptr -94h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = dword ptr -84h
var_80          = byte ptr -80h
var_7F          = byte ptr -7Fh
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48AC80
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 138h
                mov     [ebp+var_13C], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_13C]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48ACD5
                mov     [ebp+var_140], offset byte_110A50C
                jmp     short loc_48ACE3
; ---------------------------------------------------------------------------

loc_48ACD5:                             ; CODE XREF: sub_48AC80+47↑j
                mov     edx, [ebp+var_13C]
                mov     eax, [edx]
                mov     [ebp+var_140], eax

loc_48ACE3:                             ; CODE XREF: sub_48AC80+53↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbUiString ; "tb_UI_String"
                mov     edx, [ebp+var_140]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48AD18
; ---------------------------------------------------------------------------

loc_48AD0F:                             ; CODE XREF: sub_48AC80+183↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48AD18:                             ; CODE XREF: sub_48AC80+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48AE08
                lea     eax, [ebp+var_7F]
                mov     [ebp+var_9C], eax
                lea     ecx, [ebp+var_95]
                mov     [ebp+var_94], ecx
                mov     edx, [ebp+var_9C]
                mov     [ebp+var_144], edx
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    0
                mov     ecx, [ebp+var_9C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_80]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_7F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_84]
                push    eax
                mov     ecx, [ebp+var_13C]
                add     ecx, 0D40h
                call    sub_49E110
                mov     [ebp+var_124], eax
                mov     ecx, [ebp+var_124]
                mov     edx, [ebp+var_84]
                mov     [ecx], edx
                mov     eax, [ebp+var_124]
                mov     cl, [ebp+var_80]
                mov     [eax+4], cl
                mov     edx, dword_102FCC8
                push    edx
                push    0
                lea     eax, [ebp+var_7F]
                push    eax
                mov     ecx, [ebp+var_124]
                add     ecx, 5
                call    sub_4A0090
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_7F]
                mov     [ebp+var_138], ecx
                mov     byte ptr [ebp+var_4], 3
                push    0
                push    1
                mov     ecx, [ebp+var_138]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                jmp     loc_48AD0F
; ---------------------------------------------------------------------------

loc_48AE08:                             ; CODE XREF: sub_48AC80+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_13C]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48AC80      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48AE40      proc near               ; CODE XREF: sub_45E870+1257↑p

var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_8C          = dword ptr -8Ch
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_82          = byte ptr -82h
var_80          = byte ptr -80h
var_7E          = byte ptr -7Eh
var_7C          = byte ptr -7Ch
var_7A          = byte ptr -7Ah
var_78          = byte ptr -78h
var_76          = byte ptr -76h
var_74          = byte ptr -74h
var_72          = byte ptr -72h
var_70          = byte ptr -70h
var_6E          = byte ptr -6Eh
var_6C          = byte ptr -6Ch
var_6A          = byte ptr -6Ah
var_68          = byte ptr -68h
var_66          = byte ptr -66h
var_64          = byte ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B0h
                push    esi
                push    edi
                mov     [ebp+var_B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_8C], eax
                mov     ecx, [ebp+var_B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48AE97
                mov     [ebp+var_BC], offset byte_110A50C
                jmp     short loc_48AEA5
; ---------------------------------------------------------------------------

loc_48AE97:                             ; CODE XREF: sub_48AE40+49↑j
                mov     edx, [ebp+var_B8]
                mov     eax, [edx]
                mov     [ebp+var_BC], eax

loc_48AEA5:                             ; CODE XREF: sub_48AE40+55↑j
                push    0
                mov     ecx, [ebp+var_8C]
                push    ecx
                push    offset aTbUnityEvent ; "tb_Unity_Event"
                mov     edx, [ebp+var_BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48AEDA
; ---------------------------------------------------------------------------

loc_48AED1:                             ; CODE XREF: sub_48AE40+1A1↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48AEDA:                             ; CODE XREF: sub_48AE40+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48AFE6
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_82]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_80]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_7E]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7A]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_78]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_76]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_74]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_72]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6E]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_68]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_66]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_64]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_84]
                push    edx
                mov     ecx, [ebp+var_B8]
                add     ecx, 0D50h
                call    sub_49E380
                mov     ecx, 8
                lea     esi, [ebp+var_84]
                mov     edi, eax
                rep movsd
                movsw
                jmp     loc_48AED1
; ---------------------------------------------------------------------------

loc_48AFE6:                             ; CODE XREF: sub_48AE40+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_B8]
                call    read_and_verify_checksum
                mov     [ebp+var_85], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_85]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_48AE40      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B020      proc near               ; CODE XREF: sub_45E870+126D↑p

var_374         = dword ptr -374h
var_370         = dword ptr -370h
var_154         = dword ptr -154h
var_14D         = byte ptr -14Dh
var_14C         = byte ptr -14Ch
var_14B         = byte ptr -14Bh
var_12F         = byte ptr -12Fh
var_113         = byte ptr -113h
var_F7          = byte ptr -0F7h
var_DB          = byte ptr -0DBh
var_BF          = byte ptr -0BFh
var_A3          = byte ptr -0A3h
var_87          = byte ptr -87h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75E80 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48B020
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 368h
                mov     [ebp+var_370], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_154], eax
                mov     ecx, [ebp+var_370]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48B075
                mov     [ebp+var_374], offset byte_110A50C
                jmp     short loc_48B083
; ---------------------------------------------------------------------------

loc_48B075:                             ; CODE XREF: sub_48B020+47↑j
                mov     edx, [ebp+var_370]
                mov     eax, [edx]
                mov     [ebp+var_374], eax

loc_48B083:                             ; CODE XREF: sub_48B020+53↑j
                push    0
                mov     ecx, [ebp+var_154]
                push    ecx
                push    offset aTbVfxBattlemat ; "tb_VFX_BattleMaterial"
                mov     edx, [ebp+var_374]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48B0B8
; ---------------------------------------------------------------------------

loc_48B0AF:                             ; CODE XREF: sub_48B020+197↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48B0B8:                             ; CODE XREF: sub_48B020+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48B1BC
                lea     ecx, [ebp+var_14C]
                call    sub_48B200
                mov     byte ptr [ebp+var_4], 1
                lea     eax, [ebp+var_14C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     ecx, [ebp+var_14B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_12F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_113]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_F7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_DB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_BF]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_A3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_87]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_14C]
                push    eax
                lea     ecx, [ebp+var_14C]
                push    ecx
                mov     ecx, [ebp+var_370]
                add     ecx, 0D60h
                call    sub_49E480
                mov     ecx, eax
                call    sub_48B300
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_14C]
                call    sub_48B280
                jmp     loc_48B0AF
; ---------------------------------------------------------------------------

loc_48B1BC:                             ; CODE XREF: sub_48B020+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_370]
                call    read_and_verify_checksum
                mov     [ebp+var_14D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_14D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48B020      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B200      proc near               ; CODE XREF: sub_48B020+AA↑p
                                        ; sub_49E480+A6↓p

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_28          = dword ptr -28h
var_15          = byte ptr -15h
var_14          = dword ptr -14h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75EA0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48B200
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_2C], ecx
                mov     eax, [ebp+var_2C]
                add     eax, 1
                mov     [ebp+var_28], eax
                lea     ecx, [ebp+var_15]
                mov     [ebp+var_14], ecx
                mov     edx, [ebp+var_28]
                mov     [ebp+var_30], edx
                mov     [ebp+var_4], 0
                push    0
                push    0
                mov     ecx, [ebp+var_28]
                call    sub_4A01B0
                mov     [ebp+var_4], 1
                push    offset sub_93E020
                push    offset sub_48C660
                push    7
                push    1Ch
                mov     eax, [ebp+var_2C]
                add     eax, 1Dh
                push    eax
                call    sub_EDA018
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     eax, [ebp+var_2C]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48B200      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B280      proc near               ; CODE XREF: sub_48B020+192↑p
                                        ; sub_49E480+130↓p ...

var_20          = dword ptr -20h
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75EC0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48B280
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 14h
                mov     [ebp+var_20], ecx
                mov     [ebp+var_4], 0
                push    offset sub_93E020
                push    7
                push    1Ch
                mov     eax, [ebp+var_20]
                add     eax, 1Dh
                push    eax
                call    sub_ED9E2A
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_20]
                add     ecx, 1
                mov     [ebp+var_1C], ecx
                mov     [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48B280      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B300      proc near               ; CODE XREF: sub_48B020+183↑p

var_74          = dword ptr -74h
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 74h
                mov     [ebp+var_74], ecx
                mov     eax, [ebp+var_74]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 1
                push    ecx
                mov     ecx, [ebp+var_74]
                add     ecx, 1
                call    sub_4A0090
                mov     [ebp+var_4], 0
                jmp     short loc_48B33F
; ---------------------------------------------------------------------------

loc_48B336:                             ; CODE XREF: sub_48B300+6D↓j
                mov     edx, [ebp+var_4]
                add     edx, 1
                mov     [ebp+var_4], edx

loc_48B33F:                             ; CODE XREF: sub_48B300+34↑j
                cmp     [ebp+var_4], 7
                jnb     short loc_48B36F
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+var_4]
                imul    ecx, 1Ch
                mov     edx, [ebp+arg_0]
                lea     eax, [edx+ecx+1Dh]
                push    eax
                mov     ecx, [ebp+var_4]
                imul    ecx, 1Ch
                mov     edx, [ebp+var_74]
                lea     ecx, [edx+ecx+1Dh]
                call    sub_4A0090
                jmp     short loc_48B336
; ---------------------------------------------------------------------------

loc_48B36F:                             ; CODE XREF: sub_48B300+43↑j
                mov     eax, [ebp+var_74]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_48B300      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B380      proc near               ; CODE XREF: sub_45E870+1283↑p

var_3A8         = dword ptr -3A8h
var_3A4         = dword ptr -3A4h
var_16C         = dword ptr -16Ch
var_165         = byte ptr -165h
var_164         = byte ptr -164h
var_163         = byte ptr -163h
var_147         = byte ptr -147h
var_12B         = byte ptr -12Bh
var_10F         = byte ptr -10Fh
var_F3          = byte ptr -0F3h
var_D7          = byte ptr -0D7h
var_BB          = byte ptr -0BBh
var_9F          = byte ptr -9Fh
var_83          = byte ptr -83h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75EE0 SIZE 00000013 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48B380
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 39Ch
                mov     [ebp+var_3A4], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_16C], eax
                mov     ecx, [ebp+var_3A4]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48B3D5
                mov     [ebp+var_3A8], offset byte_110A50C
                jmp     short loc_48B3E3
; ---------------------------------------------------------------------------

loc_48B3D5:                             ; CODE XREF: sub_48B380+47↑j
                mov     edx, [ebp+var_3A4]
                mov     eax, [edx]
                mov     [ebp+var_3A8], eax

loc_48B3E3:                             ; CODE XREF: sub_48B380+53↑j
                push    0
                mov     ecx, [ebp+var_16C]
                push    ecx
                push    offset aTbVfxGroundmat ; "tb_VFX_GroundMaterial"
                mov     edx, [ebp+var_3A8]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48B418
; ---------------------------------------------------------------------------

loc_48B40F:                             ; CODE XREF: sub_48B380+1C4↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48B418:                             ; CODE XREF: sub_48B380+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48B549
                push    offset sub_93E020
                push    offset sub_48C660
                push    9
                push    1Ch
                lea     eax, [ebp+var_163]
                push    eax
                call    sub_EDA018
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_164]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_163]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_147]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_12B]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_10F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_F3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_D7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_BB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_9F]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     ecx, [ebp+var_83]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     edx, [ebp+var_164]
                push    edx
                lea     eax, [ebp+var_164]
                push    eax
                mov     ecx, [ebp+var_3A4]
                add     ecx, 0D70h
                call    sub_49E6B0
                mov     ecx, eax
                call    sub_48B5B0
                mov     byte ptr [ebp+var_4], 0
                push    offset sub_93E020
                push    9
                push    1Ch
                lea     ecx, [ebp+var_163]
                push    ecx
                call    sub_ED9E2A
                jmp     loc_48B40F
; ---------------------------------------------------------------------------

loc_48B549:                             ; CODE XREF: sub_48B380+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_3A4]
                call    read_and_verify_checksum
                mov     [ebp+var_165], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_165]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48B380      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B590      proc near               ; CODE XREF: sub_48B380+AEAB6E↓j
                                        ; sub_49E6B0+AD8956↓j

var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    ecx
                mov     [ebp+var_4], ecx
                push    offset sub_93E020
                push    9
                push    1Ch
                mov     eax, [ebp+var_4]
                add     eax, 1
                push    eax
                call    sub_ED9E2A
                mov     esp, ebp
                pop     ebp
                retn
sub_48B590      endp


; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B5B0      proc near               ; CODE XREF: sub_48B380+1A6↑p

var_3C          = dword ptr -3Ch
var_4           = dword ptr -4
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 3Ch
                mov     [ebp+var_3C], ecx
                mov     eax, [ebp+var_3C]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     [ebp+var_4], 0
                jmp     short loc_48B5D5
; ---------------------------------------------------------------------------

loc_48B5CC:                             ; CODE XREF: sub_48B5B0+54↓j
                mov     eax, [ebp+var_4]
                add     eax, 1
                mov     [ebp+var_4], eax

loc_48B5D5:                             ; CODE XREF: sub_48B5B0+1A↑j
                cmp     [ebp+var_4], 9
                jnb     short loc_48B606
                mov     ecx, dword_102FCC8
                push    ecx
                push    0
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+arg_0]
                lea     ecx, [eax+edx+1]
                push    ecx
                mov     edx, [ebp+var_4]
                imul    edx, 1Ch
                mov     eax, [ebp+var_3C]
                lea     ecx, [eax+edx+1]
                call    sub_4A0090
                jmp     short loc_48B5CC
; ---------------------------------------------------------------------------

loc_48B606:                             ; CODE XREF: sub_48B5B0+29↑j
                mov     eax, [ebp+var_3C]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_48B5B0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B610      proc near               ; CODE XREF: sub_45E870+1296↑p

var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_70          = dword ptr -70h
var_69          = byte ptr -69h
var_68          = dword ptr -68h
var_64          = dword ptr -64h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A8h
                mov     [ebp+var_B0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_70], eax
                mov     ecx, [ebp+var_B0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48B662
                mov     [ebp+var_B4], offset byte_110A50C
                jmp     short loc_48B670
; ---------------------------------------------------------------------------

loc_48B662:                             ; CODE XREF: sub_48B610+44↑j
                mov     edx, [ebp+var_B0]
                mov     eax, [edx]
                mov     [ebp+var_B4], eax

loc_48B670:                             ; CODE XREF: sub_48B610+50↑j
                push    0
                mov     ecx, [ebp+var_70]
                push    ecx
                push    offset aTbWarlordGui ; "tb_Warlord_GUI"
                mov     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48B6A2
; ---------------------------------------------------------------------------

loc_48B699:                             ; CODE XREF: sub_48B610+DE↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48B6A2:                             ; CODE XREF: sub_48B610+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     short loc_48B6F0
                lea     eax, [ebp+var_68]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_68+2]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_64]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_68]
                push    eax
                mov     ecx, [ebp+var_B0]
                add     ecx, 0D80h
                call    sub_49E940
                mov     ecx, [ebp+var_68]
                mov     [eax], ecx
                mov     edx, [ebp+var_64]
                mov     [eax+4], edx
                jmp     short loc_48B699
; ---------------------------------------------------------------------------

loc_48B6F0:                             ; CODE XREF: sub_48B610+98↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_B0]
                call    read_and_verify_checksum
                mov     [ebp+var_69], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_69]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48B610      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B730      proc near               ; CODE XREF: sub_45E870+12A9↑p

var_B4          = dword ptr -0B4h
var_B0          = dword ptr -0B0h
var_84          = dword ptr -84h
var_7D          = byte ptr -7Dh
var_7C          = byte ptr -7Ch
var_7A          = byte ptr -7Ah
var_79          = byte ptr -79h
var_77          = byte ptr -77h
var_75          = byte ptr -75h
var_73          = byte ptr -73h
var_71          = byte ptr -71h
var_6F          = byte ptr -6Fh
var_6D          = byte ptr -6Dh
var_6B          = byte ptr -6Bh
var_69          = byte ptr -69h
var_67          = byte ptr -67h
var_65          = byte ptr -65h
var_63          = byte ptr -63h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0A8h
                push    esi
                push    edi
                mov     [ebp+var_B0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_84], eax
                mov     ecx, [ebp+var_B0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48B787
                mov     [ebp+var_B4], offset byte_110A50C
                jmp     short loc_48B795
; ---------------------------------------------------------------------------

loc_48B787:                             ; CODE XREF: sub_48B730+49↑j
                mov     edx, [ebp+var_B0]
                mov     eax, [edx]
                mov     [ebp+var_B4], eax

loc_48B795:                             ; CODE XREF: sub_48B730+55↑j
                push    0
                mov     ecx, [ebp+var_84]
                push    ecx
                push    offset aTbWeekDay ; "tb_Week_Day"
                mov     edx, [ebp+var_B4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48B7CA
; ---------------------------------------------------------------------------

loc_48B7C1:                             ; CODE XREF: sub_48B730+172↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48B7CA:                             ; CODE XREF: sub_48B730+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48B8A7
                lea     eax, [ebp+var_7C]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_7A]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_79]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_75]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_73]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_71]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_6F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_6D]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_69]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_67]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_65]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_63]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_7C]
                push    edx
                mov     ecx, [ebp+var_B0]
                add     ecx, 0D90h
                call    sub_49EA30
                mov     ecx, 6
                lea     esi, [ebp+var_7C]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_48B7C1
; ---------------------------------------------------------------------------

loc_48B8A7:                             ; CODE XREF: sub_48B730+A0↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_B0]
                call    read_and_verify_checksum
                mov     [ebp+var_7D], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_7D]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_48B730      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48B8E0      proc near               ; CODE XREF: sub_45E870+12BC↑p

var_E4          = dword ptr -0E4h
var_E0          = dword ptr -0E0h
var_DC          = dword ptr -0DCh
var_C4          = dword ptr -0C4h
var_BD          = byte ptr -0BDh
var_BC          = byte ptr -0BCh
var_BB          = byte ptr -0BBh
var_BA          = byte ptr -0BAh
var_B8          = byte ptr -0B8h
var_B7          = byte ptr -0B7h
var_B6          = byte ptr -0B6h
var_B4          = byte ptr -0B4h
var_B3          = byte ptr -0B3h
var_B2          = byte ptr -0B2h
var_B1          = byte ptr -0B1h
var_AD          = byte ptr -0ADh
var_AB          = byte ptr -0ABh
var_A7          = byte ptr -0A7h
var_A3          = byte ptr -0A3h
var_87          = byte ptr -87h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75F00 SIZE 00000034 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48B8E0
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D8h
                mov     [ebp+var_E0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_C4], eax
                mov     ecx, [ebp+var_E0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48B935
                mov     [ebp+var_E4], offset byte_110A50C
                jmp     short loc_48B943
; ---------------------------------------------------------------------------

loc_48B935:                             ; CODE XREF: sub_48B8E0+47↑j
                mov     edx, [ebp+var_E0]
                mov     eax, [edx]
                mov     [ebp+var_E4], eax

loc_48B943:                             ; CODE XREF: sub_48B8E0+53↑j
                push    0
                mov     ecx, [ebp+var_C4]
                push    ecx
                push    offset aTbWeekGroup ; "tb_Week_Group"
                mov     edx, [ebp+var_E4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48B978
; ---------------------------------------------------------------------------

loc_48B96F:                             ; CODE XREF: sub_48B8E0+209↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48B978:                             ; CODE XREF: sub_48B8E0+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48BAEE
                lea     ecx, [ebp+var_A3]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_87]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_BB]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_BA]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_B8]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_B7]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_B6]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_B4]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     ecx, [ebp+var_B3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_B2]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_B1]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_AD]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     edx, [ebp+var_AB]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_A7]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                push    1FFh
                lea     ecx, [ebp+var_A3]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     edx, [ebp+var_87]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_BC]
                push    ecx
                mov     ecx, [ebp+var_E0]
                add     ecx, 0DA0h
                call    sub_49EBD0
                mov     ecx, eax
                call    sub_48BBB0
                mov     byte ptr [ebp+var_4], 3
                lea     edx, [ebp+var_87]
                mov     [ebp+var_DC], edx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_DC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_A3]
                call    sub_93E020
                jmp     loc_48B96F
; ---------------------------------------------------------------------------

loc_48BAEE:                             ; CODE XREF: sub_48B8E0+9E↑j
                lea     eax, [ebp+var_5C]
                push    eax
                mov     ecx, [ebp+var_E0]
                call    read_and_verify_checksum
                mov     [ebp+var_BD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_BD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48B8E0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48BB30      proc near               ; CODE XREF: sub_49EBD0+124↓p
                                        ; sub_49EBD0+136↓p ...

var_30          = dword ptr -30h
var_2C          = dword ptr -2Ch
var_1C          = dword ptr -1Ch
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75F40 SIZE 0000001B BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48BB30
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 24h
                mov     [ebp+var_30], ecx
                mov     [ebp+var_4], 0
                mov     eax, [ebp+var_30]
                add     eax, 35h
                mov     [ebp+var_1C], eax
                mov     byte ptr [ebp+var_4], 1
                push    0
                push    1
                mov     ecx, [ebp+var_1C]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_30]
                add     ecx, 19h
                mov     [ebp+var_2C], ecx
                mov     [ebp+var_4], 2
                push    0
                push    1
                mov     ecx, [ebp+var_2C]
                call    sub_4A01B0
                mov     [ebp+var_4], 0FFFFFFFFh
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48BB30      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48BBB0      proc near               ; CODE XREF: sub_48B8E0+1CE↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx]
                mov     [eax], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+1]
                mov     [eax+1], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+2]
                mov     [eax+2], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+5]
                mov     [eax+5], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+6]
                mov     [eax+6], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+8]
                mov     [eax+8], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+9]
                mov     [eax+9], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+0Ah]
                mov     [eax+0Ah], dl
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+0Bh]
                mov     [eax+0Bh], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dx, [ecx+0Fh]
                mov     [eax+0Fh], dx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+11h]
                mov     [eax+11h], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx+15h]
                mov     [eax+15h], edx
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 19h
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 19h
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 35h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 35h
                call    sub_4A0090
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_48BBB0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48BCA0      proc near               ; CODE XREF: sub_45E870+12CF↑p

var_BC          = dword ptr -0BCh
var_B8          = dword ptr -0B8h
var_90          = dword ptr -90h
var_89          = byte ptr -89h
var_88          = byte ptr -88h
var_86          = byte ptr -86h
var_85          = byte ptr -85h
var_84          = byte ptr -84h
var_82          = byte ptr -82h
var_81          = byte ptr -81h
var_7D          = byte ptr -7Dh
var_79          = byte ptr -79h
var_75          = byte ptr -75h
var_71          = byte ptr -71h
var_6D          = byte ptr -6Dh
var_69          = byte ptr -69h
var_65          = byte ptr -65h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0B0h
                push    esi
                push    edi
                mov     [ebp+var_B8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_90], eax
                mov     ecx, [ebp+var_B8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48BCF7
                mov     [ebp+var_BC], offset byte_110A50C
                jmp     short loc_48BD05
; ---------------------------------------------------------------------------

loc_48BCF7:                             ; CODE XREF: sub_48BCA0+49↑j
                mov     edx, [ebp+var_B8]
                mov     eax, [edx]
                mov     [ebp+var_BC], eax

loc_48BD05:                             ; CODE XREF: sub_48BCA0+55↑j
                push    0
                mov     ecx, [ebp+var_90]
                push    ecx
                push    offset aTbWeekMission ; "tb_Week_Mission"
                mov     edx, [ebp+var_BC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48BD3A
; ---------------------------------------------------------------------------

loc_48BD31:                             ; CODE XREF: sub_48BCA0+17E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48BD3A:                             ; CODE XREF: sub_48BCA0+8F↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48BE23
                lea     eax, [ebp+var_88]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_86]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_85]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     eax, [ebp+var_84]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_82]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_81]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_7D]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_79]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_75]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_71]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6D]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_69]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_65]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_88]
                push    ecx
                mov     ecx, [ebp+var_B8]
                add     ecx, 0DB0h
                call    sub_48F560
                mov     ecx, 9
                lea     esi, [ebp+var_88]
                mov     edi, eax
                rep movsd
                movsw
                movsb
                jmp     loc_48BD31
; ---------------------------------------------------------------------------

loc_48BE23:                             ; CODE XREF: sub_48BCA0+A0↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_B8]
                call    read_and_verify_checksum
                mov     [ebp+var_89], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_89]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                pop     edi
                pop     esi
                mov     esp, ebp
                pop     ebp
                retn
sub_48BCA0      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48BE60      proc near               ; CODE XREF: sub_45E870+12E2↑p

var_F4          = dword ptr -0F4h
var_F0          = dword ptr -0F0h
var_EC          = dword ptr -0ECh
var_C4          = dword ptr -0C4h
var_BD          = byte ptr -0BDh
var_BC          = byte ptr -0BCh
var_B8          = byte ptr -0B8h
var_B7          = byte ptr -0B7h
var_9B          = byte ptr -9Bh
var_7F          = byte ptr -7Fh
var_7B          = byte ptr -7Bh
var_77          = byte ptr -77h
var_73          = byte ptr -73h
var_6F          = byte ptr -6Fh
var_6B          = byte ptr -6Bh
var_69          = byte ptr -69h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

; FUNCTION CHUNK AT 00F75F70 SIZE 00000034 BYTES

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48BE60
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0E8h
                mov     [ebp+var_F0], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_C4], eax
                mov     ecx, [ebp+var_F0]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48BEB5
                mov     [ebp+var_F4], offset byte_110A50C
                jmp     short loc_48BEC3
; ---------------------------------------------------------------------------

loc_48BEB5:                             ; CODE XREF: sub_48BE60+47↑j
                mov     edx, [ebp+var_F0]
                mov     eax, [edx]
                mov     [ebp+var_F4], eax

loc_48BEC3:                             ; CODE XREF: sub_48BE60+53↑j
                push    0
                mov     ecx, [ebp+var_C4]
                push    ecx
                push    offset aTbWorldEvent ; "tb_world_event"
                mov     edx, [ebp+var_F4]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48BEF8
; ---------------------------------------------------------------------------

loc_48BEEF:                             ; CODE XREF: sub_48BE60+1B8↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48BEF8:                             ; CODE XREF: sub_48BE60+8D↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48C01D
                lea     ecx, [ebp+var_B7]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 1
                lea     ecx, [ebp+var_9B]
                call    sub_48C660
                mov     byte ptr [ebp+var_4], 2
                lea     eax, [ebp+var_BC]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_B8]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                push    1FFh
                lea     edx, [ebp+var_B7]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                push    1FFh
                lea     eax, [ebp+var_9B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_wstring_and_len
                lea     ecx, [ebp+var_7F]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_7B]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_77]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_73]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_6F]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_6B]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_69]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     edx, [ebp+var_BC]
                push    edx
                lea     eax, [ebp+var_BC]
                push    eax
                mov     ecx, [ebp+var_F0]
                add     ecx, 0DC0h
                call    sub_49EF60
                mov     ecx, eax
                call    sub_48C060
                mov     byte ptr [ebp+var_4], 3
                lea     ecx, [ebp+var_9B]
                mov     [ebp+var_EC], ecx
                mov     byte ptr [ebp+var_4], 4
                push    0
                push    1
                mov     ecx, [ebp+var_EC]
                call    sub_4A01B0
                mov     byte ptr [ebp+var_4], 3
                mov     byte ptr [ebp+var_4], 0
                lea     ecx, [ebp+var_B7]
                call    sub_93E020
                jmp     loc_48BEEF
; ---------------------------------------------------------------------------

loc_48C01D:                             ; CODE XREF: sub_48BE60+9E↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_F0]
                call    read_and_verify_checksum
                mov     [ebp+var_BD], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_BD]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48BE60      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48C060      proc near               ; CODE XREF: sub_48BE60+17D↑p

var_70          = dword ptr -70h
arg_0           = dword ptr  8

                push    ebp
                mov     ebp, esp
                sub     esp, 70h
                mov     [ebp+var_70], ecx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     edx, [ecx]
                mov     [eax], edx
                mov     eax, [ebp+var_70]
                mov     ecx, [ebp+arg_0]
                mov     dl, [ecx+4]
                mov     [eax+4], dl
                mov     eax, dword_102FCC8
                push    eax
                push    0
                mov     ecx, [ebp+arg_0]
                add     ecx, 5
                push    ecx
                mov     ecx, [ebp+var_70]
                add     ecx, 5
                call    sub_4A0090
                mov     edx, dword_102FCC8
                push    edx
                push    0
                mov     eax, [ebp+arg_0]
                add     eax, 21h
                push    eax
                mov     ecx, [ebp+var_70]
                add     ecx, 21h
                call    sub_4A0090
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+3Dh]
                mov     [ecx+3Dh], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+41h]
                mov     [ecx+41h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+45h]
                mov     [ecx+45h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+49h]
                mov     [ecx+49h], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+4Dh]
                mov     [ecx+4Dh], eax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     ax, [edx+51h]
                mov     [ecx+51h], ax
                mov     ecx, [ebp+var_70]
                mov     edx, [ebp+arg_0]
                mov     eax, [edx+53h]
                mov     [ecx+53h], eax
                mov     eax, [ebp+var_70]
                mov     esp, ebp
                pop     ebp
                retn    4
sub_48C060      endp

; ---------------------------------------------------------------------------
                align 10h

; =============== S U B R O U T I N E =======================================

; Attributes: bp-based frame

sub_48C120      proc near               ; CODE XREF: sub_45E870+12F5↑p

var_DC          = dword ptr -0DCh
var_D8          = dword ptr -0D8h
var_78          = dword ptr -78h
var_71          = byte ptr -71h
var_70          = dword ptr -70h
var_6C          = dword ptr -6Ch
var_67          = byte ptr -67h
var_66          = byte ptr -66h
var_62          = byte ptr -62h
var_60          = dword ptr -60h
var_5C          = byte ptr -5Ch
var_4C          = dword ptr -4Ch
var_10          = dword ptr -10h
var_C           = dword ptr -0Ch
var_4           = dword ptr -4

                push    ebp
                mov     ebp, esp
                push    0FFFFFFFFh
                push    offset SEH_48C120
                mov     eax, large fs:0
                push    eax
                mov     large fs:0, esp
                sub     esp, 0D0h
                mov     [ebp+var_D8], ecx
                lea     ecx, [ebp+var_5C]
                call    sub_457900
                mov     [ebp+var_4], 0
                mov     eax, dword_12AD168
                mov     [ebp+var_78], eax
                mov     ecx, [ebp+var_D8]
                cmp     dword ptr [ecx], 0
                jnz     short loc_48C172
                mov     [ebp+var_DC], offset byte_110A50C
                jmp     short loc_48C180
; ---------------------------------------------------------------------------

loc_48C172:                             ; CODE XREF: sub_48C120+44↑j
                mov     edx, [ebp+var_D8]
                mov     eax, [edx]
                mov     [ebp+var_DC], eax

loc_48C180:                             ; CODE XREF: sub_48C120+50↑j
                push    0
                mov     ecx, [ebp+var_78]
                push    ecx
                push    offset aTbWorldEventRe ; "tb_world_event_reward"
                mov     edx, [ebp+var_DC]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_table
                mov     eax, [ebp+var_4C]
                mov     [ebp+var_10], eax
                mov     [ebp+var_60], 0
                jmp     short loc_48C1B2
; ---------------------------------------------------------------------------

loc_48C1A9:                             ; CODE XREF: sub_48C120+11E↓j
                mov     ecx, [ebp+var_60]
                add     ecx, 1
                mov     [ebp+var_60], ecx

loc_48C1B2:                             ; CODE XREF: sub_48C120+87↑j
                mov     edx, [ebp+var_60]
                cmp     edx, [ebp+var_10]
                jge     loc_48C243
                lea     eax, [ebp+var_70]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     ecx, [ebp+var_6C]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_6C+1]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     eax, [ebp+var_6C+3]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_67]
                push    ecx
                lea     ecx, [ebp+var_5C]
                call    read_uint8
                lea     edx, [ebp+var_66]
                push    edx
                lea     ecx, [ebp+var_5C]
                call    read_uint32
                lea     eax, [ebp+var_62]
                push    eax
                lea     ecx, [ebp+var_5C]
                call    read_uint16
                lea     ecx, [ebp+var_70]
                push    ecx
                mov     ecx, [ebp+var_D8]
                add     ecx, 0DD0h
                call    sub_492280
                mov     edx, [ebp+var_70]
                mov     [eax], edx
                mov     ecx, [ebp+var_6C]
                mov     [eax+4], ecx
                mov     edx, [ebp-68h]
                mov     [eax+8], edx
                mov     ecx, [ebp-64h]
                mov     [eax+0Ch], ecx
                jmp     loc_48C1A9
; ---------------------------------------------------------------------------

loc_48C243:                             ; CODE XREF: sub_48C120+98↑j
                lea     edx, [ebp+var_5C]
                push    edx
                mov     ecx, [ebp+var_D8]
                call    read_and_verify_checksum
                mov     [ebp+var_71], al
                mov     [ebp+var_4], 0FFFFFFFFh
                lea     ecx, [ebp+var_5C]
                call    close_table
                mov     al, [ebp+var_71]
                mov     ecx, [ebp+var_C]
                mov     large fs:0, ecx
                mov     esp, ebp
                pop     ebp
                retn
sub_48C120      endp